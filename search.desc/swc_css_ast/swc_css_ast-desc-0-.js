searchState.loadedDescShard("swc_css_ast", 0, "AST definitions for CSS.\n<code>+</code>\n<code>+</code>\n<code>*=</code>\n<code>@</code>\n<code>|=</code>\n<code>--&gt;</code>\n<code>&lt;!--</code>\n<code>^=</code>\n<code>&gt;</code>\n`:``\n<code>||</code>\n<code>,</code>\n<code>,</code>\ne.g. <code>foo.c1.c2</code>\n<code> </code>\n<code>/</code>\n<code>/</code>\n<code>$=</code>\n<code>=</code>\n<code>=</code>\n<code>=</code>\n<code>&gt;=</code>\n<code>&gt;=</code>\n<code>&gt;</code>\n<code>&gt;</code>\n<code>#</code>\n<code>{</code>\n<code>[</code>\n<code>(</code>\n<code>~</code>\n<code>&lt;=</code>\n<code>&lt;=</code>\n<code>&lt;</code>\n<code>&lt;</code>\n<code>*</code>\n<code>*</code>\n<code>+</code>\nOnly for CSS modules\nOnly for CSS modules\n<code>}</code>\n<code>]</code>\n<code>)</code>\n<code>;</code>\n<code>;</code>\n<code>/</code>\nQuoted string.\n<code>-</code>\n<code>-</code>\n<code>~=</code>\n<code>url(value)</code>\nOne or more whitespace.\nReturns <code>Some</code> if <code>self</code> is of variant <code>AbsoluteColorBase</code>, and …\nReturns <code>Some</code> if <code>self</code> is of variant <code>All</code>, and <code>None</code> otherwise.\nReturns <code>Some</code> if <code>self</code> is of variant <code>AlphaValue</code>, and <code>None</code> …\nReturns <code>Some</code> if <code>self</code> is of variant <code>AnPlusB</code>, and <code>None</code> …\nReturns <code>Some</code> if <code>self</code> is of variant <code>AnPlusBNotation</code>, and …\nReturns <code>Some</code> if <code>self</code> is of variant <code>And</code>, and <code>None</code> otherwise.\nReturns <code>Some</code> if <code>self</code> is of variant <code>And</code>, and <code>None</code> otherwise.\nReturns <code>Some</code> if <code>self</code> is of variant <code>And</code>, and <code>None</code> otherwise.\nReturns <code>Some</code> if <code>self</code> is of variant <code>And</code>, and <code>None</code> otherwise.\nReturns <code>Some</code> if <code>self</code> is of variant <code>Angle</code>, and <code>None</code> …\nReturns <code>Some</code> if <code>self</code> is of variant <code>Angle</code>, and <code>None</code> …\nReturns <code>Some</code> if <code>self</code> is of variant <code>Angle</code>, and <code>None</code> …\nReturns <code>Some</code> if <code>self</code> is of variant <code>AnglePercentage</code>, and …\nReturns <code>Some</code> if <code>self</code> is of variant <code>Any</code>, and <code>None</code> otherwise.\nReturns <code>Some</code> if <code>self</code> is a reference of variant …\nReturns <code>Some</code> if <code>self</code> is a reference of variant <code>All</code>, and …\nReturns <code>Some</code> if <code>self</code> is a reference of variant <code>AlphaValue</code>, …\nReturns <code>Some</code> if <code>self</code> is a reference of variant <code>AnPlusB</code>, …\nReturns <code>Some</code> if <code>self</code> is a reference of variant …\nReturns <code>Some</code> if <code>self</code> is a reference of variant <code>And</code>, and …\nReturns <code>Some</code> if <code>self</code> is a reference of variant <code>And</code>, and …\nReturns <code>Some</code> if <code>self</code> is a reference of variant <code>And</code>, and …\nReturns <code>Some</code> if <code>self</code> is a reference of variant <code>And</code>, and …\nReturns <code>Some</code> if <code>self</code> is a reference of variant <code>Angle</code>, and …\nReturns <code>Some</code> if <code>self</code> is a reference of variant <code>Angle</code>, and …\nReturns <code>Some</code> if <code>self</code> is a reference of variant <code>Angle</code>, and …\nReturns <code>Some</code> if <code>self</code> is a reference of variant …\nReturns <code>Some</code> if <code>self</code> is a reference of variant <code>Any</code>, and …\nReturns <code>Some</code> if <code>self</code> is a reference of variant <code>AtRule</code>, and …\nReturns <code>Some</code> if <code>self</code> is a reference of variant <code>AtRule</code>, and …\nReturns <code>Some</code> if <code>self</code> is a reference of variant <code>AtRule</code>, and …\nReturns <code>Some</code> if <code>self</code> is a reference of variant <code>AtRule</code>, and …\nReturns <code>Some</code> if <code>self</code> is a reference of variant <code>Attribute</code>, …\nReturns <code>Some</code> if <code>self</code> is a reference of variant <code>Boolean</code>, …\nReturns <code>Some</code> if <code>self</code> is a reference of variant <code>Boolean</code>, …\nReturns <code>Some</code> if <code>self</code> is a reference of variant <code>CalcSum</code>, …\nReturns <code>Some</code> if <code>self</code> is a reference of variant …\nReturns <code>Some</code> if <code>self</code> is a reference of variant <code>Class</code>, and …\nReturns <code>Some</code> if <code>self</code> is a reference of variant …\nReturns <code>Some</code> if <code>self</code> is a reference of variant <code>Color</code>, and …\nReturns <code>Some</code> if <code>self</code> is a reference of variant …\nReturns <code>Some</code> if <code>self</code> is a reference of variant <code>Combinator</code>, …\nReturns <code>Some</code> if <code>self</code> is a reference of variant …\nReturns <code>Some</code> if <code>self</code> is a reference of variant …\nReturns <code>Some</code> if <code>self</code> is a reference of variant …\nReturns <code>Some</code> if <code>self</code> is a reference of variant …\nReturns <code>Some</code> if <code>self</code> is a reference of variant …\nReturns <code>Some</code> if <code>self</code> is a reference of variant …\nReturns <code>Some</code> if <code>self</code> is a reference of variant …\nReturns <code>Some</code> if <code>self</code> is a reference of variant <code>Constant</code>, …\nReturns <code>Some</code> if <code>self</code> is a reference of variant …\nReturns <code>Some</code> if <code>self</code> is a reference of variant …\nReturns <code>Some</code> if <code>self</code> is a reference of variant …\nReturns <code>Some</code> if <code>self</code> is a reference of variant …\nReturns <code>Some</code> if <code>self</code> is a reference of variant …\nReturns <code>Some</code> if <code>self</code> is a reference of variant <code>CustomIdent</code>…\nReturns <code>Some</code> if <code>self</code> is a reference of variant <code>CustomIdent</code>…\nReturns <code>Some</code> if <code>self</code> is a reference of variant …\nReturns <code>Some</code> if <code>self</code> is a reference of variant <code>DashedIdent</code>…\nReturns <code>Some</code> if <code>self</code> is a reference of variant <code>DashedIdent</code>…\nReturns <code>Some</code> if <code>self</code> is a reference of variant <code>DashedIdent</code>…\nReturns <code>Some</code> if <code>self</code> is a reference of variant <code>DashedIdent</code>…\nReturns <code>Some</code> if <code>self</code> is a reference of variant <code>DashedIdent</code>…\nReturns <code>Some</code> if <code>self</code> is a reference of variant <code>Declaration</code>…\nReturns <code>Some</code> if <code>self</code> is a reference of variant <code>Declaration</code>…\nReturns <code>Some</code> if <code>self</code> is a reference of variant <code>Declaration</code>…\nReturns <code>Some</code> if <code>self</code> is a reference of variant <code>Declaration</code>…\nReturns <code>Some</code> if <code>self</code> is a reference of variant <code>Delimiter</code>, …\nReturns <code>Some</code> if <code>self</code> is a reference of variant <code>Delimiter</code>, …\nReturns <code>Some</code> if <code>self</code> is a reference of variant <code>Dimension</code>, …\nReturns <code>Some</code> if <code>self</code> is a reference of variant <code>Dimension</code>, …\nReturns <code>Some</code> if <code>self</code> is a reference of variant <code>Dimension</code>, …\nReturns <code>Some</code> if <code>self</code> is a reference of variant <code>Dimension</code>, …\nReturns <code>Some</code> if <code>self</code> is a reference of variant …\nReturns <code>Some</code> if <code>self</code> is a reference of variant …\nReturns <code>Some</code> if <code>self</code> is a reference of variant <code>Feature</code>, …\nReturns <code>Some</code> if <code>self</code> is a reference of variant <code>Feature</code>, …\nReturns <code>Some</code> if <code>self</code> is a reference of variant <code>Flex</code>, and …\nReturns <code>Some</code> if <code>self</code> is a reference of variant …\nReturns <code>Some</code> if <code>self</code> is a reference of variant …\nReturns <code>Some</code> if <code>self</code> is a reference of variant …\nReturns <code>Some</code> if <code>self</code> is a reference of variant …\nReturns <code>Some</code> if <code>self</code> is a reference of variant <code>Frequency</code>, …\nReturns <code>Some</code> if <code>self</code> is a reference of variant <code>Frequency</code>, …\nReturns <code>Some</code> if <code>self</code> is a reference of variant …\nReturns <code>Some</code> if <code>self</code> is a reference of variant <code>Function</code>, …\nReturns <code>Some</code> if <code>self</code> is a reference of variant <code>Function</code>, …\nReturns <code>Some</code> if <code>self</code> is a reference of variant <code>Function</code>, …\nReturns <code>Some</code> if <code>self</code> is a reference of variant <code>Function</code>, …\nReturns <code>Some</code> if <code>self</code> is a reference of variant <code>Function</code>, …\nReturns <code>Some</code> if <code>self</code> is a reference of variant <code>Function</code>, …\nReturns <code>Some</code> if <code>self</code> is a reference of variant <code>Function</code>, …\nReturns <code>Some</code> if <code>self</code> is a reference of variant <code>Function</code>, …\nReturns <code>Some</code> if <code>self</code> is a reference of variant <code>Function</code>, …\nReturns <code>Some</code> if <code>self</code> is a reference of variant <code>Function</code>, …\nReturns <code>Some</code> if <code>self</code> is a reference of variant <code>Function</code>, …\nReturns <code>Some</code> if <code>self</code> is a reference of variant <code>Function</code>, …\nReturns <code>Some</code> if <code>self</code> is a reference of variant …\nReturns <code>Some</code> if <code>self</code> is a reference of variant …\nReturns <code>Some</code> if <code>self</code> is a reference of variant …\nReturns <code>Some</code> if <code>self</code> is a reference of variant <code>HexColor</code>, …\nReturns <code>Some</code> if <code>self</code> is a reference of variant <code>Hue</code>, and …\nReturns <code>Some</code> if <code>self</code> is a reference of variant <code>Id</code>, and <code>None</code>…\nReturns <code>Some</code> if <code>self</code> is a reference of variant <code>IdSelector</code>, …\nReturns <code>Some</code> if <code>self</code> is a reference of variant <code>Ident</code>, and …\nReturns <code>Some</code> if <code>self</code> is a reference of variant <code>Ident</code>, and …\nReturns <code>Some</code> if <code>self</code> is a reference of variant <code>Ident</code>, and …\nReturns <code>Some</code> if <code>self</code> is a reference of variant <code>Ident</code>, and …\nReturns <code>Some</code> if <code>self</code> is a reference of variant <code>Ident</code>, and …\nReturns <code>Some</code> if <code>self</code> is a reference of variant <code>Ident</code>, and …\nReturns <code>Some</code> if <code>self</code> is a reference of variant <code>Ident</code>, and …\nReturns <code>Some</code> if <code>self</code> is a reference of variant <code>Ident</code>, and …\nReturns <code>Some</code> if <code>self</code> is a reference of variant <code>Ident</code>, and …\nReturns <code>Some</code> if <code>self</code> is a reference of variant <code>Ident</code>, and …\nReturns <code>Some</code> if <code>self</code> is a reference of variant <code>Ident</code>, and …\nReturns <code>Some</code> if <code>self</code> is a reference of variant <code>Ident</code>, and …\nReturns <code>Some</code> if <code>self</code> is a reference of variant <code>Ident</code>, and …\nReturns <code>Some</code> if <code>self</code> is a reference of variant <code>Ident</code>, and …\nReturns <code>Some</code> if <code>self</code> is a reference of variant <code>Ident</code>, and …\nReturns <code>Some</code> if <code>self</code> is a reference of variant <code>Ident</code>, and …\nReturns <code>Some</code> if <code>self</code> is a reference of variant <code>Ident</code>, and …\nReturns <code>Some</code> if <code>self</code> is a reference of variant <code>Ident</code>, and …\nReturns <code>Some</code> if <code>self</code> is a reference of variant …\nReturns <code>Some</code> if <code>self</code> is a reference of variant <code>Integer</code>, …\nReturns <code>Some</code> if <code>self</code> is a reference of variant …\nReturns <code>Some</code> if <code>self</code> is a reference of variant …\nReturns <code>Some</code> if <code>self</code> is a reference of variant <code>LayerName</code>, …\nReturns <code>Some</code> if <code>self</code> is a reference of variant <code>LayerPrelude</code>…\nReturns <code>Some</code> if <code>self</code> is a reference of variant <code>Length</code>, and …\nReturns <code>Some</code> if <code>self</code> is a reference of variant <code>Length</code>, and …\nReturns <code>Some</code> if <code>self</code> is a reference of variant …\nReturns <code>Some</code> if <code>self</code> is a reference of variant …\nReturns <code>Some</code> if <code>self</code> is a reference of variant …\nReturns <code>Some</code> if <code>self</code> is a reference of variant …\nReturns <code>Some</code> if <code>self</code> is a reference of variant …\nReturns <code>Some</code> if <code>self</code> is a reference of variant …\nReturns <code>Some</code> if <code>self</code> is a reference of variant …\nReturns <code>Some</code> if <code>self</code> is a reference of variant …\nReturns <code>Some</code> if <code>self</code> is a reference of variant …\nReturns <code>Some</code> if <code>self</code> is a reference of variant …\nReturns <code>Some</code> if <code>self</code> is a reference of variant …\nReturns <code>Some</code> if <code>self</code> is a reference of variant …\nReturns <code>Some</code> if <code>self</code> is a reference of variant <code>MediaPrelude</code>…\nReturns <code>Some</code> if <code>self</code> is a reference of variant …\nReturns <code>Some</code> if <code>self</code> is a mutable reference of variant …\nReturns <code>Some</code> if <code>self</code> is a mutable reference of variant <code>All</code>…\nReturns <code>Some</code> if <code>self</code> is a mutable reference of variant …\nReturns <code>Some</code> if <code>self</code> is a mutable reference of variant …\nReturns <code>Some</code> if <code>self</code> is a mutable reference of variant …\nReturns <code>Some</code> if <code>self</code> is a mutable reference of variant <code>And</code>…\nReturns <code>Some</code> if <code>self</code> is a mutable reference of variant <code>And</code>…\nReturns <code>Some</code> if <code>self</code> is a mutable reference of variant <code>And</code>…\nReturns <code>Some</code> if <code>self</code> is a mutable reference of variant <code>And</code>…\nReturns <code>Some</code> if <code>self</code> is a mutable reference of variant …\nReturns <code>Some</code> if <code>self</code> is a mutable reference of variant …\nReturns <code>Some</code> if <code>self</code> is a mutable reference of variant …\nReturns <code>Some</code> if <code>self</code> is a mutable reference of variant …\nReturns <code>Some</code> if <code>self</code> is a mutable reference of variant <code>Any</code>…\nReturns <code>Some</code> if <code>self</code> is a mutable reference of variant …\nReturns <code>Some</code> if <code>self</code> is a mutable reference of variant …\nReturns <code>Some</code> if <code>self</code> is a mutable reference of variant …\nReturns <code>Some</code> if <code>self</code> is a mutable reference of variant …\nReturns <code>Some</code> if <code>self</code> is a mutable reference of variant …\nReturns <code>Some</code> if <code>self</code> is a mutable reference of variant …\nReturns <code>Some</code> if <code>self</code> is a mutable reference of variant …\nReturns <code>Some</code> if <code>self</code> is a mutable reference of variant …\nReturns <code>Some</code> if <code>self</code> is a mutable reference of variant …\nReturns <code>Some</code> if <code>self</code> is a mutable reference of variant …\nReturns <code>Some</code> if <code>self</code> is a mutable reference of variant …\nReturns <code>Some</code> if <code>self</code> is a mutable reference of variant …\nReturns <code>Some</code> if <code>self</code> is a mutable reference of variant …\nReturns <code>Some</code> if <code>self</code> is a mutable reference of variant …\nReturns <code>Some</code> if <code>self</code> is a mutable reference of variant …\nReturns <code>Some</code> if <code>self</code> is a mutable reference of variant …\nReturns <code>Some</code> if <code>self</code> is a mutable reference of variant …\nReturns <code>Some</code> if <code>self</code> is a mutable reference of variant …\nReturns <code>Some</code> if <code>self</code> is a mutable reference of variant …\nReturns <code>Some</code> if <code>self</code> is a mutable reference of variant …\nReturns <code>Some</code> if <code>self</code> is a mutable reference of variant …\nReturns <code>Some</code> if <code>self</code> is a mutable reference of variant …\nReturns <code>Some</code> if <code>self</code> is a mutable reference of variant …\nReturns <code>Some</code> if <code>self</code> is a mutable reference of variant …\nReturns <code>Some</code> if <code>self</code> is a mutable reference of variant …\nReturns <code>Some</code> if <code>self</code> is a mutable reference of variant …\nReturns <code>Some</code> if <code>self</code> is a mutable reference of variant …\nReturns <code>Some</code> if <code>self</code> is a mutable reference of variant …\nReturns <code>Some</code> if <code>self</code> is a mutable reference of variant …\nReturns <code>Some</code> if <code>self</code> is a mutable reference of variant …\nReturns <code>Some</code> if <code>self</code> is a mutable reference of variant …\nReturns <code>Some</code> if <code>self</code> is a mutable reference of variant …\nReturns <code>Some</code> if <code>self</code> is a mutable reference of variant …\nReturns <code>Some</code> if <code>self</code> is a mutable reference of variant …\nReturns <code>Some</code> if <code>self</code> is a mutable reference of variant …\nReturns <code>Some</code> if <code>self</code> is a mutable reference of variant …\nReturns <code>Some</code> if <code>self</code> is a mutable reference of variant …\nReturns <code>Some</code> if <code>self</code> is a mutable reference of variant …\nReturns <code>Some</code> if <code>self</code> is a mutable reference of variant …\nReturns <code>Some</code> if <code>self</code> is a mutable reference of variant …\nReturns <code>Some</code> if <code>self</code> is a mutable reference of variant …\nReturns <code>Some</code> if <code>self</code> is a mutable reference of variant …\nReturns <code>Some</code> if <code>self</code> is a mutable reference of variant …\nReturns <code>Some</code> if <code>self</code> is a mutable reference of variant …\nReturns <code>Some</code> if <code>self</code> is a mutable reference of variant …\nReturns <code>Some</code> if <code>self</code> is a mutable reference of variant …\nReturns <code>Some</code> if <code>self</code> is a mutable reference of variant …\nReturns <code>Some</code> if <code>self</code> is a mutable reference of variant …\nReturns <code>Some</code> if <code>self</code> is a mutable reference of variant …\nReturns <code>Some</code> if <code>self</code> is a mutable reference of variant <code>Flex</code>…\nReturns <code>Some</code> if <code>self</code> is a mutable reference of variant …\nReturns <code>Some</code> if <code>self</code> is a mutable reference of variant …\nReturns <code>Some</code> if <code>self</code> is a mutable reference of variant …\nReturns <code>Some</code> if <code>self</code> is a mutable reference of variant …\nReturns <code>Some</code> if <code>self</code> is a mutable reference of variant …\nReturns <code>Some</code> if <code>self</code> is a mutable reference of variant …\nReturns <code>Some</code> if <code>self</code> is a mutable reference of variant …\nReturns <code>Some</code> if <code>self</code> is a mutable reference of variant …\nReturns <code>Some</code> if <code>self</code> is a mutable reference of variant …\nReturns <code>Some</code> if <code>self</code> is a mutable reference of variant …\nReturns <code>Some</code> if <code>self</code> is a mutable reference of variant …\nReturns <code>Some</code> if <code>self</code> is a mutable reference of variant …\nReturns <code>Some</code> if <code>self</code> is a mutable reference of variant …\nReturns <code>Some</code> if <code>self</code> is a mutable reference of variant …\nReturns <code>Some</code> if <code>self</code> is a mutable reference of variant …\nReturns <code>Some</code> if <code>self</code> is a mutable reference of variant …\nReturns <code>Some</code> if <code>self</code> is a mutable reference of variant …\nReturns <code>Some</code> if <code>self</code> is a mutable reference of variant …\nReturns <code>Some</code> if <code>self</code> is a mutable reference of variant …\nReturns <code>Some</code> if <code>self</code> is a mutable reference of variant …\nReturns <code>Some</code> if <code>self</code> is a mutable reference of variant …\nReturns <code>Some</code> if <code>self</code> is a mutable reference of variant …\nReturns <code>Some</code> if <code>self</code> is a mutable reference of variant …\nReturns <code>Some</code> if <code>self</code> is a mutable reference of variant <code>Hue</code>…\nReturns <code>Some</code> if <code>self</code> is a mutable reference of variant <code>Id</code>, …\nReturns <code>Some</code> if <code>self</code> is a mutable reference of variant …\nReturns <code>Some</code> if <code>self</code> is a mutable reference of variant …\nReturns <code>Some</code> if <code>self</code> is a mutable reference of variant …\nReturns <code>Some</code> if <code>self</code> is a mutable reference of variant …\nReturns <code>Some</code> if <code>self</code> is a mutable reference of variant …\nReturns <code>Some</code> if <code>self</code> is a mutable reference of variant …\nReturns <code>Some</code> if <code>self</code> is a mutable reference of variant …\nReturns <code>Some</code> if <code>self</code> is a mutable reference of variant …\nReturns <code>Some</code> if <code>self</code> is a mutable reference of variant …\nReturns <code>Some</code> if <code>self</code> is a mutable reference of variant …\nReturns <code>Some</code> if <code>self</code> is a mutable reference of variant …\nReturns <code>Some</code> if <code>self</code> is a mutable reference of variant …\nReturns <code>Some</code> if <code>self</code> is a mutable reference of variant …\nReturns <code>Some</code> if <code>self</code> is a mutable reference of variant …\nReturns <code>Some</code> if <code>self</code> is a mutable reference of variant …\nReturns <code>Some</code> if <code>self</code> is a mutable reference of variant …\nReturns <code>Some</code> if <code>self</code> is a mutable reference of variant …\nReturns <code>Some</code> if <code>self</code> is a mutable reference of variant …\nReturns <code>Some</code> if <code>self</code> is a mutable reference of variant …\nReturns <code>Some</code> if <code>self</code> is a mutable reference of variant …\nReturns <code>Some</code> if <code>self</code> is a mutable reference of variant …\nReturns <code>Some</code> if <code>self</code> is a mutable reference of variant …\nReturns <code>Some</code> if <code>self</code> is a mutable reference of variant …\nReturns <code>Some</code> if <code>self</code> is a mutable reference of variant …\nReturns <code>Some</code> if <code>self</code> is a mutable reference of variant …\nReturns <code>Some</code> if <code>self</code> is a mutable reference of variant …\nReturns <code>Some</code> if <code>self</code> is a mutable reference of variant …\nReturns <code>Some</code> if <code>self</code> is a mutable reference of variant …\nReturns <code>Some</code> if <code>self</code> is a mutable reference of variant …\nReturns <code>Some</code> if <code>self</code> is a mutable reference of variant …\nReturns <code>Some</code> if <code>self</code> is a mutable reference of variant …\nReturns <code>Some</code> if <code>self</code> is a mutable reference of variant …\nReturns <code>Some</code> if <code>self</code> is a mutable reference of variant …\nReturns <code>Some</code> if <code>self</code> is a mutable reference of variant …\nReturns <code>Some</code> if <code>self</code> is a mutable reference of variant …\nReturns <code>Some</code> if <code>self</code> is a mutable reference of variant …\nReturns <code>Some</code> if <code>self</code> is a mutable reference of variant …\nReturns <code>Some</code> if <code>self</code> is a mutable reference of variant …\nReturns <code>Some</code> if <code>self</code> is a mutable reference of variant …\nReturns <code>Some</code> if <code>self</code> is a mutable reference of variant …\nReturns <code>Some</code> if <code>self</code> is a mutable reference of variant …\nReturns <code>Some</code> if <code>self</code> is a mutable reference of variant <code>Name</code>…\nReturns <code>Some</code> if <code>self</code> is a mutable reference of variant …\nReturns <code>Some</code> if <code>self</code> is a mutable reference of variant …\nReturns <code>Some</code> if <code>self</code> is a mutable reference of variant …\nReturns <code>Some</code> if <code>self</code> is a mutable reference of variant …\nReturns <code>Some</code> if <code>self</code> is a mutable reference of variant …\nReturns <code>Some</code> if <code>self</code> is a mutable reference of variant <code>Not</code>…\nReturns <code>Some</code> if <code>self</code> is a mutable reference of variant <code>Not</code>…\nReturns <code>Some</code> if <code>self</code> is a mutable reference of variant <code>Not</code>…\nReturns <code>Some</code> if <code>self</code> is a mutable reference of variant <code>Not</code>…\nReturns <code>Some</code> if <code>self</code> is a mutable reference of variant …\nReturns <code>Some</code> if <code>self</code> is a mutable reference of variant …\nReturns <code>Some</code> if <code>self</code> is a mutable reference of variant …\nReturns <code>Some</code> if <code>self</code> is a mutable reference of variant …\nReturns <code>Some</code> if <code>self</code> is a mutable reference of variant …\nReturns <code>Some</code> if <code>self</code> is a mutable reference of variant …\nReturns <code>Some</code> if <code>self</code> is a mutable reference of variant …\nReturns <code>Some</code> if <code>self</code> is a mutable reference of variant …\nReturns <code>Some</code> if <code>self</code> is a mutable reference of variant …\nReturns <code>Some</code> if <code>self</code> is a mutable reference of variant <code>Or</code>, …\nReturns <code>Some</code> if <code>self</code> is a mutable reference of variant <code>Or</code>, …\nReturns <code>Some</code> if <code>self</code> is a mutable reference of variant <code>Or</code>, …\nReturns <code>Some</code> if <code>self</code> is a mutable reference of variant …\nReturns <code>Some</code> if <code>self</code> is a mutable reference of variant …\nReturns <code>Some</code> if <code>self</code> is a mutable reference of variant …\nReturns <code>Some</code> if <code>self</code> is a mutable reference of variant …\nReturns <code>Some</code> if <code>self</code> is a mutable reference of variant …\nReturns <code>Some</code> if <code>self</code> is a mutable reference of variant …\nReturns <code>Some</code> if <code>self</code> is a mutable reference of variant …\nReturns <code>Some</code> if <code>self</code> is a mutable reference of variant …\nReturns <code>Some</code> if <code>self</code> is a mutable reference of variant …\nReturns <code>Some</code> if <code>self</code> is a mutable reference of variant …\nReturns <code>Some</code> if <code>self</code> is a mutable reference of variant …\nReturns <code>Some</code> if <code>self</code> is a mutable reference of variant …\nReturns <code>Some</code> if <code>self</code> is a mutable reference of variant …\nReturns <code>Some</code> if <code>self</code> is a mutable reference of variant …\nReturns <code>Some</code> if <code>self</code> is a mutable reference of variant …\nReturns <code>Some</code> if <code>self</code> is a mutable reference of variant …\nReturns <code>Some</code> if <code>self</code> is a mutable reference of variant …\nReturns <code>Some</code> if <code>self</code> is a mutable reference of variant …\nReturns <code>Some</code> if <code>self</code> is a mutable reference of variant …\nReturns <code>Some</code> if <code>self</code> is a mutable reference of variant …\nReturns <code>Some</code> if <code>self</code> is a mutable reference of variant …\nReturns <code>Some</code> if <code>self</code> is a mutable reference of variant …\nReturns <code>Some</code> if <code>self</code> is a mutable reference of variant …\nReturns <code>Some</code> if <code>self</code> is a mutable reference of variant …\nReturns <code>Some</code> if <code>self</code> is a mutable reference of variant …\nReturns <code>Some</code> if <code>self</code> is a mutable reference of variant …\nReturns <code>Some</code> if <code>self</code> is a mutable reference of variant …\nReturns <code>Some</code> if <code>self</code> is a mutable reference of variant …\nReturns <code>Some</code> if <code>self</code> is a mutable reference of variant …\nReturns <code>Some</code> if <code>self</code> is a mutable reference of variant …\nReturns <code>Some</code> if <code>self</code> is a mutable reference of variant …\nReturns <code>Some</code> if <code>self</code> is a mutable reference of variant …\nReturns <code>Some</code> if <code>self</code> is a mutable reference of variant <code>Raw</code>…\nReturns <code>Some</code> if <code>self</code> is a mutable reference of variant …\nReturns <code>Some</code> if <code>self</code> is a mutable reference of variant …\nReturns <code>Some</code> if <code>self</code> is a mutable reference of variant …\nReturns <code>Some</code> if <code>self</code> is a mutable reference of variant …\nReturns <code>Some</code> if <code>self</code> is a mutable reference of variant …\nReturns <code>Some</code> if <code>self</code> is a mutable reference of variant …\nReturns <code>Some</code> if <code>self</code> is a mutable reference of variant …\nReturns <code>Some</code> if <code>self</code> is a mutable reference of variant …\nReturns <code>Some</code> if <code>self</code> is a mutable reference of variant …\nReturns <code>Some</code> if <code>self</code> is a mutable reference of variant …\nReturns <code>Some</code> if <code>self</code> is a mutable reference of variant …\nReturns <code>Some</code> if <code>self</code> is a mutable reference of variant <code>Str</code>…\nReturns <code>Some</code> if <code>self</code> is a mutable reference of variant <code>Str</code>…\nReturns <code>Some</code> if <code>self</code> is a mutable reference of variant <code>Str</code>…\nReturns <code>Some</code> if <code>self</code> is a mutable reference of variant <code>Str</code>…\nReturns <code>Some</code> if <code>self</code> is a mutable reference of variant <code>Str</code>…\nReturns <code>Some</code> if <code>self</code> is a mutable reference of variant <code>Str</code>…\nReturns <code>Some</code> if <code>self</code> is a mutable reference of variant <code>Str</code>…\nReturns <code>Some</code> if <code>self</code> is a mutable reference of variant <code>Str</code>…\nReturns <code>Some</code> if <code>self</code> is a mutable reference of variant <code>Sum</code>…\nReturns <code>Some</code> if <code>self</code> is a mutable reference of variant …\nReturns <code>Some</code> if <code>self</code> is a mutable reference of variant …\nReturns <code>Some</code> if <code>self</code> is a mutable reference of variant …\nReturns <code>Some</code> if <code>self</code> is a mutable reference of variant …\nReturns <code>Some</code> if <code>self</code> is a mutable reference of variant …\nReturns <code>Some</code> if <code>self</code> is a mutable reference of variant <code>Time</code>…\nReturns <code>Some</code> if <code>self</code> is a mutable reference of variant <code>Time</code>…\nReturns <code>Some</code> if <code>self</code> is a mutable reference of variant …\nReturns <code>Some</code> if <code>self</code> is a mutable reference of variant …\nReturns <code>Some</code> if <code>self</code> is a mutable reference of variant …\nReturns <code>Some</code> if <code>self</code> is a mutable reference of variant …\nReturns <code>Some</code> if <code>self</code> is a mutable reference of variant <code>Url</code>…\nReturns <code>Some</code> if <code>self</code> is a mutable reference of variant <code>Url</code>…\nReturns <code>Some</code> if <code>self</code> is a mutable reference of variant <code>Url</code>…\nReturns <code>Some</code> if <code>self</code> is a mutable reference of variant <code>Url</code>…\nReturns <code>Some</code> if <code>self</code> is a mutable reference of variant …\nReturns <code>Some</code> if <code>self</code> is a mutable reference of variant …\nReturns <code>Some</code> if <code>self</code> is a reference of variant <code>Name</code>, and …\nReturns <code>Some</code> if <code>self</code> is a reference of variant <code>NameList</code>, …\nReturns <code>Some</code> if <code>self</code> is a reference of variant <code>Named</code>, and …\nReturns <code>Some</code> if <code>self</code> is a reference of variant …\nReturns <code>Some</code> if <code>self</code> is a reference of variant …\nReturns <code>Some</code> if <code>self</code> is a reference of variant <code>NestPrelude</code>…\nReturns <code>Some</code> if <code>self</code> is a reference of variant <code>Not</code>, and …\nReturns <code>Some</code> if <code>self</code> is a reference of variant <code>Not</code>, and …\nReturns <code>Some</code> if <code>self</code> is a reference of variant <code>Not</code>, and …\nReturns <code>Some</code> if <code>self</code> is a reference of variant <code>Not</code>, and …\nReturns <code>Some</code> if <code>self</code> is a reference of variant <code>Number</code>, and …\nReturns <code>Some</code> if <code>self</code> is a reference of variant <code>Number</code>, and …\nReturns <code>Some</code> if <code>self</code> is a reference of variant <code>Number</code>, and …\nReturns <code>Some</code> if <code>self</code> is a reference of variant <code>Number</code>, and …\nReturns <code>Some</code> if <code>self</code> is a reference of variant <code>Number</code>, and …\nReturns <code>Some</code> if <code>self</code> is a reference of variant <code>Number</code>, and …\nReturns <code>Some</code> if <code>self</code> is a reference of variant <code>Number</code>, and …\nReturns <code>Some</code> if <code>self</code> is a reference of variant <code>Operator</code>, …\nReturns <code>Some</code> if <code>self</code> is a reference of variant <code>Operator</code>, …\nReturns <code>Some</code> if <code>self</code> is a reference of variant <code>Or</code>, and <code>None</code>…\nReturns <code>Some</code> if <code>self</code> is a reference of variant <code>Or</code>, and <code>None</code>…\nReturns <code>Some</code> if <code>self</code> is a reference of variant <code>Or</code>, and <code>None</code>…\nReturns <code>Some</code> if <code>self</code> is a reference of variant <code>PagePrelude</code>…\nReturns <code>Some</code> if <code>self</code> is a reference of variant <code>Percentage</code>, …\nReturns <code>Some</code> if <code>self</code> is a reference of variant <code>Percentage</code>, …\nReturns <code>Some</code> if <code>self</code> is a reference of variant <code>Percentage</code>, …\nReturns <code>Some</code> if <code>self</code> is a reference of variant <code>Percentage</code>, …\nReturns <code>Some</code> if <code>self</code> is a reference of variant <code>Percentage</code>, …\nReturns <code>Some</code> if <code>self</code> is a reference of variant <code>Percentage</code>, …\nReturns <code>Some</code> if <code>self</code> is a reference of variant <code>Percentage</code>, …\nReturns <code>Some</code> if <code>self</code> is a reference of variant <code>Percentage</code>, …\nReturns <code>Some</code> if <code>self</code> is a reference of variant <code>Percentage</code>, …\nReturns <code>Some</code> if <code>self</code> is a reference of variant <code>Plain</code>, and …\nReturns <code>Some</code> if <code>self</code> is a reference of variant <code>Plain</code>, and …\nReturns <code>Some</code> if <code>self</code> is a reference of variant …\nReturns <code>Some</code> if <code>self</code> is a reference of variant …\nReturns <code>Some</code> if <code>self</code> is a reference of variant …\nReturns <code>Some</code> if <code>self</code> is a reference of variant <code>Product</code>, …\nReturns <code>Some</code> if <code>self</code> is a reference of variant …\nReturns <code>Some</code> if <code>self</code> is a reference of variant <code>PseudoClass</code>…\nReturns <code>Some</code> if <code>self</code> is a reference of variant …\nReturns <code>Some</code> if <code>self</code> is a reference of variant …\nReturns <code>Some</code> if <code>self</code> is a reference of variant <code>PseudoPrefix</code>…\nReturns <code>Some</code> if <code>self</code> is a reference of variant …\nReturns <code>Some</code> if <code>self</code> is a reference of variant …\nReturns <code>Some</code> if <code>self</code> is a reference of variant …\nReturns <code>Some</code> if <code>self</code> is a reference of variant …\nReturns <code>Some</code> if <code>self</code> is a reference of variant <code>Range</code>, and …\nReturns <code>Some</code> if <code>self</code> is a reference of variant <code>Range</code>, and …\nReturns <code>Some</code> if <code>self</code> is a reference of variant …\nReturns <code>Some</code> if <code>self</code> is a reference of variant …\nReturns <code>Some</code> if <code>self</code> is a reference of variant <code>Ratio</code>, and …\nReturns <code>Some</code> if <code>self</code> is a reference of variant <code>Ratio</code>, and …\nReturns <code>Some</code> if <code>self</code> is a reference of variant <code>Ratio</code>, and …\nReturns <code>Some</code> if <code>self</code> is a reference of variant <code>Raw</code>, and …\nReturns <code>Some</code> if <code>self</code> is a reference of variant …\nReturns <code>Some</code> if <code>self</code> is a reference of variant …\nReturns <code>Some</code> if <code>self</code> is a reference of variant …\nReturns <code>Some</code> if <code>self</code> is a reference of variant <code>Resolution</code>, …\nReturns <code>Some</code> if <code>self</code> is a reference of variant <code>ScopePrelude</code>…\nReturns <code>Some</code> if <code>self</code> is a reference of variant <code>SelectorList</code>…\nReturns <code>Some</code> if <code>self</code> is a reference of variant <code>SelectorList</code>…\nReturns <code>Some</code> if <code>self</code> is a reference of variant …\nReturns <code>Some</code> if <code>self</code> is a reference of variant <code>SimpleBlock</code>…\nReturns <code>Some</code> if <code>self</code> is a reference of variant <code>SimpleBlock</code>…\nReturns <code>Some</code> if <code>self</code> is a reference of variant <code>SizeFeature</code>…\nReturns <code>Some</code> if <code>self</code> is a reference of variant <code>Str</code>, and …\nReturns <code>Some</code> if <code>self</code> is a reference of variant <code>Str</code>, and …\nReturns <code>Some</code> if <code>self</code> is a reference of variant <code>Str</code>, and …\nReturns <code>Some</code> if <code>self</code> is a reference of variant <code>Str</code>, and …\nReturns <code>Some</code> if <code>self</code> is a reference of variant <code>Str</code>, and …\nReturns <code>Some</code> if <code>self</code> is a reference of variant <code>Str</code>, and …\nReturns <code>Some</code> if <code>self</code> is a reference of variant <code>Str</code>, and …\nReturns <code>Some</code> if <code>self</code> is a reference of variant <code>Str</code>, and …\nReturns <code>Some</code> if <code>self</code> is a reference of variant <code>Sum</code>, and …\nReturns <code>Some</code> if <code>self</code> is a reference of variant …\nReturns <code>Some</code> if <code>self</code> is a reference of variant …\nReturns <code>Some</code> if <code>self</code> is a reference of variant …\nReturns <code>Some</code> if <code>self</code> is a reference of variant …\nReturns <code>Some</code> if <code>self</code> is a reference of variant <code>TagName</code>, …\nReturns <code>Some</code> if <code>self</code> is a reference of variant <code>Time</code>, and …\nReturns <code>Some</code> if <code>self</code> is a reference of variant <code>Time</code>, and …\nReturns <code>Some</code> if <code>self</code> is a reference of variant …\nReturns <code>Some</code> if <code>self</code> is a reference of variant <code>UnicodeRange</code>…\nReturns <code>Some</code> if <code>self</code> is a reference of variant <code>Universal</code>, …\nReturns <code>Some</code> if <code>self</code> is a reference of variant …\nReturns <code>Some</code> if <code>self</code> is a reference of variant <code>Url</code>, and …\nReturns <code>Some</code> if <code>self</code> is a reference of variant <code>Url</code>, and …\nReturns <code>Some</code> if <code>self</code> is a reference of variant <code>Url</code>, and …\nReturns <code>Some</code> if <code>self</code> is a reference of variant <code>Url</code>, and …\nReturns <code>Some</code> if <code>self</code> is a reference of variant <code>Value</code>, and …\nReturns <code>Some</code> if <code>self</code> is a reference of variant <code>WithoutOr</code>, …\nReturns <code>Some</code> if <code>self</code> is of variant <code>AtRule</code>, and <code>None</code> …\nReturns <code>Some</code> if <code>self</code> is of variant <code>AtRule</code>, and <code>None</code> …\nReturns <code>Some</code> if <code>self</code> is of variant <code>AtRule</code>, and <code>None</code> …\nReturns <code>Some</code> if <code>self</code> is of variant <code>AtRule</code>, and <code>None</code> …\nReturns <code>Some</code> if <code>self</code> is of variant <code>Attribute</code>, and <code>None</code> …\nReturns <code>Some</code> if <code>self</code> is of variant <code>Boolean</code>, and <code>None</code> …\nReturns <code>Some</code> if <code>self</code> is of variant <code>Boolean</code>, and <code>None</code> …\nReturns <code>Some</code> if <code>self</code> is of variant <code>CalcSum</code>, and <code>None</code> …\nReturns <code>Some</code> if <code>self</code> is of variant <code>CharsetPrelude</code>, and <code>None</code>…\nReturns <code>Some</code> if <code>self</code> is of variant <code>Class</code>, and <code>None</code> …\nReturns <code>Some</code> if <code>self</code> is of variant <code>CmykComponent</code>, and <code>None</code> …\nReturns <code>Some</code> if <code>self</code> is of variant <code>Color</code>, and <code>None</code> …\nReturns <code>Some</code> if <code>self</code> is of variant <code>ColorProfilePrelude</code>, …\nReturns <code>Some</code> if <code>self</code> is of variant <code>Combinator</code>, and <code>None</code> …\nReturns <code>Some</code> if <code>self</code> is of variant <code>ComplexSelector</code>, and …\nReturns <code>Some</code> if <code>self</code> is of variant <code>ComplexSelector</code>, and …\nReturns <code>Some</code> if <code>self</code> is of variant <code>ComplexSelector</code>, and …\nReturns <code>Some</code> if <code>self</code> is of variant <code>CompoundSelector</code>, and …\nReturns <code>Some</code> if <code>self</code> is of variant <code>CompoundSelector</code>, and …\nReturns <code>Some</code> if <code>self</code> is of variant <code>CompoundSelector</code>, and …\nReturns <code>Some</code> if <code>self</code> is of variant <code>CompoundSelectorList</code>, …\nReturns <code>Some</code> if <code>self</code> is of variant <code>Constant</code>, and <code>None</code> …\nReturns <code>Some</code> if <code>self</code> is of variant <code>ContainerPrelude</code>, and …\nReturns <code>Some</code> if <code>self</code> is of variant <code>ContainerQuery</code>, and <code>None</code>…\nReturns <code>Some</code> if <code>self</code> is of variant <code>CounterStylePrelude</code>, …\nReturns <code>Some</code> if <code>self</code> is of variant …\nReturns <code>Some</code> if <code>self</code> is of variant <code>CustomHighlightName</code>, …\nReturns <code>Some</code> if <code>self</code> is of variant <code>CustomIdent</code>, and <code>None</code> …\nReturns <code>Some</code> if <code>self</code> is of variant <code>CustomIdent</code>, and <code>None</code> …\nReturns <code>Some</code> if <code>self</code> is of variant <code>CustomMediaPrelude</code>, and …\nReturns <code>Some</code> if <code>self</code> is of variant <code>DashedIdent</code>, and <code>None</code> …\nReturns <code>Some</code> if <code>self</code> is of variant <code>DashedIdent</code>, and <code>None</code> …\nReturns <code>Some</code> if <code>self</code> is of variant <code>DashedIdent</code>, and <code>None</code> …\nReturns <code>Some</code> if <code>self</code> is of variant <code>DashedIdent</code>, and <code>None</code> …\nReturns <code>Some</code> if <code>self</code> is of variant <code>DashedIdent</code>, and <code>None</code> …\nReturns <code>Some</code> if <code>self</code> is of variant <code>Declaration</code>, and <code>None</code> …\nReturns <code>Some</code> if <code>self</code> is of variant <code>Declaration</code>, and <code>None</code> …\nReturns <code>Some</code> if <code>self</code> is of variant <code>Declaration</code>, and <code>None</code> …\nReturns <code>Some</code> if <code>self</code> is of variant <code>Declaration</code>, and <code>None</code> …\nReturns <code>Some</code> if <code>self</code> is of variant <code>Delimiter</code>, and <code>None</code> …\nReturns <code>Some</code> if <code>self</code> is of variant <code>Delimiter</code>, and <code>None</code> …\nReturns <code>Some</code> if <code>self</code> is of variant <code>Dimension</code>, and <code>None</code> …\nReturns <code>Some</code> if <code>self</code> is of variant <code>Dimension</code>, and <code>None</code> …\nReturns <code>Some</code> if <code>self</code> is of variant <code>Dimension</code>, and <code>None</code> …\nReturns <code>Some</code> if <code>self</code> is of variant <code>Dimension</code>, and <code>None</code> …\nReturns <code>Some</code> if <code>self</code> is of variant <code>DocumentPrelude</code>, and …\nUnwraps the value, yielding the content of …\nUnwraps the value, yielding the content of <code>All</code>.\nUnwraps the value, yielding the content of <code>AlphaValue</code>.\nUnwraps the value, yielding the content of <code>AnPlusB</code>.\nUnwraps the value, yielding the content of <code>AnPlusBNotation</code>.\nUnwraps the value, yielding the content of <code>And</code>.\nUnwraps the value, yielding the content of <code>And</code>.\nUnwraps the value, yielding the content of <code>And</code>.\nUnwraps the value, yielding the content of <code>And</code>.\nUnwraps the value, yielding the content of <code>Angle</code>.\nUnwraps the value, yielding the content of <code>Angle</code>.\nUnwraps the value, yielding the content of <code>Angle</code>.\nUnwraps the value, yielding the content of <code>AnglePercentage</code>.\nUnwraps the value, yielding the content of <code>Any</code>.\nUnwraps the value, yielding the content of <code>AtRule</code>.\nUnwraps the value, yielding the content of <code>AtRule</code>.\nUnwraps the value, yielding the content of <code>AtRule</code>.\nUnwraps the value, yielding the content of <code>AtRule</code>.\nUnwraps the value, yielding the content of <code>Attribute</code>.\nUnwraps the value, yielding the content of <code>Boolean</code>.\nUnwraps the value, yielding the content of <code>Boolean</code>.\nUnwraps the value, yielding the content of <code>CalcSum</code>.\nUnwraps the value, yielding the content of <code>CharsetPrelude</code>.\nUnwraps the value, yielding the content of <code>Class</code>.\nUnwraps the value, yielding the content of <code>CmykComponent</code>.\nUnwraps the value, yielding the content of <code>Color</code>.\nUnwraps the value, yielding the content of …\nUnwraps the value, yielding the content of <code>Combinator</code>.\nUnwraps the value, yielding the content of <code>ComplexSelector</code>.\nUnwraps the value, yielding the content of <code>ComplexSelector</code>.\nUnwraps the value, yielding the content of <code>ComplexSelector</code>.\nUnwraps the value, yielding the content of <code>CompoundSelector</code>…\nUnwraps the value, yielding the content of <code>CompoundSelector</code>…\nUnwraps the value, yielding the content of <code>CompoundSelector</code>…\nUnwraps the value, yielding the content of …\nUnwraps the value, yielding the content of <code>Constant</code>.\nUnwraps the value, yielding the content of <code>ContainerPrelude</code>…\nUnwraps the value, yielding the content of <code>ContainerQuery</code>.\nUnwraps the value, yielding the content of …\nUnwraps the value, yielding the content of …\nUnwraps the value, yielding the content of …\nUnwraps the value, yielding the content of <code>CustomIdent</code>.\nUnwraps the value, yielding the content of <code>CustomIdent</code>.\nUnwraps the value, yielding the content of …\nUnwraps the value, yielding the content of <code>DashedIdent</code>.\nUnwraps the value, yielding the content of <code>DashedIdent</code>.\nUnwraps the value, yielding the content of <code>DashedIdent</code>.\nUnwraps the value, yielding the content of <code>DashedIdent</code>.\nUnwraps the value, yielding the content of <code>DashedIdent</code>.\nUnwraps the value, yielding the content of <code>Declaration</code>.\nUnwraps the value, yielding the content of <code>Declaration</code>.\nUnwraps the value, yielding the content of <code>Declaration</code>.\nUnwraps the value, yielding the content of <code>Declaration</code>.\nUnwraps the value, yielding the content of <code>Delimiter</code>.\nUnwraps the value, yielding the content of <code>Delimiter</code>.\nUnwraps the value, yielding the content of <code>Dimension</code>.\nUnwraps the value, yielding the content of <code>Dimension</code>.\nUnwraps the value, yielding the content of <code>Dimension</code>.\nUnwraps the value, yielding the content of <code>Dimension</code>.\nUnwraps the value, yielding the content of <code>DocumentPrelude</code>.\nUnwraps the value, yielding the content of <code>ExtensionName</code>.\nUnwraps the value, yielding the content of <code>Feature</code>.\nUnwraps the value, yielding the content of <code>Feature</code>.\nUnwraps the value, yielding the content of <code>Flex</code>.\nUnwraps the value, yielding the content of …\nUnwraps the value, yielding the content of …\nUnwraps the value, yielding the content of …\nUnwraps the value, yielding the content of …\nUnwraps the value, yielding the content of <code>Frequency</code>.\nUnwraps the value, yielding the content of <code>Frequency</code>.\nUnwraps the value, yielding the content of …\nUnwraps the value, yielding the content of <code>Function</code>.\nUnwraps the value, yielding the content of <code>Function</code>.\nUnwraps the value, yielding the content of <code>Function</code>.\nUnwraps the value, yielding the content of <code>Function</code>.\nUnwraps the value, yielding the content of <code>Function</code>.\nUnwraps the value, yielding the content of <code>Function</code>.\nUnwraps the value, yielding the content of <code>Function</code>.\nUnwraps the value, yielding the content of <code>Function</code>.\nUnwraps the value, yielding the content of <code>Function</code>.\nUnwraps the value, yielding the content of <code>Function</code>.\nUnwraps the value, yielding the content of <code>Function</code>.\nUnwraps the value, yielding the content of <code>Function</code>.\nUnwraps the value, yielding the content of <code>GeneralEnclosed</code>.\nUnwraps the value, yielding the content of <code>GeneralEnclosed</code>.\nUnwraps the value, yielding the content of <code>GeneralEnclosed</code>.\nUnwraps the value, yielding the content of <code>HexColor</code>.\nUnwraps the value, yielding the content of <code>Hue</code>.\nUnwraps the value, yielding the content of <code>Id</code>.\nUnwraps the value, yielding the content of <code>IdSelector</code>.\nUnwraps the value, yielding the content of <code>Ident</code>.\nUnwraps the value, yielding the content of <code>Ident</code>.\nUnwraps the value, yielding the content of <code>Ident</code>.\nUnwraps the value, yielding the content of <code>Ident</code>.\nUnwraps the value, yielding the content of <code>Ident</code>.\nUnwraps the value, yielding the content of <code>Ident</code>.\nUnwraps the value, yielding the content of <code>Ident</code>.\nUnwraps the value, yielding the content of <code>Ident</code>.\nUnwraps the value, yielding the content of <code>Ident</code>.\nUnwraps the value, yielding the content of <code>Ident</code>.\nUnwraps the value, yielding the content of <code>Ident</code>.\nUnwraps the value, yielding the content of <code>Ident</code>.\nUnwraps the value, yielding the content of <code>Ident</code>.\nUnwraps the value, yielding the content of <code>Ident</code>.\nUnwraps the value, yielding the content of <code>Ident</code>.\nUnwraps the value, yielding the content of <code>Ident</code>.\nUnwraps the value, yielding the content of <code>Ident</code>.\nUnwraps the value, yielding the content of <code>Ident</code>.\nUnwraps the value, yielding the content of <code>ImportPrelude</code>.\nUnwraps the value, yielding the content of <code>Integer</code>.\nUnwraps the value, yielding the content of <code>KeyframeBlock</code>.\nUnwraps the value, yielding the content of <code>KeyframesPrelude</code>…\nUnwraps the value, yielding the content of <code>LayerName</code>.\nUnwraps the value, yielding the content of <code>LayerPrelude</code>.\nUnwraps the value, yielding the content of <code>Length</code>.\nUnwraps the value, yielding the content of <code>Length</code>.\nUnwraps the value, yielding the content of <code>LengthPercentage</code>…\nUnwraps the value, yielding the content of …\nUnwraps the value, yielding the content of …\nUnwraps the value, yielding the content of …\nUnwraps the value, yielding the content of …\nUnwraps the value, yielding the content of …\nUnwraps the value, yielding the content of …\nUnwraps the value, yielding the content of …\nUnwraps the value, yielding the content of …\nUnwraps the value, yielding the content of <code>MediaCondition</code>.\nUnwraps the value, yielding the content of <code>MediaInParens</code>.\nUnwraps the value, yielding the content of <code>MediaInParens</code>.\nUnwraps the value, yielding the content of <code>MediaPrelude</code>.\nUnwraps the value, yielding the content of <code>MediaQueryList</code>.\nUnwraps the value, yielding the content of <code>Name</code>.\nUnwraps the value, yielding the content of <code>NameList</code>.\nUnwraps the value, yielding the content of <code>Named</code>.\nUnwraps the value, yielding the content of …\nUnwraps the value, yielding the content of <code>NamespacePrelude</code>…\nUnwraps the value, yielding the content of <code>NestPrelude</code>.\nUnwraps the value, yielding the content of <code>Not</code>.\nUnwraps the value, yielding the content of <code>Not</code>.\nUnwraps the value, yielding the content of <code>Not</code>.\nUnwraps the value, yielding the content of <code>Not</code>.\nUnwraps the value, yielding the content of <code>Number</code>.\nUnwraps the value, yielding the content of <code>Number</code>.\nUnwraps the value, yielding the content of <code>Number</code>.\nUnwraps the value, yielding the content of <code>Number</code>.\nUnwraps the value, yielding the content of <code>Number</code>.\nUnwraps the value, yielding the content of <code>Number</code>.\nUnwraps the value, yielding the content of <code>Number</code>.\nUnwraps the value, yielding the content of <code>Operator</code>.\nUnwraps the value, yielding the content of <code>Operator</code>.\nUnwraps the value, yielding the content of <code>Or</code>.\nUnwraps the value, yielding the content of <code>Or</code>.\nUnwraps the value, yielding the content of <code>Or</code>.\nUnwraps the value, yielding the content of <code>PagePrelude</code>.\nUnwraps the value, yielding the content of <code>Percentage</code>.\nUnwraps the value, yielding the content of <code>Percentage</code>.\nUnwraps the value, yielding the content of <code>Percentage</code>.\nUnwraps the value, yielding the content of <code>Percentage</code>.\nUnwraps the value, yielding the content of <code>Percentage</code>.\nUnwraps the value, yielding the content of <code>Percentage</code>.\nUnwraps the value, yielding the content of <code>Percentage</code>.\nUnwraps the value, yielding the content of <code>Percentage</code>.\nUnwraps the value, yielding the content of <code>Percentage</code>.\nUnwraps the value, yielding the content of <code>Plain</code>.\nUnwraps the value, yielding the content of <code>Plain</code>.\nUnwraps the value, yielding the content of <code>PreservedToken</code>.\nUnwraps the value, yielding the content of <code>PreservedToken</code>.\nUnwraps the value, yielding the content of <code>PreservedToken</code>.\nUnwraps the value, yielding the content of <code>Product</code>.\nUnwraps the value, yielding the content of <code>PropertyPrelude</code>.\nUnwraps the value, yielding the content of <code>PseudoClass</code>.\nUnwraps the value, yielding the content of <code>PseudoElement</code>.\nUnwraps the value, yielding the content of <code>PseudoFunction</code>.\nUnwraps the value, yielding the content of <code>PseudoPrefix</code>.\nUnwraps the value, yielding the content of <code>QualifiedRule</code>.\nUnwraps the value, yielding the content of <code>QualifiedRule</code>.\nUnwraps the value, yielding the content of <code>QualifiedRule</code>.\nUnwraps the value, yielding the content of <code>QueryInParens</code>.\nUnwraps the value, yielding the content of <code>Range</code>.\nUnwraps the value, yielding the content of <code>Range</code>.\nUnwraps the value, yielding the content of <code>RangeInterval</code>.\nUnwraps the value, yielding the content of <code>RangeInterval</code>.\nUnwraps the value, yielding the content of <code>Ratio</code>.\nUnwraps the value, yielding the content of <code>Ratio</code>.\nUnwraps the value, yielding the content of <code>Ratio</code>.\nUnwraps the value, yielding the content of <code>Raw</code>.\nUnwraps the value, yielding the content of <code>RelativeSelector</code>…\nUnwraps the value, yielding the content of …\nUnwraps the value, yielding the content of …\nUnwraps the value, yielding the content of <code>Resolution</code>.\nUnwraps the value, yielding the content of <code>ScopePrelude</code>.\nUnwraps the value, yielding the content of <code>SelectorList</code>.\nUnwraps the value, yielding the content of <code>SelectorList</code>.\nUnwraps the value, yielding the content of …\nUnwraps the value, yielding the content of <code>SimpleBlock</code>.\nUnwraps the value, yielding the content of <code>SimpleBlock</code>.\nUnwraps the value, yielding the content of <code>SizeFeature</code>.\nUnwraps the value, yielding the content of <code>Str</code>.\nUnwraps the value, yielding the content of <code>Str</code>.\nUnwraps the value, yielding the content of <code>Str</code>.\nUnwraps the value, yielding the content of <code>Str</code>.\nUnwraps the value, yielding the content of <code>Str</code>.\nUnwraps the value, yielding the content of <code>Str</code>.\nUnwraps the value, yielding the content of <code>Str</code>.\nUnwraps the value, yielding the content of <code>Str</code>.\nUnwraps the value, yielding the content of <code>Sum</code>.\nUnwraps the value, yielding the content of …\nUnwraps the value, yielding the content of …\nUnwraps the value, yielding the content of <code>SupportsInParens</code>…\nUnwraps the value, yielding the content of <code>SupportsPrelude</code>.\nUnwraps the value, yielding the content of <code>TagName</code>.\nUnwraps the value, yielding the content of <code>Time</code>.\nUnwraps the value, yielding the content of <code>Time</code>.\nUnwraps the value, yielding the content of <code>TimePercentage</code>.\nUnwraps the value, yielding the content of <code>UnicodeRange</code>.\nUnwraps the value, yielding the content of <code>Universal</code>.\nUnwraps the value, yielding the content of <code>UnknownDimension</code>…\nUnwraps the value, yielding the content of <code>Url</code>.\nUnwraps the value, yielding the content of <code>Url</code>.\nUnwraps the value, yielding the content of <code>Url</code>.\nUnwraps the value, yielding the content of <code>Url</code>.\nUnwraps the value, yielding the content of <code>Value</code>.\nUnwraps the value, yielding the content of <code>WithoutOr</code>.\nReturns <code>Some</code> if <code>self</code> is of variant <code>ExtensionName</code>, and <code>None</code> …\nReturns <code>Some</code> if <code>self</code> is of variant <code>Feature</code>, and <code>None</code> …\nReturns <code>Some</code> if <code>self</code> is of variant <code>Feature</code>, and <code>None</code> …\nReturns <code>Some</code> if <code>self</code> is of variant <code>Flex</code>, and <code>None</code> …\nReturns <code>Some</code> if <code>self</code> is of variant <code>FontFeatureValuesPrelude</code>…\nReturns <code>Some</code> if <code>self</code> is of variant <code>FontPaletteValuesPrelude</code>…\nReturns <code>Some</code> if <code>self</code> is of variant …\nReturns <code>Some</code> if <code>self</code> is of variant <code>ForgivingSelectorList</code>, …\nReturns <code>Some</code> if <code>self</code> is of variant <code>Frequency</code>, and <code>None</code> …\nReturns <code>Some</code> if <code>self</code> is of variant <code>Frequency</code>, and <code>None</code> …\nReturns <code>Some</code> if <code>self</code> is of variant <code>FrequencyPercentage</code>, …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns <code>Some</code> if <code>self</code> is of variant <code>Function</code>, and <code>None</code> …\nReturns <code>Some</code> if <code>self</code> is of variant <code>Function</code>, and <code>None</code> …\nReturns <code>Some</code> if <code>self</code> is of variant <code>Function</code>, and <code>None</code> …\nReturns <code>Some</code> if <code>self</code> is of variant <code>Function</code>, and <code>None</code> …\nReturns <code>Some</code> if <code>self</code> is of variant <code>Function</code>, and <code>None</code> …\nReturns <code>Some</code> if <code>self</code> is of variant <code>Function</code>, and <code>None</code> …\nReturns <code>Some</code> if <code>self</code> is of variant <code>Function</code>, and <code>None</code> …\nReturns <code>Some</code> if <code>self</code> is of variant <code>Function</code>, and <code>None</code> …\nReturns <code>Some</code> if <code>self</code> is of variant <code>Function</code>, and <code>None</code> …\nReturns <code>Some</code> if <code>self</code> is of variant <code>Function</code>, and <code>None</code> …\nReturns <code>Some</code> if <code>self</code> is of variant <code>Function</code>, and <code>None</code> …\nReturns <code>Some</code> if <code>self</code> is of variant <code>Function</code>, and <code>None</code> …\nReturns <code>Some</code> if <code>self</code> is of variant <code>GeneralEnclosed</code>, and …\nReturns <code>Some</code> if <code>self</code> is of variant <code>GeneralEnclosed</code>, and …\nReturns <code>Some</code> if <code>self</code> is of variant <code>GeneralEnclosed</code>, and …\nReturns <code>Some</code> if <code>self</code> is of variant <code>HexColor</code>, and <code>None</code> …\nReturns <code>Some</code> if <code>self</code> is of variant <code>Hue</code>, and <code>None</code> otherwise.\nReturns <code>Some</code> if <code>self</code> is of variant <code>Id</code>, and <code>None</code> otherwise.\nReturns <code>Some</code> if <code>self</code> is of variant <code>IdSelector</code>, and <code>None</code> …\nReturns <code>Some</code> if <code>self</code> is of variant <code>Ident</code>, and <code>None</code> …\nReturns <code>Some</code> if <code>self</code> is of variant <code>Ident</code>, and <code>None</code> …\nReturns <code>Some</code> if <code>self</code> is of variant <code>Ident</code>, and <code>None</code> …\nReturns <code>Some</code> if <code>self</code> is of variant <code>Ident</code>, and <code>None</code> …\nReturns <code>Some</code> if <code>self</code> is of variant <code>Ident</code>, and <code>None</code> …\nReturns <code>Some</code> if <code>self</code> is of variant <code>Ident</code>, and <code>None</code> …\nReturns <code>Some</code> if <code>self</code> is of variant <code>Ident</code>, and <code>None</code> …\nReturns <code>Some</code> if <code>self</code> is of variant <code>Ident</code>, and <code>None</code> …\nReturns <code>Some</code> if <code>self</code> is of variant <code>Ident</code>, and <code>None</code> …\nReturns <code>Some</code> if <code>self</code> is of variant <code>Ident</code>, and <code>None</code> …\nReturns <code>Some</code> if <code>self</code> is of variant <code>Ident</code>, and <code>None</code> …\nReturns <code>Some</code> if <code>self</code> is of variant <code>Ident</code>, and <code>None</code> …\nReturns <code>Some</code> if <code>self</code> is of variant <code>Ident</code>, and <code>None</code> …\nReturns <code>Some</code> if <code>self</code> is of variant <code>Ident</code>, and <code>None</code> …\nReturns <code>Some</code> if <code>self</code> is of variant <code>Ident</code>, and <code>None</code> …\nReturns <code>Some</code> if <code>self</code> is of variant <code>Ident</code>, and <code>None</code> …\nReturns <code>Some</code> if <code>self</code> is of variant <code>Ident</code>, and <code>None</code> …\nReturns <code>Some</code> if <code>self</code> is of variant <code>Ident</code>, and <code>None</code> …\nReturns <code>Some</code> if <code>self</code> is of variant <code>ImportPrelude</code>, and <code>None</code> …\nThe span includes <code>!</code>\nReturns <code>Some</code> if <code>self</code> is of variant <code>Integer</code>, and <code>None</code> …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns <code>true</code> if <code>self</code> is of variant <code>AbsoluteColorBase</code>.\nReturns <code>true</code> if <code>self</code> is of variant <code>Add</code>.\nReturns <code>true</code> if <code>self</code> is of variant <code>Add</code>.\nReturns <code>true</code> if <code>self</code> is of variant <code>All</code>.\nReturns <code>true</code> if <code>self</code> is of variant <code>AlphaValue</code>.\nReturns <code>true</code> if <code>self</code> is of variant <code>AnPlusB</code>.\nReturns <code>true</code> if <code>self</code> is of variant <code>AnPlusBNotation</code>.\nReturns <code>true</code> if <code>self</code> is of variant <code>And</code>.\nReturns <code>true</code> if <code>self</code> is of variant <code>And</code>.\nReturns <code>true</code> if <code>self</code> is of variant <code>And</code>.\nReturns <code>true</code> if <code>self</code> is of variant <code>And</code>.\nReturns <code>true</code> if <code>self</code> is of variant <code>Angle</code>.\nReturns <code>true</code> if <code>self</code> is of variant <code>Angle</code>.\nReturns <code>true</code> if <code>self</code> is of variant <code>Angle</code>.\nReturns <code>true</code> if <code>self</code> is of variant <code>AnglePercentage</code>.\nReturns <code>true</code> if <code>self</code> is of variant <code>Any</code>.\nReturns <code>true</code> if <code>self</code> is of variant <code>Asterisk</code>.\nReturns <code>true</code> if <code>self</code> is of variant <code>AtRule</code>.\nReturns <code>true</code> if <code>self</code> is of variant <code>AtRule</code>.\nReturns <code>true</code> if <code>self</code> is of variant <code>AtRule</code>.\nReturns <code>true</code> if <code>self</code> is of variant <code>AtRule</code>.\nReturns <code>true</code> if <code>self</code> is of variant <code>Attribute</code>.\nReturns <code>true</code> if <code>self</code> is of variant <code>Bar</code>.\nReturns <code>true</code> if <code>self</code> is of variant <code>Boolean</code>.\nReturns <code>true</code> if <code>self</code> is of variant <code>Boolean</code>.\nReturns <code>true</code> if <code>self</code> is of variant <code>CalcSum</code>.\nReturns <code>true</code> if <code>self</code> is of variant <code>Caret</code>.\nReturns <code>true</code> if <code>self</code> is of variant <code>CharsetPrelude</code>.\nReturns <code>true</code> if <code>self</code> is of variant <code>Child</code>.\nReturns <code>true</code> if <code>self</code> is of variant <code>Class</code>.\nReturns <code>true</code> if <code>self</code> is of variant <code>CmykComponent</code>.\nReturns <code>true</code> if <code>self</code> is of variant <code>Color</code>.\nReturns <code>true</code> if <code>self</code> is of variant <code>ColorProfilePrelude</code>.\nReturns <code>true</code> if <code>self</code> is of variant <code>Column</code>.\nReturns <code>true</code> if <code>self</code> is of variant <code>Combinator</code>.\nReturns <code>true</code> if <code>self</code> is of variant <code>Comma</code>.\nReturns <code>true</code> if <code>self</code> is of variant <code>ComplexSelector</code>.\nReturns <code>true</code> if <code>self</code> is of variant <code>ComplexSelector</code>.\nReturns <code>true</code> if <code>self</code> is of variant <code>ComplexSelector</code>.\nReturns <code>true</code> if <code>self</code> is of variant <code>CompoundSelector</code>.\nReturns <code>true</code> if <code>self</code> is of variant <code>CompoundSelector</code>.\nReturns <code>true</code> if <code>self</code> is of variant <code>CompoundSelector</code>.\nReturns <code>true</code> if <code>self</code> is of variant <code>CompoundSelectorList</code>.\nReturns <code>true</code> if <code>self</code> is of variant <code>Constant</code>.\nReturns <code>true</code> if <code>self</code> is of variant <code>ContainerPrelude</code>.\nReturns <code>true</code> if <code>self</code> is of variant <code>ContainerQuery</code>.\nReturns <code>true</code> if <code>self</code> is of variant <code>CounterStylePrelude</code>.\nReturns <code>true</code> if <code>self</code> is of variant …\nReturns <code>true</code> if <code>self</code> is of variant <code>CustomHighlightName</code>.\nReturns <code>true</code> if <code>self</code> is of variant <code>CustomIdent</code>.\nReturns <code>true</code> if <code>self</code> is of variant <code>CustomIdent</code>.\nReturns <code>true</code> if <code>self</code> is of variant <code>CustomMediaPrelude</code>.\nReturns <code>true</code> if <code>self</code> is of variant <code>DashedIdent</code>.\nReturns <code>true</code> if <code>self</code> is of variant <code>DashedIdent</code>.\nReturns <code>true</code> if <code>self</code> is of variant <code>DashedIdent</code>.\nReturns <code>true</code> if <code>self</code> is of variant <code>DashedIdent</code>.\nReturns <code>true</code> if <code>self</code> is of variant <code>DashedIdent</code>.\nReturns <code>true</code> if <code>self</code> is of variant <code>Declaration</code>.\nReturns <code>true</code> if <code>self</code> is of variant <code>Declaration</code>.\nReturns <code>true</code> if <code>self</code> is of variant <code>Declaration</code>.\nReturns <code>true</code> if <code>self</code> is of variant <code>Declaration</code>.\nReturns <code>true</code> if <code>self</code> is of variant <code>Delimiter</code>.\nReturns <code>true</code> if <code>self</code> is of variant <code>Delimiter</code>.\nReturns <code>true</code> if <code>self</code> is of variant <code>Descendant</code>.\nReturns <code>true</code> if <code>self</code> is of variant <code>Dimension</code>.\nReturns <code>true</code> if <code>self</code> is of variant <code>Dimension</code>.\nReturns <code>true</code> if <code>self</code> is of variant <code>Dimension</code>.\nReturns <code>true</code> if <code>self</code> is of variant <code>Dimension</code>.\nReturns <code>true</code> if <code>self</code> is of variant <code>Div</code>.\nReturns <code>true</code> if <code>self</code> is of variant <code>Div</code>.\nReturns <code>true</code> if <code>self</code> is of variant <code>DocumentPrelude</code>.\nReturns <code>true</code> if <code>self</code> is of variant <code>Dollar</code>.\nReturns <code>true</code> if <code>self</code> is of variant <code>Eq</code>.\nReturns <code>true</code> if <code>self</code> is of variant <code>Eq</code>.\nReturns <code>true</code> if <code>self</code> is of variant <code>Equals</code>.\nReturns <code>true</code> if <code>self</code> is of variant <code>ExtensionName</code>.\nReturns <code>true</code> if <code>self</code> is of variant <code>Feature</code>.\nReturns <code>true</code> if <code>self</code> is of variant <code>Feature</code>.\nReturns <code>true</code> if <code>self</code> is of variant <code>Flex</code>.\nReturns <code>true</code> if <code>self</code> is of variant <code>FontFeatureValuesPrelude</code>…\nReturns <code>true</code> if <code>self</code> is of variant <code>FontPaletteValuesPrelude</code>…\nReturns <code>true</code> if <code>self</code> is of variant …\nReturns <code>true</code> if <code>self</code> is of variant <code>ForgivingSelectorList</code>.\nReturns <code>true</code> if <code>self</code> is of variant <code>Frequency</code>.\nReturns <code>true</code> if <code>self</code> is of variant <code>Frequency</code>.\nReturns <code>true</code> if <code>self</code> is of variant <code>FrequencyPercentage</code>.\nReturns <code>true</code> if <code>self</code> is of variant <code>Function</code>.\nReturns <code>true</code> if <code>self</code> is of variant <code>Function</code>.\nReturns <code>true</code> if <code>self</code> is of variant <code>Function</code>.\nReturns <code>true</code> if <code>self</code> is of variant <code>Function</code>.\nReturns <code>true</code> if <code>self</code> is of variant <code>Function</code>.\nReturns <code>true</code> if <code>self</code> is of variant <code>Function</code>.\nReturns <code>true</code> if <code>self</code> is of variant <code>Function</code>.\nReturns <code>true</code> if <code>self</code> is of variant <code>Function</code>.\nReturns <code>true</code> if <code>self</code> is of variant <code>Function</code>.\nReturns <code>true</code> if <code>self</code> is of variant <code>Function</code>.\nReturns <code>true</code> if <code>self</code> is of variant <code>Function</code>.\nReturns <code>true</code> if <code>self</code> is of variant <code>Function</code>.\nReturns <code>true</code> if <code>self</code> is of variant <code>Ge</code>.\nReturns <code>true</code> if <code>self</code> is of variant <code>Ge</code>.\nReturns <code>true</code> if <code>self</code> is of variant <code>GeneralEnclosed</code>.\nReturns <code>true</code> if <code>self</code> is of variant <code>GeneralEnclosed</code>.\nReturns <code>true</code> if <code>self</code> is of variant <code>GeneralEnclosed</code>.\nReturns <code>true</code> if <code>self</code> is of variant <code>Gt</code>.\nReturns <code>true</code> if <code>self</code> is of variant <code>Gt</code>.\nReturns <code>true</code> if <code>self</code> is of variant <code>HexColor</code>.\nReturns <code>true</code> if <code>self</code> is of variant <code>Hue</code>.\nReturns <code>true</code> if <code>self</code> is of variant <code>Id</code>.\nReturns <code>true</code> if <code>self</code> is of variant <code>IdSelector</code>.\nReturns <code>true</code> if <code>self</code> is of variant <code>Ident</code>.\nReturns <code>true</code> if <code>self</code> is of variant <code>Ident</code>.\nReturns <code>true</code> if <code>self</code> is of variant <code>Ident</code>.\nReturns <code>true</code> if <code>self</code> is of variant <code>Ident</code>.\nReturns <code>true</code> if <code>self</code> is of variant <code>Ident</code>.\nReturns <code>true</code> if <code>self</code> is of variant <code>Ident</code>.\nReturns <code>true</code> if <code>self</code> is of variant <code>Ident</code>.\nReturns <code>true</code> if <code>self</code> is of variant <code>Ident</code>.\nReturns <code>true</code> if <code>self</code> is of variant <code>Ident</code>.\nReturns <code>true</code> if <code>self</code> is of variant <code>Ident</code>.\nReturns <code>true</code> if <code>self</code> is of variant <code>Ident</code>.\nReturns <code>true</code> if <code>self</code> is of variant <code>Ident</code>.\nReturns <code>true</code> if <code>self</code> is of variant <code>Ident</code>.\nReturns <code>true</code> if <code>self</code> is of variant <code>Ident</code>.\nReturns <code>true</code> if <code>self</code> is of variant <code>Ident</code>.\nReturns <code>true</code> if <code>self</code> is of variant <code>Ident</code>.\nReturns <code>true</code> if <code>self</code> is of variant <code>Ident</code>.\nReturns <code>true</code> if <code>self</code> is of variant <code>Ident</code>.\nReturns <code>true</code> if <code>self</code> is of variant <code>ImportPrelude</code>.\nReturns <code>true</code> if <code>self</code> is of variant <code>Integer</code>.\nReturns <code>true</code> if <code>self</code> is of variant <code>Integer</code>.\nReturns <code>true</code> if <code>self</code> is of variant <code>KeyframeBlock</code>.\nReturns <code>true</code> if <code>self</code> is of variant <code>KeyframesPrelude</code>.\nReturns <code>true</code> if <code>self</code> is of variant <code>LaterSibling</code>.\nReturns <code>true</code> if <code>self</code> is of variant <code>LayerName</code>.\nReturns <code>true</code> if <code>self</code> is of variant <code>LayerPrelude</code>.\nReturns <code>true</code> if <code>self</code> is of variant <code>Le</code>.\nReturns <code>true</code> if <code>self</code> is of variant <code>Le</code>.\nReturns <code>true</code> if <code>self</code> is of variant <code>Length</code>.\nReturns <code>true</code> if <code>self</code> is of variant <code>Length</code>.\nReturns <code>true</code> if <code>self</code> is of variant <code>LengthPercentage</code>.\nReturns <code>true</code> if <code>self</code> is of variant <code>ListOfComponentValues</code>.\nReturns <code>true</code> if <code>self</code> is of variant <code>ListOfComponentValues</code>.\nReturns <code>true</code> if <code>self</code> is of variant <code>ListOfComponentValues</code>.\nReturns <code>true</code> if <code>self</code> is of variant <code>ListOfComponentValues</code>.\nReturns <code>true</code> if <code>self</code> is of variant <code>ListOfComponentValues</code>.\nReturns <code>true</code> if <code>self</code> is of variant <code>ListOfComponentValues</code>.\nReturns <code>true</code> if <code>self</code> is of variant <code>ListOfComponentValues</code>.\nReturns <code>true</code> if <code>self</code> is of variant <code>ListOfComponentValues</code>.\nReturns <code>true</code> if <code>self</code> is of variant <code>Lt</code>.\nReturns <code>true</code> if <code>self</code> is of variant <code>Lt</code>.\nReturns <code>true</code> if <code>self</code> is of variant <code>MediaCondition</code>.\nReturns <code>true</code> if <code>self</code> is of variant <code>MediaInParens</code>.\nReturns <code>true</code> if <code>self</code> is of variant <code>MediaInParens</code>.\nReturns <code>true</code> if <code>self</code> is of variant <code>MediaPrelude</code>.\nReturns <code>true</code> if <code>self</code> is of variant <code>MediaQueryList</code>.\nReturns <code>true</code> if <code>self</code> is of variant <code>Mul</code>.\nReturns <code>true</code> if <code>self</code> is of variant <code>Mul</code>.\nReturns <code>true</code> if <code>self</code> is of variant <code>Name</code>.\nReturns <code>true</code> if <code>self</code> is of variant <code>NameList</code>.\nReturns <code>true</code> if <code>self</code> is of variant <code>Named</code>.\nReturns <code>true</code> if <code>self</code> is of variant <code>NamedColorOrTransparent</code>.\nReturns <code>true</code> if <code>self</code> is of variant <code>NamespacePrelude</code>.\nReturns <code>true</code> if <code>self</code> is of variant <code>NestPrelude</code>.\nReturns <code>true</code> if <code>self</code> is of variant <code>NextSibling</code>.\nReturns <code>true</code> if <code>self</code> is of variant <code>Not</code>.\nReturns <code>true</code> if <code>self</code> is of variant <code>Not</code>.\nReturns <code>true</code> if <code>self</code> is of variant <code>Not</code>.\nReturns <code>true</code> if <code>self</code> is of variant <code>Not</code>.\nReturns <code>true</code> if <code>self</code> is of variant <code>Number</code>.\nReturns <code>true</code> if <code>self</code> is of variant <code>Number</code>.\nReturns <code>true</code> if <code>self</code> is of variant <code>Number</code>.\nReturns <code>true</code> if <code>self</code> is of variant <code>Number</code>.\nReturns <code>true</code> if <code>self</code> is of variant <code>Number</code>.\nReturns <code>true</code> if <code>self</code> is of variant <code>Number</code>.\nReturns <code>true</code> if <code>self</code> is of variant <code>Number</code>.\nReturns <code>true</code> if <code>self</code> is of variant <code>Number</code>.\nReturns <code>true</code> if <code>self</code> is of variant <code>Operator</code>.\nReturns <code>true</code> if <code>self</code> is of variant <code>Operator</code>.\nReturns <code>true</code> if <code>self</code> is of variant <code>Or</code>.\nReturns <code>true</code> if <code>self</code> is of variant <code>Or</code>.\nReturns <code>true</code> if <code>self</code> is of variant <code>Or</code>.\nReturns <code>true</code> if <code>self</code> is of variant <code>PagePrelude</code>.\nReturns <code>true</code> if <code>self</code> is of variant <code>Percentage</code>.\nReturns <code>true</code> if <code>self</code> is of variant <code>Percentage</code>.\nReturns <code>true</code> if <code>self</code> is of variant <code>Percentage</code>.\nReturns <code>true</code> if <code>self</code> is of variant <code>Percentage</code>.\nReturns <code>true</code> if <code>self</code> is of variant <code>Percentage</code>.\nReturns <code>true</code> if <code>self</code> is of variant <code>Percentage</code>.\nReturns <code>true</code> if <code>self</code> is of variant <code>Percentage</code>.\nReturns <code>true</code> if <code>self</code> is of variant <code>Percentage</code>.\nReturns <code>true</code> if <code>self</code> is of variant <code>Percentage</code>.\nReturns <code>true</code> if <code>self</code> is of variant <code>Plain</code>.\nReturns <code>true</code> if <code>self</code> is of variant <code>Plain</code>.\nReturns <code>true</code> if <code>self</code> is of variant <code>PreservedToken</code>.\nReturns <code>true</code> if <code>self</code> is of variant <code>PreservedToken</code>.\nReturns <code>true</code> if <code>self</code> is of variant <code>PreservedToken</code>.\nReturns <code>true</code> if <code>self</code> is of variant <code>Product</code>.\nReturns <code>true</code> if <code>self</code> is of variant <code>PropertyPrelude</code>.\nReturns <code>true</code> if <code>self</code> is of variant <code>PseudoClass</code>.\nReturns <code>true</code> if <code>self</code> is of variant <code>PseudoElement</code>.\nReturns <code>true</code> if <code>self</code> is of variant <code>PseudoFunction</code>.\nReturns <code>true</code> if <code>self</code> is of variant <code>PseudoPrefix</code>.\nReturns <code>true</code> if <code>self</code> is of variant <code>QualifiedRule</code>.\nReturns <code>true</code> if <code>self</code> is of variant <code>QualifiedRule</code>.\nReturns <code>true</code> if <code>self</code> is of variant <code>QualifiedRule</code>.\nReturns <code>true</code> if <code>self</code> is of variant <code>QueryInParens</code>.\nReturns <code>true</code> if <code>self</code> is of variant <code>Range</code>.\nReturns <code>true</code> if <code>self</code> is of variant <code>Range</code>.\nReturns <code>true</code> if <code>self</code> is of variant <code>RangeInterval</code>.\nReturns <code>true</code> if <code>self</code> is of variant <code>RangeInterval</code>.\nReturns <code>true</code> if <code>self</code> is of variant <code>Ratio</code>.\nReturns <code>true</code> if <code>self</code> is of variant <code>Ratio</code>.\nReturns <code>true</code> if <code>self</code> is of variant <code>Ratio</code>.\nReturns <code>true</code> if <code>self</code> is of variant <code>Raw</code>.\nReturns <code>true</code> if <code>self</code> is of variant <code>RelativeSelector</code>.\nReturns <code>true</code> if <code>self</code> is of variant <code>RelativeSelectorList</code>.\nReturns <code>true</code> if <code>self</code> is of variant <code>RelativeSelectorList</code>.\nReturns <code>true</code> if <code>self</code> is of variant <code>Resolution</code>.\nReturns <code>true</code> if <code>self</code> is of variant <code>ScopePrelude</code>.\nReturns <code>true</code> if <code>self</code> is of variant <code>SelectorList</code>.\nReturns <code>true</code> if <code>self</code> is of variant <code>SelectorList</code>.\nReturns <code>true</code> if <code>self</code> is of variant <code>Semicolon</code>.\nReturns <code>true</code> if <code>self</code> is of variant <code>SequenceOfCustomIdents</code>.\nReturns <code>true</code> if <code>self</code> is of variant <code>SimpleBlock</code>.\nReturns <code>true</code> if <code>self</code> is of variant <code>SimpleBlock</code>.\nReturns <code>true</code> if <code>self</code> is of variant <code>SizeFeature</code>.\nReturns <code>true</code> if <code>self</code> is of variant <code>Solidus</code>.\nReturns <code>true</code> if <code>self</code> is of variant <code>Str</code>.\nReturns <code>true</code> if <code>self</code> is of variant <code>Str</code>.\nReturns <code>true</code> if <code>self</code> is of variant <code>Str</code>.\nReturns <code>true</code> if <code>self</code> is of variant <code>Str</code>.\nReturns <code>true</code> if <code>self</code> is of variant <code>Str</code>.\nReturns <code>true</code> if <code>self</code> is of variant <code>Str</code>.\nReturns <code>true</code> if <code>self</code> is of variant <code>Str</code>.\nReturns <code>true</code> if <code>self</code> is of variant <code>Str</code>.\nReturns <code>true</code> if <code>self</code> is of variant <code>Sub</code>.\nReturns <code>true</code> if <code>self</code> is of variant <code>Sub</code>.\nReturns <code>true</code> if <code>self</code> is of variant <code>Sum</code>.\nReturns <code>true</code> if <code>self</code> is of variant <code>SupportsCondition</code>.\nReturns <code>true</code> if <code>self</code> is of variant <code>SupportsCondition</code>.\nReturns <code>true</code> if <code>self</code> is of variant <code>SupportsInParens</code>.\nReturns <code>true</code> if <code>self</code> is of variant <code>SupportsPrelude</code>.\nReturns <code>true</code> if <code>self</code> is of variant <code>TagName</code>.\nReturns <code>true</code> if <code>self</code> is of variant <code>Tilde</code>.\nReturns <code>true</code> if <code>self</code> is of variant <code>Time</code>.\nReturns <code>true</code> if <code>self</code> is of variant <code>Time</code>.\nReturns <code>true</code> if <code>self</code> is of variant <code>TimePercentage</code>.\nReturns <code>true</code> if <code>self</code> is of variant <code>UnicodeRange</code>.\nReturns <code>true</code> if <code>self</code> is of variant <code>Universal</code>.\nReturns <code>true</code> if <code>self</code> is of variant <code>UnknownDimension</code>.\nReturns <code>true</code> if <code>self</code> is of variant <code>Url</code>.\nReturns <code>true</code> if <code>self</code> is of variant <code>Url</code>.\nReturns <code>true</code> if <code>self</code> is of variant <code>Url</code>.\nReturns <code>true</code> if <code>self</code> is of variant <code>Url</code>.\nReturns <code>true</code> if <code>self</code> is of variant <code>Value</code>.\nReturns <code>true</code> if <code>self</code> is of variant <code>WithoutOr</code>.\nReturns <code>Some</code> if <code>self</code> is of variant <code>KeyframeBlock</code>, and <code>None</code> …\nReturns <code>Some</code> if <code>self</code> is of variant <code>KeyframesPrelude</code>, and …\nReturns <code>Some</code> if <code>self</code> is of variant <code>LayerName</code>, and <code>None</code> …\nReturns <code>Some</code> if <code>self</code> is of variant <code>LayerPrelude</code>, and <code>None</code> …\nReturns <code>Some</code> if <code>self</code> is of variant <code>Length</code>, and <code>None</code> …\nReturns <code>Some</code> if <code>self</code> is of variant <code>Length</code>, and <code>None</code> …\nReturns <code>Some</code> if <code>self</code> is of variant <code>LengthPercentage</code>, and …\nReturns <code>Some</code> if <code>self</code> is of variant <code>ListOfComponentValues</code>, …\nReturns <code>Some</code> if <code>self</code> is of variant <code>ListOfComponentValues</code>, …\nReturns <code>Some</code> if <code>self</code> is of variant <code>ListOfComponentValues</code>, …\nReturns <code>Some</code> if <code>self</code> is of variant <code>ListOfComponentValues</code>, …\nReturns <code>Some</code> if <code>self</code> is of variant <code>ListOfComponentValues</code>, …\nReturns <code>Some</code> if <code>self</code> is of variant <code>ListOfComponentValues</code>, …\nReturns <code>Some</code> if <code>self</code> is of variant <code>ListOfComponentValues</code>, …\nReturns <code>Some</code> if <code>self</code> is of variant <code>ListOfComponentValues</code>, …\nReturns true if the given value matches one of the given …\nReturns true if the given value matches one of the given …\nReturns <code>Some</code> if <code>self</code> is of variant <code>MediaCondition</code>, and <code>None</code>…\nReturns <code>Some</code> if <code>self</code> is of variant <code>MediaInParens</code>, and <code>None</code> …\nReturns <code>Some</code> if <code>self</code> is of variant <code>MediaInParens</code>, and <code>None</code> …\nReturns <code>Some</code> if <code>self</code> is of variant <code>MediaPrelude</code>, and <code>None</code> …\nReturns <code>Some</code> if <code>self</code> is of variant <code>MediaQueryList</code>, and <code>None</code>…\nReturns <code>Some</code> if <code>self</code> is of variant <code>Name</code>, and <code>None</code> …\nReturns <code>Some</code> if <code>self</code> is of variant <code>NameList</code>, and <code>None</code> …\nReturns <code>Some</code> if <code>self</code> is of variant <code>Named</code>, and <code>None</code> …\nReturns <code>Some</code> if <code>self</code> is of variant <code>NamedColorOrTransparent</code>…\nReturns <code>Some</code> if <code>self</code> is of variant <code>NamespacePrelude</code>, and …\nReturns <code>Some</code> if <code>self</code> is of variant <code>NestPrelude</code>, and <code>None</code> …\n“&amp;”\nReturns <code>Some</code> if <code>self</code> is of variant <code>Not</code>, and <code>None</code> otherwise.\nReturns <code>Some</code> if <code>self</code> is of variant <code>Not</code>, and <code>None</code> otherwise.\nReturns <code>Some</code> if <code>self</code> is of variant <code>Not</code>, and <code>None</code> otherwise.\nReturns <code>Some</code> if <code>self</code> is of variant <code>Not</code>, and <code>None</code> otherwise.\nReturns <code>Some</code> if <code>self</code> is of variant <code>Number</code>, and <code>None</code> …\nReturns <code>Some</code> if <code>self</code> is of variant <code>Number</code>, and <code>None</code> …\nReturns <code>Some</code> if <code>self</code> is of variant <code>Number</code>, and <code>None</code> …\nReturns <code>Some</code> if <code>self</code> is of variant <code>Number</code>, and <code>None</code> …\nReturns <code>Some</code> if <code>self</code> is of variant <code>Number</code>, and <code>None</code> …\nReturns <code>Some</code> if <code>self</code> is of variant <code>Number</code>, and <code>None</code> …\nReturns <code>Some</code> if <code>self</code> is of variant <code>Number</code>, and <code>None</code> …\nReturns <code>Some</code> if <code>self</code> is of variant <code>Operator</code>, and <code>None</code> …\nReturns <code>Some</code> if <code>self</code> is of variant <code>Operator</code>, and <code>None</code> …\nReturns <code>Some</code> if <code>self</code> is of variant <code>Or</code>, and <code>None</code> otherwise.\nReturns <code>Some</code> if <code>self</code> is of variant <code>Or</code>, and <code>None</code> otherwise.\nReturns <code>Some</code> if <code>self</code> is of variant <code>Or</code>, and <code>None</code> otherwise.\nReturns <code>Some</code> if <code>self</code> is of variant <code>PagePrelude</code>, and <code>None</code> …\nReturns <code>Some</code> if <code>self</code> is of variant <code>Percentage</code>, and <code>None</code> …\nReturns <code>Some</code> if <code>self</code> is of variant <code>Percentage</code>, and <code>None</code> …\nReturns <code>Some</code> if <code>self</code> is of variant <code>Percentage</code>, and <code>None</code> …\nReturns <code>Some</code> if <code>self</code> is of variant <code>Percentage</code>, and <code>None</code> …\nReturns <code>Some</code> if <code>self</code> is of variant <code>Percentage</code>, and <code>None</code> …\nReturns <code>Some</code> if <code>self</code> is of variant <code>Percentage</code>, and <code>None</code> …\nReturns <code>Some</code> if <code>self</code> is of variant <code>Percentage</code>, and <code>None</code> …\nReturns <code>Some</code> if <code>self</code> is of variant <code>Percentage</code>, and <code>None</code> …\nReturns <code>Some</code> if <code>self</code> is of variant <code>Percentage</code>, and <code>None</code> …\nReturns <code>Some</code> if <code>self</code> is of variant <code>Plain</code>, and <code>None</code> …\nReturns <code>Some</code> if <code>self</code> is of variant <code>Plain</code>, and <code>None</code> …\nReturns <code>Some</code> if <code>self</code> is of variant <code>PreservedToken</code>, and <code>None</code>…\nReturns <code>Some</code> if <code>self</code> is of variant <code>PreservedToken</code>, and <code>None</code>…\nReturns <code>Some</code> if <code>self</code> is of variant <code>PreservedToken</code>, and <code>None</code>…\nReturns <code>Some</code> if <code>self</code> is of variant <code>Product</code>, and <code>None</code> …\nReturns <code>Some</code> if <code>self</code> is of variant <code>PropertyPrelude</code>, and …\nReturns <code>Some</code> if <code>self</code> is of variant <code>PseudoClass</code>, and <code>None</code> …\nReturns <code>Some</code> if <code>self</code> is of variant <code>PseudoElement</code>, and <code>None</code> …\nReturns <code>Some</code> if <code>self</code> is of variant <code>PseudoFunction</code>, and <code>None</code>…\nReturns <code>Some</code> if <code>self</code> is of variant <code>PseudoPrefix</code>, and <code>None</code> …\nReturns <code>Some</code> if <code>self</code> is of variant <code>QualifiedRule</code>, and <code>None</code> …\nReturns <code>Some</code> if <code>self</code> is of variant <code>QualifiedRule</code>, and <code>None</code> …\nReturns <code>Some</code> if <code>self</code> is of variant <code>QualifiedRule</code>, and <code>None</code> …\nReturns <code>Some</code> if <code>self</code> is of variant <code>QueryInParens</code>, and <code>None</code> …\nReturns <code>Some</code> if <code>self</code> is of variant <code>Range</code>, and <code>None</code> …\nReturns <code>Some</code> if <code>self</code> is of variant <code>Range</code>, and <code>None</code> …\nReturns <code>Some</code> if <code>self</code> is of variant <code>RangeInterval</code>, and <code>None</code> …\nReturns <code>Some</code> if <code>self</code> is of variant <code>RangeInterval</code>, and <code>None</code> …\nReturns <code>Some</code> if <code>self</code> is of variant <code>Ratio</code>, and <code>None</code> …\nReturns <code>Some</code> if <code>self</code> is of variant <code>Ratio</code>, and <code>None</code> …\nReturns <code>Some</code> if <code>self</code> is of variant <code>Ratio</code>, and <code>None</code> …\nReturns <code>Some</code> if <code>self</code> is of variant <code>Raw</code>, and <code>None</code> otherwise.\nDoes <strong>not</strong> include <code>#</code>\nReturns <code>Some</code> if <code>self</code> is of variant <code>RelativeSelector</code>, and …\nReturns <code>Some</code> if <code>self</code> is of variant <code>RelativeSelectorList</code>, …\nReturns <code>Some</code> if <code>self</code> is of variant <code>RelativeSelectorList</code>, …\nReturns <code>Some</code> if <code>self</code> is of variant <code>Resolution</code>, and <code>None</code> …\nhttps://drafts.csswg.org/css-cascade-6/#typedef-scope-end\nReturns <code>Some</code> if <code>self</code> is of variant <code>ScopePrelude</code>, and <code>None</code> …\nhttps://drafts.csswg.org/css-cascade-6/#typedef-scope-start\nReturns <code>Some</code> if <code>self</code> is of variant <code>SelectorList</code>, and <code>None</code> …\nReturns <code>Some</code> if <code>self</code> is of variant <code>SelectorList</code>, and <code>None</code> …\nReturns <code>Some</code> if <code>self</code> is of variant <code>SequenceOfCustomIdents</code>, …\nReturns <code>Some</code> if <code>self</code> is of variant <code>SimpleBlock</code>, and <code>None</code> …\nReturns <code>Some</code> if <code>self</code> is of variant <code>SimpleBlock</code>, and <code>None</code> …\nReturns <code>Some</code> if <code>self</code> is of variant <code>SizeFeature</code>, and <code>None</code> …\nSpan starting from the <code>lo</code> of identifier and to the end of <code>)</code>…\nIncludes <code>#</code>\nReturns <code>Some</code> if <code>self</code> is of variant <code>Str</code>, and <code>None</code> otherwise.\nReturns <code>Some</code> if <code>self</code> is of variant <code>Str</code>, and <code>None</code> otherwise.\nReturns <code>Some</code> if <code>self</code> is of variant <code>Str</code>, and <code>None</code> otherwise.\nReturns <code>Some</code> if <code>self</code> is of variant <code>Str</code>, and <code>None</code> otherwise.\nReturns <code>Some</code> if <code>self</code> is of variant <code>Str</code>, and <code>None</code> otherwise.\nReturns <code>Some</code> if <code>self</code> is of variant <code>Str</code>, and <code>None</code> otherwise.\nReturns <code>Some</code> if <code>self</code> is of variant <code>Str</code>, and <code>None</code> otherwise.\nReturns <code>Some</code> if <code>self</code> is of variant <code>Str</code>, and <code>None</code> otherwise.\nReturns <code>Some</code> if <code>self</code> is of variant <code>Sum</code>, and <code>None</code> otherwise.\nReturns <code>Some</code> if <code>self</code> is of variant <code>SupportsCondition</code>, and …\nReturns <code>Some</code> if <code>self</code> is of variant <code>SupportsCondition</code>, and …\nReturns <code>Some</code> if <code>self</code> is of variant <code>SupportsInParens</code>, and …\nReturns <code>Some</code> if <code>self</code> is of variant <code>SupportsPrelude</code>, and …\nReturns <code>Some</code> if <code>self</code> is of variant <code>TagName</code>, and <code>None</code> …\nDoes not include <code>#</code>\nDoes not include <code>.</code>\nReturns <code>Some</code> if <code>self</code> is of variant <code>Time</code>, and <code>None</code> …\nReturns <code>Some</code> if <code>self</code> is of variant <code>Time</code>, and <code>None</code> …\nReturns <code>Some</code> if <code>self</code> is of variant <code>TimePercentage</code>, and <code>None</code>…\nReturns <code>Some</code> if <code>self</code> is of variant <code>UnicodeRange</code>, and <code>None</code> …\nReturns <code>Some</code> if <code>self</code> is of variant <code>Universal</code>, and <code>None</code> …\nReturns <code>Some</code> if <code>self</code> is of variant <code>UnknownDimension</code>, and …\nReturns <code>Some</code> if <code>self</code> is of variant <code>Url</code>, and <code>None</code> otherwise.\nReturns <code>Some</code> if <code>self</code> is of variant <code>Url</code>, and <code>None</code> otherwise.\nReturns <code>Some</code> if <code>self</code> is of variant <code>Url</code>, and <code>None</code> otherwise.\nReturns <code>Some</code> if <code>self</code> is of variant <code>Url</code>, and <code>None</code> otherwise.\nReturns <code>Some</code> if <code>self</code> is of variant <code>Value</code>, and <code>None</code> …\nDoes <strong>not</strong> include <code>#</code>\nReturns <code>Some</code> if <code>self</code> is of variant <code>WithoutOr</code>, and <code>None</code> …\nName and value")