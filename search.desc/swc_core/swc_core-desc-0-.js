searchState.loadedDescShard("swc_core", 0, "Supported output types\nCreates a <code>Box&lt;Expr&gt;</code> from the source code.\nYou can create this type like <code>true.into()</code> or <code>false.into()</code>.\nAll methods accept Handler, which is a storage for errors.\nBuilder is used to create a high performance <code>Compiler</code>.\nMulti-threaded implementation of Comments\nCodeMap\nColorConfig::Auto is the default, and it will print colors …\nArguments\nNote: fixer is enabled by default.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nNote: hygiene is enabled by default.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns the value specified by the user or the default …\nCreates a new <code>BoolConfig</code> with the given value.\nThis method parses a javascript / typescript file\nThis method returns None if a file should be skipped.\nConverts ast node to source string and sourcemap.\nYou can use custom pass with this method.\n<code>custom_after_pass</code> is applied after swc transforms are …\nRuns <code>op</code> in current compiler’s context.\nDefaults to <code>false</code>.\nTry operation with a Handler and prints the errors as a …\nClone-on-write string.\nA fast internally mutable cell for AtomStore.\nClone-on-write string.\nThis should be used as a key for hash maps and hash sets.\nCreates an Atom from a constant.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCreates an Atom from a constant.\nCreates an Atom from a constant.\nCreates a new Atom from a string.\nAn immutable string which is cheap to clone, compare, …\nA store that stores Atoms. Can be merged with other …\nCreate an atom from a string literal. This atom is never …\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nLike <code>to_ascii_lowercase</code>.\nLike <code>to_ascii_uppercase</code>.\nThread-safe, non-blocking, “first one wins” flavor of …\nThread-safe, blocking version of <code>OnceCell</code>.\nSingle-threaded version of <code>OnceCell</code>.\nA thread-safe cell which can be written to only once.\nA thread-safe cell which can be written to only once.\nA thread-safe cell which can be written to only once.\nA thread-safe cell which can be written to only once.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGets a reference to the underlying value.\nGets a reference to the underlying value.\nGets the underlying value.\nGets the underlying value.\nGets the contents of the cell, initializing it with <code>f</code> if …\nGets the contents of the cell, initializing it with <code>f</code> if …\nGets the contents of the cell, initializing it with <code>f</code> if …\nGets the contents of the cell, initializing it with <code>f</code> if …\nGets the contents of the cell, initializing it with <code>f</code> if …\nGets the contents of the cell, initializing it with <code>f</code> if …\nGets the contents of the cell, initializing it with <code>f</code> if …\nGets the contents of the cell, initializing it with <code>f</code> if …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCreates a new empty cell.\nCreates a new empty cell.\nCreates a new empty cell.\nCreates a new empty cell.\nSets the contents of this cell to <code>value</code>.\nSets the contents of this cell to <code>value</code>.\nSets the contents of this cell to <code>value</code>.\nSets the contents of this cell to <code>value</code>.\nA value which is initialized on the first access.\nA thread-safe cell which can be written to only once.\nA value which is initialized on the first access.\nA cell which can be written to only once. It is not thread …\nCreates a new lazy value using <code>Default</code> as the initializing …\nForces the evaluation of this lazy value and returns a …\nForces the evaluation of this lazy value and returns a …\nReturns the argument unchanged.\nReturns the argument unchanged.\nGets a reference to the underlying value.\nGets the reference to the result of this lazy value if it …\nGets a mutable reference to the underlying value.\nGets the mutable reference to the result of this lazy …\nGets the contents of the cell, initializing it with <code>f</code> if …\nGets the contents of the cell, initializing it with <code>f</code> if …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nConsumes the <code>OnceCell</code>, returning the wrapped value.\nConsumes this <code>Lazy</code> returning the stored value.\nCreates a new empty cell.\nCreates a new lazy value with the given initializing …\nSets the contents of this cell to <code>value</code>.\nTakes the value out of this <code>OnceCell</code>, moving it back to an …\nLike <code>set</code>, but also returns a reference to the final cell …\nCreates a new initialized cell.\nOne <code>BuiltConfig</code> per a directory with swcrc\nA single object in the <code>.swcrc</code> file\n<code>jsc.minify.format</code>.\nSecond argument of <code>minify</code>.\nParser options for <code>minify()</code>, which should have the same …\n<code>jsc</code> in  <code>.swcrc</code>.\n<code>jsc.experimental</code> in <code>.swcrc</code>\n<code>paths</code> section of <code>tsconfig.json</code>.\nA tuple represents a plugin. First element is a resolvable …\n<code>.swcrc</code> file\nConfiguration related to source map generated by swc.\n<code>sourceMap</code> of <code>minify()</code>.`\nAdjust config for <code>file</code>.\nNot implemented yet.\nNot supported.\nNot implemented yet.\nNot implemented yet.\n<code>parse</code>: <code>(syntax, target, is_module)</code>\nLocation where swc may stores its intermediate cache. …\nNot implemented yet.\nEmit TypeScript definitions for <code>.ts</code>, <code>.tsx</code> files.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nIgnored, and always parsed.\nNot implemented yet.\nNot implemented yet.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nThis method returns <code>Ok(None)</code> if the file should be ignored.\nIf true, keeps import assertions in the output.\nNot implemented yet.\nNot implemented yet.\nNot implemented yet.\nMinification for <strong>codegen</strong>. Minifier transforms will be …\nThis requires cargo feature <code>plugin</code>.\nNot implemented yet.\nNot implemented yet.\nNot implemented yet.\nNot implemented yet.\nNot implemented yet.\nNot implemented yet.\nIgnored, and always parsed.\nNot implemented yet.\nPossible values are: <code>&#39;inline&#39;</code>, <code>true</code>, <code>false</code>.\nNot supported.\n…\n…\nNot implemented yet.\nNot implemented yet.\nNot implemented yet.\na JSON parsing related failure\na reference to a non existing name was encountered\na mapping segment had an unsupported size\na reference to a non existing source was encountered\nFlatten failed\nRepresents the result of a decode operation\nContains the error value\nRepresents different failure cases\nIndicates a sourcemap as generated by Metro+Hermes, as …\nIndicates that an incompatible sourcemap format was …\nIndicates a sourcemap index\nIterates over all index items in a sourcemap\nIndicates an invalid data URL\nA RAM bundle entry was invalid\nThe RAM bundle index was malformed\nThe magic of a RAM bundle did not match\nRange mapping index is invalid\na std::io error\nA legacy URL reference\nIterates over all tokens in a sourcemap\nTried to operate on a non RAM bundle file\nContains the success value\nRepresents a raw token\nA regular URL reference\nIndicates a regular sourcemap\nRepresents results from this library\nControls the <code>SourceMap::rewrite</code> behavior\nIterates over all source contents in a sourcemap\nIterates over all sources in a sourcemap\nRepresents a sourcemap in memory\nHelper for sourcemap generation\nRepresents a <code>react-native</code>-style SourceMap, which has …\nRepresents a sourcemap index in memory\nRepresents a reference to a sourcemap\nRepresents a section in a sourcemap index\nIterates over all sections in a sourcemap index\nProvides efficient access to minified sources.\nRepresents a token from a sourcemap\nIterates over all tokens in a sourcemap\na std::str::Utf8Error\na VLQ string was malformed and data was left over\na VLQ string was empty and no values could be decoded.\nOverflow in Vlq handling\nAdds a new mapping to the builder.\nRegisters a name with the builder and returns the name ID.\nAdds a new mapping to the builder.\nRegisters a new source with the builder and returns the …\nShortcut for adding a new mapping based of an already …\nAdjusts the mappings in <code>self</code> using the mappings in …\nThe base path to the used for source reference resolving …\nDecodes a sourcemap or sourcemap index from a reader\nLoads a sourcemap from a data URL\nDecodes a sourcemap or sourcemap index from a byte slice\nthe destination (minified) column number (0-indexed)\nthe destination (minified) line number (0-indexed)\nFlattens an indexed sourcemap into a regular one.  This …\nFlattens an indexed sourcemap into a regular one and …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCreates a sourcemap from a reader over a JSON stream in …\nAlias for <code>decode</code>.\nCreates a sourcemap index from a reader over a JSON stream …\nCreates a sourcemap from a reader over a JSON stream in …\nCreates a sourcemap from a reader over a JSON byte slice …\nCreates a sourcemap index from a reader over a JSON byte …\nCreates a sourcemap from a reader over a JSON byte slice …\nCreates an optimized view from a given source string\nReturns the embedded debug id.\nget the destination line and column\nget the destination (minified) column number\nget the destination (minified) line number\nLoad an embedded sourcemap if there is a data URL.\nReturns the currently set file.\nReturns the embedded filename in case there is one.\nReturns the embedded filename in case there is one.\nReturns the number of items in the index\nReturns a requested minified line.\nReturns a line slice.\nget the name if it exists as string\nLooks up a name for a specific index.\nReturns the number of names in the sourcemap.\nReturn the name ID of the token\nReturns the offset as tuple\nReturns the offset column\nReturns the offset line\nGiven a token and minified function name this attemps to …\nGiven a bytecode offset, this will find the enclosing …\nReturns the original function name.\nGiven a location, name and minified source file resolve a …\nGiven a location, name and minified source file resolve a …\nGet the underlying raw token\nResolves the name of the enclosing function for the given …\nLooks up a single section and returns it\nReturns the number of sections in this index\nLooks up a single section and returns it as a mutable ref\nLooks up a source name for an ID.\nget the source if it exists as string\nLooks up a source for a specific index.\nReturns the current source contents for a source.\nLooks up the content for a source.\nReturns the number of sources in the sourcemap.\nReturns the embedded source_root in case there is one.\nReturns the embedded source_root in case there is one.\nReturns the referenced source view.\nReturns the sources content as source view.\nReturns a reference to the embedded sourcemap if available\nReturns a reference to the embedded sourcemap if available\nget the source line and column\nget the source column number\nReturn the source ID of the token\nget the source line number\nLooks up a token by its index.\nReturns the number of tokens in the sourcemap.\nReturn the URL of the reference\nReturns the URL of the referenced map if available\nreturns <code>true</code> if a name exists, <code>false</code> otherwise\nReturns true if there are any names in the map.\nIs there a source for this token?\nChecks if a given source ID has source contents available.\nReturns the number of items in the index\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nConverts the builder into a sourcemap.\nReturns <code>true</code> if this sourcemap is for a RAM bundle.\nIf true, this token is a range token.\nIf true, this token is a range token.\nChecks if a valid sourcemap can be read from the given …\nChecks if the given byte slice contains a sourcemap\nReturns the number of lines.\nReturns an iterator over all lines.\nLoads source contents from locally accessible files if …\nIf enabled local source contents that are not in the file …\nLocates a sourcemap reference\nLocates a sourcemap reference in a slice\nShortcut to look up a token on either an index or a …\nLooks up the closest token to a given line and column.\nLooks up the closest token to a given 0-indexed line and …\nHelper function to calculate the path from a base file to …\nname identifier (<code>!0</code> in case there is no associated name)\nReturns an iterator over the names.\nCreates a new source map builder and sets the file.\nCreates an optimized view of a given source.\nCreate a new sourcemap index section\nConstructs a new sourcemap index from raw components.\nConstructs a new sourcemap from raw components.\nConstructs a new sourcemap index from raw components …\nRemoves all names from the sourcemap.\nResolves the reference.\nResolves the reference against a local file path\nThis rewrites the sourcemap according to the provided …\nThis rewrites the sourcemap according to the provided …\nIterates over all sections\nSets the debug id for the sourcemap (optional)\nSets a new value for the debug id.\nSets the file for the sourcemap (optional)\nSets a new value for the file.\nSets a new value for the file.\nChanges the source name for an already set source.\nSets a new source value for an index.  This cannot add new …\nSets the source contents for an already existing source.\nSets source contents for a source.\nSets a new value for the source_root.\nSets a new value for the source_root.\nReplaces the embedded sourcemap\nUpdates the URL for this section.\nReturns the source.\nIterates over all source contents\nReturns the source map reference in the source view.\nIterates over all sources\nthe source line column (0-indexed)\nsource identifier\nthe source line number (0-indexed)\nStrips common prefixes from the sources in the builder\nOptionally strips common prefixes from the sources.  If an …\nEncode a sourcemap into a data url.\nConverts the token into a debug tuple in the form …\nWrites a sourcemap into a writer.\nWrites a decoded sourcemap to a writer.\nWrites a sourcemap index into a writer.\nWrites a sourcemap into a writer.\nReturns an iterator over the tokens.\nImplements utilities for dealing with the sourcemap vlq …\nIf enabled, names are kept in the rewritten sourcemap.\nIf enabled source contents are kept in the sourcemap.\nReturns embeded x-facebook-offset values.\nReturns embedded metro module paths.\nEncodes a VLQ segment from a slice.\nParses a VLQ segment into a vector.\nThe archived counterpart of <code>FileName::Anon</code>\nCommand line\nAn archived <code>BytePos</code>\nAn archived <code>CharPos</code>\nAn archived <code>FileName</code>\nAn archived <code>MultiSpan</code>\nAn archived <code>SourceFile</code>\nAn archived <code>SourceFileAndBytePos</code>\nAn archived <code>Span</code>\nAn archived <code>SpanLinesError</code>\nAn archived <code>SpanSnippetError</code>\nA trait for ast nodes.\nA byte offset. Keep this small (currently 32-bits), as AST …\nA character offset. Because of multibyte utf8 characters, …\nThe archived counterpart of <code>FileName::Custom</code>\nCustom sources for explicit parser calls from plugins and …\nDummy position. This is reserved for synthesized spans.\nDummy span, both position and length are zero, syntax …\nDerives <code>serde::Deserialize</code> which is aware of <code>tag</code> based …\nThe archived counterpart of <code>SpanLinesError::DistinctSources</code>\nThe archived counterpart of …\nThe archived counterpart of <code>SpanSnippetError::DummyBytePos</code>\nDerive with <code>#[derive(EqIgnoreSpan)]</code>.\nDerives <code>swc_common::EqIgnoreSpan</code>.\nNote: This struct intentionally does not implement rkyv’…\nAn abstraction over the fs operations used by the Parser.\nDerives [<code>From</code>] for all variants. This only supports an …\nStorage for span hygiene data.\nThe archived counterpart of <code>SpanLinesError::IllFormedSpan</code>\nThe archived counterpart of <code>SpanSnippetError::IllFormedSpan</code>\nThe archived counterpart of <code>FileName::Internal</code>\nUsed to create a <code>.map</code> file.\nA source code location used for error reporting Note: This …\nA source code location used as the result of …\nThe archived counterpart of <code>SpanSnippetError::LookupFailed</code>\nThe archived counterpart of <code>FileName::MacroExpansion</code>\nHack in src/libsyntax/parse.rs\nThe archived counterpart of <code>FileName::Macros</code>\nA macro. This includes the full name of the macro, so that …\nThe archived counterpart of …\nA mark is a unique id associated with a macro expansion.\nA collection of spans. Spans have two orthogonal …\nThe archived counterpart of <code>FileName::ProcMacroSourceCode</code>\nThe archived counterpart of <code>FileName::QuoteExpansion</code>\ncall to <code>quote!</code>\nThe archived counterpart of <code>FileName::Real</code>\nSynthesized, but should be stored in a source map.\nA single source in the SourceMap.\nThe interner for spans.\nThe archived counterpart of …\nSpans represent a region of code, used for error …\nDerive\nDerives [<code>swc_common::Spanned</code>]. See [<code>swc_common::Spanned</code>] …\nA SyntaxContext represents a chain of macro expansions …\nDerive with <code>#[derive(TypeEq)]</code>.\nDerives <code>swc_common::TypeEq</code>.\nThe archived counterpart of <code>FileName::Url</code>\nReturn an absolute path to a file, if possible.\nAdjust this context for resolution in a scope created by …\nExtend a syntax context with a given mark and default …\nAlias for <code>#[derive(Spanned, Fold, Clone, Debug, PartialEq)]</code>…\nDerives <code>serde::Serialize</code> and <code>serde::Deserialize</code>.\nReturn a <code>Span</code> between the end of <code>self</code> to the beginning of …\nCreates a <code>.map</code> file.\nReturns `true`` if this is explicitly synthesized or has …\nChains multiple visitor.\nThe (0-based) column offset\nUTF-16 column in line, starting from 0.\nThe (0-based) column offset when displayed\nReturn true if <code>self</code> fully encloses <code>other</code>.\nThe archived counterpart of <code>SourceFile::crate_of_origin</code>\nIndicates which crate this <code>SourceFile</code> was imported from.\nThe archived counterpart of <code>Span::ctxt</code>\nInformation about where the macro came from, if this piece …\nDummy span, both position are extremely large numbers so …\nReturns a new span representing just the end-point of this …\nThe archived counterpart of <code>SourceFile::end_pos</code>\nThe end position of this source in the <code>SourceMap</code>\nAlways returns true\nInformation about the original source\nQuery the existence of a file.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nTake the span of a type parameter in a function signature …\nGet a line from the list of pre-computed line-beginnings. …\nAdjust this context for resolution in a scope created by …\nReturns <code>true</code> if <code>self</code> is marked with <code>mark</code>.\nReturns <code>true</code> if <code>self</code> is marked with <code>mark</code>.\nThe archived counterpart of <code>Span::hi</code>\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns <code>true</code> if this is a dummy span with any hygienic …\nReturns <code>true</code> if this contains only a dummy primary span …\nReturns `true`` if this is synthesized and has no relevant …\nReturns <code>true</code> if this is a dummy span with any hygienic …\nComputes a mark such that both input marks are descendants …\nThe (1-based) line number\nIndex of line, starting from 0.\nReturn the BytePos of the beginning of the current line.\nThe archived counterpart of <code>SourceFile::lines</code>\nLocations of lines beginnings in the source code\nThe archived counterpart of <code>Span::lo</code>\nFor a global BytePos compute the local offset within the …\nLookup source information about a BytePos\nIf the relevant source_file is empty, we don’t return a …\nFind the line containing the given position. The return …\nApplies any path prefix substitution as defined by the …\nReturns <code>Some(span)</code>, a union of the lhs and rhs span.  The …\nThe archived counterpart of <code>SourceFile::multibyte_chars</code>\nLocations of multi-byte characters in the source code\nThe archived counterpart of <code>SourceFile::name</code>\nThe name of the file that the source came from. Source …\nThe archived counterpart of <code>SourceFile::name_hash</code>\nA hash of the filename, used for speeding up the incr. …\nThe archived counterpart of <code>SourceFile::name_was_remapped</code>\nTrue if the <code>name</code> field above has been modified by …\nShortcut for <code>Mark::fresh(Mark::root())</code>\n<code>src</code> should not have UTF8 BOM\nCreates a new source_file. This does not ensure that only …\nCreates a new source_file. This does not ensure that only …\nReturns a new span representing the next character after …\nThe archived counterpart of <code>SourceFile::non_narrow_chars</code>\nWidth of characters that are not narrow in the source code\nThis module reexports items from <code>swc_visit</code> with some …\nThe archived counterpart of <code>SourceFileAndBytePos::pos</code>\nSelects the first primary span (if any)\nReturns all primary spans.\nRead the contents of an UTF-8 file into memory.\nPulls a single mark off of the syntax context. This …\nReplaces all occurrences of one Span with another. Used to …\nUndo <code>glob_adjust</code> if possible:\nThe mark of the theoretical expansion that generates …\nThe archived counterpart of <code>SourceFileAndBytePos::sf</code>\nReturns a new span representing an empty span at the end …\nReturns a new span representing an empty span at the …\nReturn true if the spans are equal with regards to the …\nThe SourceMap tracks all the source code used within a …\nGet span of <code>self</code>.\nCreates a new single-byte span.\nExtend the given <code>Span</code> to just after the next occurrence of …\nExtend the given <code>Span</code> to just after the next occurrence of …\nExtend the given <code>Span</code> to just after the previous …\nExtend the given <code>Span</code> to just after the previous …\nReturns the strings to highlight. We always ensure that …\nGiven a <code>Span</code>, get a shorter one until <code>predicate</code> yields …\nGiven a <code>Span</code>, try to get a shorter span ending just after …\nConverts a span of absolute BytePos to a CharPos relative …\nReturn the source snippet as <code>String</code> after the given <code>Span</code>\nReturn the source snippet as <code>String</code> before the given <code>Span</code>\nReturn the source snippet as <code>String</code> corresponding to the …\nGiven a <code>Span</code>, try to get a shorter span ending before the …\nGiven a <code>Span</code>, get a new <code>Span</code> covering the first token and …\nGiven a <code>Span</code>, get a new <code>Span</code> covering the first token …\nThe archived counterpart of <code>SourceFile::src</code>\nThe complete source code\nThe archived counterpart of <code>SourceFile::src_hash</code>\nThe source code’s hash\nReturns a new span representing just the start-point of …\nThe archived counterpart of <code>SourceFile::start_pos</code>\nThe start position of this source in the <code>SourceMap</code>\nReturns <code>self</code> if <code>self</code> is not the dummy span, and <code>other</code> …\nThis module defines types which are thread safe if …\nReturn a <code>Span</code> that would enclose both <code>self</code> and <code>end</code>.\nReturns <code>Some(span)</code>, where the start is trimmed by the end …\nFor a global BytePos compute the local offset within the …\nLookup source information about a BytePos\n<strong>Note</strong>: This method should return <code>true</code> for non-type values.\nAlways returns true\nThe archived counterpart of <code>SourceFile::unmapped_path</code>\nThe unmapped path of the file that the source came from. …\nReturn a <code>Span</code> between the beginning of <code>self</code> to the …\nCalls <code>op</code> with the source code located at <code>sp</code>.\nCalls the given closure with the source snippet after the …\nCalls the given closure with the source snippet before the …\nThe archived counterpart of …\nAn archived <code>Comment</code>\nAn archived <code>CommentKind</code>\nThe resolver for <code>CommentKind::Block</code>\nThe archived counterpart of <code>CommentKind::Block</code>\nThe resolver for an archived <code>CommentKind</code>\nThe resolver for an archived <code>Comment</code>\nStores comment.\nThe resolver for <code>CommentKind::Line</code>\nThe archived counterpart of <code>CommentKind::Line</code>\nImplementation of Comments which does not store any …\nSingle-threaded storage for comments.\nBorrows all the comments as (leading, trailing).\nBorrows all the comments as (leading, trailing).\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCreates a new <code>SingleThreadedComments</code> from the provided …\nThis method is used to check if a comment with the given …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nThe archived counterpart of <code>Comment::kind</code>\nThe archived counterpart of <code>Comment::span</code>\nTakes all the comments as (leading, trailing).\nThe archived counterpart of <code>Comment::text</code>\n[<code>Atom::new_bad</code>][] is perfectly fine for this value.\nThe resolver for an archived <code>Applicability</code>\nAn archived <code>Applicability</code>\nAn archived <code>CodeSuggestion</code>\nAn archived <code>Level</code>\nAn archived <code>Substitution</code>\nAn archived <code>SubstitutionPart</code>\nThe resolver for <code>Level::Bug</code>\nThe archived counterpart of <code>Level::Bug</code>\nThe resolver for <code>Level::Cancelled</code>\nThe archived counterpart of <code>Level::Cancelled</code>\nThe resolver for an archived <code>CodeSuggestion</code>\nUsed for emitting structured error messages and other …\nEmitter trait for emitting errors.\nImplementation of Emitter which pretty-prints the errors.\nThe resolver for <code>Level::Error</code>\nThe archived counterpart of <code>Level::Error</code>\nSignifies that the compiler died with an explicit call to …\nThe resolver for <code>Level::FailureNote</code>\nThe archived counterpart of <code>Level::FailureNote</code>\nThe resolver for <code>Level::Fatal</code>\nThe archived counterpart of <code>Level::Fatal</code>\nUsed as a return value to signify a fatal error occurred. …\nUsed for error reporting in transform.\nA handler deals with errors; certain errors (fatal, bug, …\nThe resolver for <code>Applicability::HasPlaceholders</code>\nThe archived counterpart of <code>Applicability::HasPlaceholders</code>\nThe resolver for <code>Level::Help</code>\nThe archived counterpart of <code>Level::Help</code>\nThe resolver for an archived <code>Level</code>\nThe resolver for <code>Applicability::MachineApplicable</code>\nThe archived counterpart of …\nThe resolver for <code>Applicability::MaybeIncorrect</code>\nThe archived counterpart of <code>Applicability::MaybeIncorrect</code>\nThe resolver for <code>Level::Note</code>\nThe archived counterpart of <code>Level::Note</code>\nThe resolver for <code>Level::PhaseFatal</code>\nThe archived counterpart of <code>Level::PhaseFatal</code>\nFor example a note attached to an error.\nSee the docs on <code>CodeSuggestion::substitutions</code>\nThe resolver for an archived <code>SubstitutionPart</code>\nThe resolver for an archived <code>Substitution</code>\nThe resolver for <code>Applicability::Unspecified</code>\nThe archived counterpart of <code>Applicability::Unspecified</code>\nThe resolver for <code>Level::Warning</code>\nThe archived counterpart of <code>Level::Warning</code>\nThe archived counterpart of <code>CodeSuggestion::applicability</code>\nWhether or not the suggestion is approximate\nBuffers the diagnostic for later emission, unless handler …\nIf false, warning-level lints are suppressed. (rustc: see …\nCancel the diagnostic (a structured diagnostic must either …\nUsed by a lint. Copies over all details <em>but</em> the “main …\nDelay emission of this diagnostic as a bug.\nIf true, immediately emit diagnostics that would otherwise …\nEmit a structured diagnostic.\nEmit the diagnostic.\nshow macro backtraces even for non-local macros. (rustc: …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nThe archived counterpart of <code>CodeSuggestion::msg</code>\n<code>true</code> if we haven’t taught a diagnostic with this code …\nConvenience function for internal use, clients should use …\nCreates a new <code>DiagnosticBuilder</code> with an already constructed\nConvenience function for internal use, clients should use …\nThe archived counterpart of <code>Substitution::parts</code>\nIf true, immediately print bugs registered with …\nResets the diagnostic error count as well as the cached …\nCheck if should show explanations about “rustc –explain…\nThe archived counterpart of …\nThe archived counterpart of <code>SubstitutionPart::snippet</code>\nThe archived counterpart of <code>SubstitutionPart::span</code>\nAdd a span/label to be included in the resulting snippet. …\nAdd a span/label to be included in the resulting snippet. …\nPrints out a message with a suggested edit of the code.\nPrints out a message with a suggested edit of the code. If …\nThis is a suggestion that may contain mistakes or fillers …\nPrints out a message with multiple suggested edits of the …\nReturns the assembled code suggestions and whether they …\nConvenience function for internal use, clients should use …\nConvenience function for internal use, clients should use …\nThe archived counterpart of <code>CodeSuggestion::substitutions</code>\nEach substitute can have multiple variants due to multiple …\nIf true, error-level diagnostics are upgraded to bug-level.\nExample implementation of Emitter is EmitterWriter\nCalls Self::with_emitter with EmitterWriter.\nEmitter trait for emitting errors.\nImplementation of Emitter which pretty-prints the errors.\nmaximum number of lines we will print for each error; …\nmaximum number of suggestions to be shown\nEmit a structured diagnostic.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCheck if should show explanations about “rustc –explain…\nImplementation of Input.\nSafety\nReturns None if it’s end of input <strong>or</strong> current character …\nTODO(kdy1): Remove this?\nImplementors can override the method to make it faster.\nThis method modifies [last_pos()] and [cur_pos()].\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nImplementors can override the method to make it faster.\nImplementors can override the method to make it faster.\n<code>start</code> and <code>end</code> can be arbitrary value, but start should be …\nSafety\nSafety\nTakes items from stream, testing each one with predicate. …\nCopied from …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nVisit all children nodes. This converts <code>VisitAll</code> to <code>Visit</code>. …\nA visitor which applies <code>A</code> and then <code>B</code>.\nA named compiler pass.\nThe enum <code>Either</code> with variants <code>Left</code> and <code>Right</code> is a general …\nA value of type <code>L</code>.\nA visitor which visits node only if <code>enabled</code> is true.\nA visitor which applies <code>V</code> again and again if <code>V</code> modifies …\nTrait for a pass which is designed to invoked multiple …\nA value of type <code>R</code>.\nConvert <code>&amp;mut Either&lt;L, R&gt;</code> to <code>Either&lt;&amp;mut L, &amp;mut R&gt;</code>.\nConvert <code>Pin&lt;&amp;mut Either&lt;L, R&gt;&gt;</code> to …\nConvert <code>Pin&lt;&amp;Either&lt;L, R&gt;&gt;</code> to <code>Either&lt;Pin&lt;&amp;L&gt;, Pin&lt;&amp;R&gt;&gt;</code>, …\nConvert <code>&amp;Either&lt;L, R&gt;</code> to <code>Either&lt;&amp;L, &amp;R&gt;</code>.\nChains multiple visitor.\nShould run again?\nThis creates <code>Visit</code>. This is extensible visitor generator, …\nApply one of two functions depending on contents, unifying …\nConvert the contained value into <code>T</code>\nLike <code>either</code>, but provide some context to whichever of the …\nReturns the left value\nReturns the right value\nFactors out a homogenous type from an <code>Either</code> of <code>Result</code>.\nFactor out a homogeneous type from an either of pairs.\nConverts an <code>Either</code> of <code>Iterator</code>s to be an <code>Iterator</code> of <code>Either</code>…\nBorrows an <code>Either</code> of <code>Iterator</code>s to be an <code>Iterator</code> of <code>Either</code>s\nMutably borrows an <code>Either</code> of <code>Iterator</code>s to be an <code>Iterator</code> …\nFactors out <code>None</code> from an <code>Either</code> of <code>Option</code>.\nFactors out a homogenous type from an <code>Either</code> of <code>Result</code>.\nFactor out a homogeneous type from an either of pairs.\nConvert <code>Either&lt;L, R&gt;</code> to <code>Either&lt;R, L&gt;</code>.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nExtract the value of an either over two equivalent types.\nConvert the inner value to an iterator.\nReturn true if the value is the <code>Left</code> variant.\nReturn true if the value is the <code>Right</code> variant.\nBorrow the inner value as an iterator.\nMutably borrow the inner value as an iterator.\nConvert the left side of <code>Either&lt;L, R&gt;</code> to an <code>Option&lt;L&gt;</code>.\nApply the function <code>f</code> on the value in the <code>Left</code> variant if …\nReturn left value or given value\nReturn left or a default\nReturns left value or computes it from a closure\nMap <code>f</code> over the contained value and return the result in the\nApply the functions <code>f</code> and <code>g</code> to the <code>Left</code> and <code>Right</code> variants …\nSimilar to <code>map_either</code>, with an added context <code>ctx</code> …\nApply the function <code>f</code> on the value in the <code>Left</code> variant if …\nApply the function <code>f</code> on the value in the <code>Right</code> variant if …\nname should follow hyphen-case.an implementation should …\nReset.\nConvert the right side of <code>Either&lt;L, R&gt;</code> to an <code>Option&lt;R&gt;</code>.\nApply the function <code>f</code> on the value in the <code>Right</code> variant if …\nReturn right value or given value\nReturn right or a default\nReturns right value or computes it from a closure\nReturns the left value\nReturns the right value\nSome utilities for generated visitors.\nCopied from <code>syntax::ptr::P</code> of rustc.\nTransform the inner value, consuming <code>self</code> and producing a …\nModifiers vector in-place.\nThis will be very slow if you try to extend vector using …\nMap in place.\nCompile-time version constant for the AST struct schema’…\nAn archived <code>PluginCorePkgDiagnostics</code>\nA serializable, wrapped struct for the diagnostics …\nThe resolver for an archived <code>PluginCorePkgDiagnostics</code>\nThe archived counterpart of …\nThe archived counterpart of …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nThe archived counterpart of …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nThe archived counterpart of …\nHost side metadata context plugin may need to access. This …\nIndexable key to the metadata context for a transform …\nThe current working directory.\nThe current environment resolved as process.env.SWC_ENV || …\nThe path of the file being processed. This includes all of …\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nAn archived <code>PluginError</code>\nAn archived <code>VersionedSerializable</code>\nThe resolver for <code>PluginError::Deserialize</code>\nThe archived counterpart of <code>PluginError::Deserialize</code>\nOccurs when failed to reconstruct a struct from <code>Serialized</code>.\nEnum for possible errors while running transform via …\nThe resolver for an archived <code>PluginError</code>\nWraps internal representation of serialized data for …\nThe resolver for <code>PluginError::Serialize</code>\nThe archived counterpart of <code>PluginError::Serialize</code>\nOccurs when failed to serialize a struct into <code>Serialized</code>. …\nThe resolver for <code>PluginError::SizeInteropFailure</code>\nThe archived counterpart of <code>PluginError::SizeInteropFailure</code>\nOccurs when failed to convert size passed from host / …\nA wrapper type for the structures to be passed into plugins\nThe resolver for an archived <code>VersionedSerializable</code>\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nConstructs an instance from already serialized byteslices.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nConstructs an instance from versioned struct by …\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nThe resolver for <code>FileName::Anon</code>\nThe archived counterpart of <code>FileName::Anon</code>\nCommand line\nAn archived <code>BytePos</code>\nAn archived <code>CharPos</code>\nAn archived <code>DistinctSources</code>\nAn archived <code>FileName</code>\nAn archived <code>FilePos</code>\nAn archived <code>LineInfo</code>\nAn archived <code>MalformedSourceMapPositions</code>\nAn archived <code>MultiByteChar</code>\nAn archived <code>MultiSpan</code>\nAn archived <code>NonNarrowChar</code>\nAn archived <code>PartialFileLines</code>\nAn archived <code>PartialLoc</code>\nAn archived <code>PrimarySpanLabel</code>\nAn archived <code>SourceFile</code>\nAn archived <code>SourceFileAndBytePos</code>\nAn archived <code>SourceMapLookupError</code>\nAn archived <code>Span</code>\nAn archived <code>SpanLinesError</code>\nAn archived <code>SpanSnippetError</code>\nA byte offset. Keep this small (currently 32-bits), as AST …\nThe resolver for an archived <code>BytePos</code>\nStores the state of the last conversion between BytePos …\nA character offset. Because of multibyte utf8 characters, …\nThe resolver for an archived <code>CharPos</code>\nThe resolver for <code>FileName::Custom</code>\nThe archived counterpart of <code>FileName::Custom</code>\nCustom sources for explicit parser calls from plugins and …\nDummy span, both position and length are zero, syntax …\nThe resolver for <code>SpanLinesError::DistinctSources</code>\nThe archived counterpart of <code>SpanLinesError::DistinctSources</code>\nThe resolver for <code>SpanSnippetError::DistinctSources</code>\nThe archived counterpart of …\nThe resolver for an archived <code>DistinctSources</code>\nThe resolver for <code>SpanSnippetError::DummyBytePos</code>\nThe archived counterpart of <code>SpanSnippetError::DummyBytePos</code>\nA wrapper that attempts to convert a type to and from …\nA wrapper that attempts to convert a Url to and from …\nContains the error value\nContains the error value\nNote: This struct intentionally does not implement rkyv’…\nAn abstraction over the fs operations used by the Parser.\nThe resolver for an archived <code>FileName</code>\nThe resolver for an archived <code>FilePos</code>\nStorage for span hygiene data.\nThe resolver for <code>SpanLinesError::IllFormedSpan</code>\nThe archived counterpart of <code>SpanLinesError::IllFormedSpan</code>\nThe resolver for <code>SpanSnippetError::IllFormedSpan</code>\nThe archived counterpart of <code>SpanSnippetError::IllFormedSpan</code>\nThe resolver for <code>FileName::Internal</code>\nThe archived counterpart of <code>FileName::Internal</code>\nUsed to create a <code>.map</code> file.\nThe resolver for an archived <code>LineInfo</code>\nA source code location used for error reporting Note: This …\nA source code location used as the result of …\nThe resolver for <code>SpanSnippetError::LookupFailed</code>\nThe archived counterpart of <code>SpanSnippetError::LookupFailed</code>\nThe resolver for <code>FileName::MacroExpansion</code>\nThe archived counterpart of <code>FileName::MacroExpansion</code>\nHack in src/libsyntax/parse.rs\nThe resolver for <code>FileName::Macros</code>\nThe archived counterpart of <code>FileName::Macros</code>\nA macro. This includes the full name of the macro, so that …\nThe resolver for <code>SpanSnippetError::MalformedForSourcemap</code>\nThe archived counterpart of …\nThe resolver for an archived <code>MalformedSourceMapPositions</code>\nA mark is a unique id associated with a macro expansion.\nIdentifies an offset of a multi-byte character in a …\nThe resolver for an archived <code>MultiByteChar</code>\nA collection of spans. Spans have two orthogonal …\nThe resolver for an archived <code>MultiSpan</code>\nThe resolver for <code>SourceMapLookupError::NoFileFor</code>\nThe archived counterpart of <code>SourceMapLookupError::NoFileFor</code>\nIdentifies an offset of a non-narrow character in a …\nThe resolver for an archived <code>NonNarrowChar</code>\nContains the success value\nContains the success value\nA struct to exchange <code>FileLines</code> with omitting SourceFile as …\nThe resolver for an archived <code>PartialFileLines</code>\nA struct to exchange <code>Loc</code> with omitting SourceFile as …\nThe resolver for an archived <code>PartialLoc</code>\nThe resolver for an archived <code>PrimarySpanLabel</code>\nThe resolver for <code>FileName::ProcMacroSourceCode</code>\nThe archived counterpart of <code>FileName::ProcMacroSourceCode</code>\nThe resolver for <code>FileName::QuoteExpansion</code>\nThe archived counterpart of <code>FileName::QuoteExpansion</code>\ncall to <code>quote!</code>\nThe resolver for <code>FileName::Real</code>\nThe archived counterpart of <code>FileName::Real</code>\nA FileLoader that uses std::fs to load real files.\nA single source in the SourceMap.\nThe resolver for an archived <code>SourceFileAndBytePos</code>\nThe resolver for an archived <code>SourceFile</code>\nThe interner for spans.\nAn error type for looking up source maps.\nThe resolver for an archived <code>SourceMapLookupError</code>\nThe resolver for <code>SpanSnippetError::SourceNotAvailable</code>\nThe archived counterpart of …\nSpans represent a region of code, used for error …\nThe resolver for an archived <code>SpanLinesError</code>\nThe resolver for an archived <code>Span</code>\nThe resolver for an archived <code>SpanSnippetError</code>\nA SyntaxContext represents a chain of macro expansions …\nThe resolver for <code>NonNarrowChar::Tab</code>\nThe archived counterpart of <code>NonNarrowChar::Tab</code>\nRepresents a tab character, represented visually with a …\nThe resolver for <code>FileName::Url</code>\nThe archived counterpart of <code>FileName::Url</code>\nThe resolver for <code>NonNarrowChar::Wide</code>\nThe archived counterpart of <code>NonNarrowChar::Wide</code>\nRepresents a wide (fullwidth) character\nThe resolver for <code>NonNarrowChar::ZeroWidth</code>\nThe archived counterpart of <code>NonNarrowChar::ZeroWidth</code>\nRepresents a zero-width character\nReturn an absolute path to a file, if possible.\nThe archived counterpart of <code>DistinctSources::begin</code>\nThe archived counterpart of …\nComputes the extra number of UTF-8 bytes necessary to …\nThe archived counterpart of <code>MultiByteChar::bytes</code>\nThe number of bytes, &gt;=2\nThe (0-based) column offset\nThe archived counterpart of <code>PartialLoc::col</code>\nUTF-16 column in line, starting from 0.\nThe (0-based) column offset when displayed\nThe archived counterpart of <code>PartialLoc::col_display</code>\nThe archived counterpart of <code>SourceFile::crate_of_origin</code>\nIndicates which crate this <code>SourceFile</code> was imported from.\nThe archived counterpart of <code>Span::ctxt</code>\nInformation about where the macro came from, if this piece …\nYou can define whether to emit sourcemap with columns or …\nThe archived counterpart of <code>DistinctSources::end</code>\nThe archived counterpart of <code>LineInfo::end_col</code>\nColumn in line where span ends, starting from 0, exclusive.\nThe archived counterpart of <code>SourceFile::end_pos</code>\nThe end position of this source in the <code>SourceMap</code>\nThe archived counterpart of …\nInformation about the original source\nThe archived counterpart of <code>PartialFileLines::file</code>\nQuery the existence of a file.\nReturns\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nThe archived counterpart of <code>Span::hi</code>\nMachinery for hygienic macros, inspired by the <code>MTWT[1]</code> …\nYou can override this to control <code>sourceContents</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nIs this a primary span? This is the “locus” of the …\nWhat label should we attach to this span (if any)?\nThe (1-based) line number\nThe archived counterpart of <code>PartialLoc::line</code>\nIndex of line, starting from 0.\nThe archived counterpart of <code>LineInfo::line_index</code>\nIndex of line, starting from 0.\nThe archived counterpart of <code>SourceFile::lines</code>\nLocations of lines beginnings in the source code\nThe archived counterpart of <code>PartialFileLines::lines</code>\nThe archived counterpart of <code>Span::lo</code>\nThe archived counterpart of <code>SourceFile::multibyte_chars</code>\nLocations of multi-byte characters in the source code\nThe archived counterpart of <code>SourceFile::name</code>\nThe name of the file that the source came from. Source …\nThe archived counterpart of …\nReturns identifier starting at <code>bpos</code>.\nThe archived counterpart of <code>SourceFile::name_hash</code>\nA hash of the filename, used for speeding up the incr. …\nThe archived counterpart of <code>SourceFile::name_was_remapped</code>\nTrue if the <code>name</code> field above has been modified by …\nThe archived counterpart of <code>SourceFile::non_narrow_chars</code>\nWidth of characters that are not narrow in the source code\nReturns the absolute offset of the character in the …\nThe archived counterpart of <code>MultiByteChar::pos</code>\nThe absolute offset of the character in the SourceMap\nThe archived counterpart of <code>SourceFileAndBytePos::pos</code>\nRead the contents of an UTF-8 file into memory.\nThe archived counterpart of <code>SourceFileAndBytePos::sf</code>\nBy default, we skip internal files.\nThe archived counterpart of <code>PartialLoc::source_file</code>\nThe archived counterpart of …\nThe span we are going to include in the final snippet.\nThe archived counterpart of <code>SourceFile::src</code>\nThe complete source code\nThe archived counterpart of <code>SourceFile::src_hash</code>\nThe source code’s hash\nThe archived counterpart of <code>LineInfo::start_col</code>\nColumn in line where span begins, starting from 0.\nThe archived counterpart of <code>SourceFile::start_pos</code>\nThe start position of this source in the <code>SourceMap</code>\nThe archived counterpart of <code>SourceFile::unmapped_path</code>\nThe unmapped path of the file that the source came from. …\nReturns the width of the character, 0 (zero-width) or 2 …\nThe archived counterpart of …\nThe resolver for …\nAn archived <code>MutableMarkContext</code>\nAn archived <code>SyntaxContext</code>\nA mark is a unique id associated with a macro expansion.\nThe resolver for an archived <code>MutableMarkContext</code>\nA SyntaxContext represents a chain of macro expansions …\nThe resolver for an archived <code>SyntaxContext</code>\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nA value which is initialized on the first access.\nAn RAII implementation of a “scoped lock” of a mutex. …\nA thread-safe reference-counting pointer. ‘Arc’ stands …\nAn RAII mutex guard returned by <code>MutexGuard::map</code>, which can …\nAn RAII read lock guard returned by <code>RwLockReadGuard::map</code>, …\nAn RAII write lock guard returned by <code>RwLockWriteGuard::map</code>…\nA thread-safe cell which can be written to only once.\nRAII structure used to release the shared read access of a …\nTypes that can be transferred across thread boundaries.\nTypes for which it is safe to share references between …\nRAII structure used to release the exclusive write access …\nReturns a reference to the underlying allocator.\nProvides a raw pointer to the data.\nConverts to <code>Arc&lt;[T]&gt;</code>.\nConverts to <code>Arc&lt;T&gt;</code>.\nMakes a clone of the <code>Arc</code> pointer.\nComparison for two <code>Arc</code>s.\nDecrements the strong reference count on the <code>Arc&lt;T&gt;</code> …\nDecrements the strong reference count on the <code>Arc&lt;T&gt;</code> …\nCreates a new lazy value using <code>Default</code> as the initializing …\nCreates a <code>LockCell&lt;T&gt;</code>, with the <code>Default</code> value for T.\nCreates a new <code>Arc&lt;T&gt;</code>, with the <code>Default</code> value for <code>T</code>.\nAttempt to downcast the <code>Arc&lt;dyn Any + Send + Sync&gt;</code> to a …\nDowncasts the <code>Arc&lt;dyn Any + Send + Sync&gt;</code> to a concrete …\nCreates a new <code>Weak</code> pointer to this allocation.\nDrops the <code>Arc</code>.\nEquality for two <code>Arc</code>s.\nForces the evaluation of this lazy value and returns a …\nForces the evaluation of this lazy value and returns a …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nMove a boxed object to a new, reference-counted allocation.\nConverts a <code>T</code> into an <code>Arc&lt;T&gt;</code>\nConverts a <code>Path</code> into an <code>Arc</code> by copying the <code>Path</code> data into …\nAllocate a reference-counted <code>str</code> and copy <code>v</code> into it.\nAllocate a reference-counted slice and fill it by cloning <code>v</code>…\nAllocate a reference-counted <code>str</code> and copy <code>v</code> into it.\nCopies the string into a newly allocated Arc&lt;OsStr&gt;.\nReturns the argument unchanged.\nConverts a <code>PathBuf</code> into an Arc&lt;Path&gt; by moving the <code>PathBuf</code> …\nAllocate a reference-counted slice and move <code>v</code>’s items …\nConverts an atomically reference-counted string slice into …\nCreate an atomically reference-counted pointer from a …\nConverts a <code>[T; N]</code> into an <code>Arc&lt;[T]&gt;</code>.\nConverts a <code>CString</code> into an Arc&lt;CStr&gt; by moving the <code>CString</code> …\nConverts a <code>&amp;CStr</code> into a <code>Arc&lt;CStr&gt;</code>, by copying the contents …\nConverts an <code>OsString</code> into an Arc&lt;OsStr&gt; by moving the …\nTakes each element in the <code>Iterator</code> and collects it into an …\nConstructs an <code>Arc&lt;T&gt;</code> from a raw pointer.\nConstructs an <code>Arc&lt;T, A&gt;</code> from a raw pointer.\n‘Greater than or equal to’ comparison for two <code>Arc</code>s.\nGets the reference to the underlying value.\nGets the reference to the result of this lazy value if it …\nGets the mutable reference to the underlying value.\nGets the reference to the result of this lazy value if it …\nReturns a mutable reference into the given <code>Arc</code>, if there …\nReturns a mutable reference into the given <code>Arc</code>, without …\nGets the contents of the cell, initializing it with <code>f</code> if …\nGets the contents of the cell, initializing it with <code>f</code> if …\nGet the reference to the underlying value, without …\nGreater-than comparison for two <code>Arc</code>s.\nIncrements the strong reference count on the <code>Arc&lt;T&gt;</code> …\nIncrements the strong reference count on the <code>Arc&lt;T&gt;</code> …\nSame as HashMap::insert, but it may panic if there’s …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nConsumes the <code>OnceCell</code>, returning the wrapped value. Returns\nReturns the inner value, if the <code>Arc</code> has exactly one strong …\nConsumes the <code>Arc</code>, returning the wrapped pointer.\nConsumes this <code>Lazy</code> returning the stored value.\n‘Less than or equal to’ comparison for two <code>Arc</code>s.\nLess-than comparison for two <code>Arc</code>s.\nMakes a mutable reference into the given <code>Arc</code>.\nInequality for two <code>Arc</code>s.\nCreates a new empty cell.\nCreates a new lazy value with the given initializing …\nConstructs a new <code>Arc&lt;T&gt;</code>.\nConstructs a new <code>Arc&lt;T&gt;</code> while giving you a <code>Weak&lt;T&gt;</code> to the …\nConstructs a new <code>Arc&lt;T&gt;</code> in the provided allocator.\nConstructs a new <code>Arc</code> with uninitialized contents.\nConstructs a new <code>Arc</code> with uninitialized contents in the …\nConstructs a new atomically reference-counted slice with …\nConstructs a new atomically reference-counted slice with …\nConstructs a new <code>Arc</code> with uninitialized contents, with the …\nConstructs a new <code>Arc</code> with uninitialized contents, with the …\nConstructs a new atomically reference-counted slice with …\nConstructs a new atomically reference-counted slice with …\nPartial comparison for two <code>Arc</code>s.\nConstructs a new <code>Pin&lt;Arc&lt;T&gt;&gt;</code>. If <code>T</code> does not implement <code>Unpin</code>…\nConstructs a new <code>Pin&lt;Arc&lt;T, A&gt;&gt;</code> in the provided allocator. …\nReturns <code>true</code> if the two <code>Arc</code>s point to the same allocation …\nSets the contents of this cell to <code>value</code>.\nGets the number of strong (<code>Arc</code>) pointers to this …\nTakes the value out of this <code>OnceCell</code>, moving it back to an …\nLike <code>set</code>, but also returns a reference to the final cell …\nConstructs a new <code>Arc&lt;T&gt;</code>, returning an error if allocation …\nConstructs a new <code>Arc&lt;T, A&gt;</code> in the provided allocator, …\nConstructs a new <code>Arc</code> with uninitialized contents, …\nConstructs a new <code>Arc</code> with uninitialized contents, in the …\nConstructs a new <code>Arc</code> with uninitialized contents, with the …\nConstructs a new <code>Arc</code> with uninitialized contents, with the …\nConstructs a new <code>Pin&lt;Arc&lt;T&gt;&gt;</code>, return an error if …\nConstructs a new <code>Pin&lt;Arc&lt;T, A&gt;&gt;</code> in the provided allocator, …\nReturns the inner value, if the <code>Arc</code> has exactly one strong …\nIf we have the only reference to <code>T</code> then unwrap it. …\nGets the reference to the underlying value, blocking the …\nGets the number of <code>Weak</code> pointers to this allocation.\nCreates a new initialized cell.\nCopied from https://stackoverflow.com/a/49456265/6193633\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCopied from <code>syntax::ptr::P</code> of rustc.\nTransform the inner value, consuming <code>self</code> and producing a …\nModifiers vector in-place.\nThis will be very slow if you try to extend vector using …\nMap in place.\nHelper for people who are working on <code>VisitMut</code>.\nCreate a dummy value of this type.\nMutate <code>self</code> using <code>op</code>, which accepts owned data.\nType parameters\nContains the error value\nContains the success value\nThe type returned by formatter methods.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCompiles a modern CSS file to a CSS file which works with …\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nThe list of features to <strong>process</strong>.\nGet a flags value with all known bits set.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nGet the underlying bits value.\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nWhether all set bits in a source flags value are also set …\nThe intersection of a source flags value with the …\nGet a flags value with all bits unset.\nThe bitwise or (<code>|</code>) of the bits in each flags value.\nReturns the argument unchanged.\nConvert from a bits value.\nConvert from a bits value exactly.\nConvert from a bits value, unsetting any unknown bits.\nThe bitwise or (<code>|</code>) of the bits in each flags value.\nGet a flags value with the bits of a flag with the given …\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nWhether any set bits in a source flags value are also set …\nCalls <code>U::from(self)</code>.\nWhether all known bits in this flags value are set.\nWhether all bits in this flags value are unset.\nYield a set of contained flags values.\nYield a set of contained named flags values.\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nThe intersection of a source flags value with the …\nCall <code>insert</code> when <code>value</code> is <code>true</code> or <code>remove</code> when <code>value</code> is …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nParse a given file as <code>T</code>.\nParse a given file as <code>T</code>.\nParse a given StringInput as <code>T</code>.\nSize is same as a size of a pointer.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nContains the error value\nContains the success value\nIf this is <code>true</code>, <strong>wrong</strong> comments starting with <code>//</code> will be …\nIf enabled, errors for css modules selectors will be …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nIf this is <code>true</code>, the legacy syntax for IE will be parsed.\nIf this is <code>true</code>, the nested selector starts with an …\nTake <strong>recovered</strong> errors.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns <code>last_pos</code>\nThis uses <code>ahash</code> directly to reduce build time.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nList of features enabled\nReturns the argument unchanged.\nReturns metadata about the swc_core engine that was built …\nCommit sha of swc_core built against.\nCalls <code>U::from(self)</code>.\nSemver package version of swc_core.\nThe archived counterpart of <code>BinaryOp::Add</code>\n<code>+</code>\nThe archived counterpart of <code>AssignOp::AddAssign</code>\n<code>+=</code>\nThe archived counterpart of <code>AssignOp::AndAssign</code>\n<code>&amp;&amp;=</code>\nAn archived <code>Accessibility</code>\nAn archived <code>ArrayLit</code>\nAn archived <code>ArrayPat</code>\nAn archived <code>ArrowExpr</code>\nAn archived <code>AssignExpr</code>\nAn archived <code>AssignOp</code>\nAn archived <code>AssignPat</code>\nAn archived <code>AssignPatProp</code>\nAn archived <code>AssignProp</code>\nAn archived <code>AssignTarget</code>\nAn archived <code>AssignTargetPat</code>\nAn archived <code>AutoAccessor</code>\nAn archived <code>AwaitExpr</code>\nAn archived <code>BigInt</code>\nAn archived <code>BinExpr</code>\nAn archived <code>BinaryOp</code>\nAn archived <code>BindingIdent</code>\nAn archived <code>BlockStmt</code>\nAn archived <code>BlockStmtOrExpr</code>\nAn archived <code>Bool</code>\nAn archived <code>BreakStmt</code>\nAn archived <code>CallExpr</code>\nAn archived <code>Callee</code>\nAn archived <code>CatchClause</code>\nAn archived <code>Class</code>\nAn archived <code>ClassDecl</code>\nAn archived <code>ClassExpr</code>\nAn archived <code>ClassMember</code>\nAn archived <code>ClassMethod</code>\nAn archived <code>ClassProp</code>\nAn archived <code>ComputedPropName</code>\nAn archived <code>CondExpr</code>\nAn archived <code>Constructor</code>\nAn archived <code>ContinueStmt</code>\nAn archived <code>DebuggerStmt</code>\nAn archived <code>Decl</code>\nAn archived <code>Decorator</code>\nAn archived <code>DefaultDecl</code>\nAn archived <code>DoWhileStmt</code>\nAn archived <code>EmptyStmt</code>\nAn archived <code>ExportAll</code>\nAn archived <code>ExportDecl</code>\nAn archived <code>ExportDefaultDecl</code>\nAn archived <code>ExportDefaultExpr</code>\nAn archived <code>ExportDefaultSpecifier</code>\nAn archived <code>ExportNamedSpecifier</code>\nAn archived <code>ExportNamespaceSpecifier</code>\nAn archived <code>ExportSpecifier</code>\nAn archived <code>Expr</code>\nAn archived <code>ExprOrSpread</code>\nAn archived <code>ExprStmt</code>\nAn archived <code>FnDecl</code>\nAn archived <code>FnExpr</code>\nAn archived <code>ForHead</code>\nAn archived <code>ForInStmt</code>\nAn archived <code>ForOfStmt</code>\nAn archived <code>ForStmt</code>\nAn archived <code>Function</code>\nAn archived <code>GetterProp</code>\nAn archived <code>Ident</code>\nAn archived <code>IfStmt</code>\nAn archived <code>Import</code>\nAn archived <code>ImportDecl</code>\nAn archived <code>ImportDefaultSpecifier</code>\nAn archived <code>ImportNamedSpecifier</code>\nAn archived <code>ImportSpecifier</code>\nAn archived <code>ImportStarAsSpecifier</code>\nAn archived <code>Invalid</code>\nAn archived <code>JSXAttr</code>\nAn archived <code>JSXAttrName</code>\nAn archived <code>JSXAttrOrSpread</code>\nAn archived <code>JSXAttrValue</code>\nAn archived <code>JSXClosingElement</code>\nAn archived <code>JSXClosingFragment</code>\nAn archived <code>JSXElement</code>\nAn archived <code>JSXElementChild</code>\nAn archived <code>JSXElementName</code>\nAn archived <code>JSXEmptyExpr</code>\nAn archived <code>JSXExpr</code>\nAn archived <code>JSXExprContainer</code>\nAn archived <code>JSXFragment</code>\nAn archived <code>JSXMemberExpr</code>\nAn archived <code>JSXNamespacedName</code>\nAn archived <code>JSXObject</code>\nAn archived <code>JSXOpeningElement</code>\nAn archived <code>JSXOpeningFragment</code>\nAn archived <code>JSXSpreadChild</code>\nAn archived <code>JSXText</code>\nAn archived <code>Key</code>\nAn archived <code>KeyValuePatProp</code>\nAn archived <code>KeyValueProp</code>\nAn archived <code>LabeledStmt</code>\nAn archived <code>Lit</code>\nAn archived <code>MemberExpr</code>\nAn archived <code>MemberProp</code>\nAn archived <code>MetaPropExpr</code>\nAn archived <code>MetaPropKind</code>\nAn archived <code>MethodKind</code>\nAn archived <code>MethodProp</code>\nAn archived <code>Module</code>\nAn archived <code>ModuleDecl</code>\nAn archived <code>ModuleExportName</code>\nAn archived <code>ModuleItem</code>\nAn archived <code>NamedExport</code>\nAn archived <code>NewExpr</code>\nAn archived <code>Null</code>\nAn archived <code>Number</code>\nAn archived <code>ObjectLit</code>\nAn archived <code>ObjectPat</code>\nAn archived <code>ObjectPatProp</code>\nAn archived <code>OptCall</code>\nAn archived <code>OptChainBase</code>\nAn archived <code>OptChainExpr</code>\nAn archived <code>Param</code>\nAn archived <code>ParamOrTsParamProp</code>\nAn archived <code>ParenExpr</code>\nAn archived <code>Pat</code>\nAn archived <code>PrivateMethod</code>\nAn archived <code>PrivateName</code>\nAn archived <code>PrivateProp</code>\nAn archived <code>Program</code>\nAn archived <code>Prop</code>\nAn archived <code>PropName</code>\nAn archived <code>PropOrSpread</code>\nAn archived <code>Regex</code>\nAn archived <code>ReservedUnused</code>\nAn archived <code>RestPat</code>\nAn archived <code>ReturnStmt</code>\nAn archived <code>Script</code>\nAn archived <code>SeqExpr</code>\nAn archived <code>SetterProp</code>\nAn archived <code>SimpleAssignTarget</code>\nAn archived <code>SpreadElement</code>\nAn archived <code>StaticBlock</code>\nAn archived <code>Stmt</code>\nAn archived <code>Str</code>\nAn archived <code>Super</code>\nAn archived <code>SuperProp</code>\nAn archived <code>SuperPropExpr</code>\nAn archived <code>SwitchCase</code>\nAn archived <code>SwitchStmt</code>\nAn archived <code>TaggedTpl</code>\nAn archived <code>ThisExpr</code>\nAn archived <code>ThrowStmt</code>\nAn archived <code>Tpl</code>\nAn archived <code>TplElement</code>\nAn archived <code>TruePlusMinus</code>\nAn archived <code>TryStmt</code>\nAn archived <code>TsArrayType</code>\nAn archived <code>TsAsExpr</code>\nAn archived <code>TsCallSignatureDecl</code>\nAn archived <code>TsConditionalType</code>\nAn archived <code>TsConstAssertion</code>\nAn archived <code>TsConstructSignatureDecl</code>\nAn archived <code>TsConstructorType</code>\nAn archived <code>TsEntityName</code>\nAn archived <code>TsEnumDecl</code>\nAn archived <code>TsEnumMember</code>\nAn archived <code>TsEnumMemberId</code>\nAn archived <code>TsExportAssignment</code>\nAn archived <code>TsExprWithTypeArgs</code>\nAn archived <code>TsExternalModuleRef</code>\nAn archived <code>TsFnOrConstructorType</code>\nAn archived <code>TsFnParam</code>\nAn archived <code>TsFnType</code>\nAn archived <code>TsGetterSignature</code>\nAn archived <code>TsImportEqualsDecl</code>\nAn archived <code>TsImportType</code>\nAn archived <code>TsIndexSignature</code>\nAn archived <code>TsIndexedAccessType</code>\nAn archived <code>TsInferType</code>\nAn archived <code>TsInstantiation</code>\nAn archived <code>TsInterfaceBody</code>\nAn archived <code>TsInterfaceDecl</code>\nAn archived <code>TsIntersectionType</code>\nAn archived <code>TsKeywordType</code>\nAn archived <code>TsKeywordTypeKind</code>\nAn archived <code>TsLit</code>\nAn archived <code>TsLitType</code>\nAn archived <code>TsMappedType</code>\nAn archived <code>TsMethodSignature</code>\nAn archived <code>TsModuleBlock</code>\nAn archived <code>TsModuleDecl</code>\nAn archived <code>TsModuleName</code>\nAn archived <code>TsModuleRef</code>\nAn archived <code>TsNamespaceBody</code>\nAn archived <code>TsNamespaceDecl</code>\nAn archived <code>TsNamespaceExportDecl</code>\nAn archived <code>TsNonNullExpr</code>\nAn archived <code>TsOptionalType</code>\nAn archived <code>TsParamProp</code>\nAn archived <code>TsParamPropParam</code>\nAn archived <code>TsParenthesizedType</code>\nAn archived <code>TsPropertySignature</code>\nAn archived <code>TsQualifiedName</code>\nAn archived <code>TsRestType</code>\nAn archived <code>TsSatisfiesExpr</code>\nAn archived <code>TsSetterSignature</code>\nAn archived <code>TsThisType</code>\nAn archived <code>TsThisTypeOrIdent</code>\nAn archived <code>TsTplLitType</code>\nAn archived <code>TsTupleElement</code>\nAn archived <code>TsTupleType</code>\nAn archived <code>TsType</code>\nAn archived <code>TsTypeAliasDecl</code>\nAn archived <code>TsTypeAnn</code>\nAn archived <code>TsTypeAssertion</code>\nAn archived <code>TsTypeElement</code>\nAn archived <code>TsTypeLit</code>\nAn archived <code>TsTypeOperator</code>\nAn archived <code>TsTypeOperatorOp</code>\nAn archived <code>TsTypeParam</code>\nAn archived <code>TsTypeParamDecl</code>\nAn archived <code>TsTypeParamInstantiation</code>\nAn archived <code>TsTypePredicate</code>\nAn archived <code>TsTypeQuery</code>\nAn archived <code>TsTypeQueryExpr</code>\nAn archived <code>TsTypeRef</code>\nAn archived <code>TsUnionOrIntersectionType</code>\nAn archived <code>TsUnionType</code>\nAn archived <code>UnaryExpr</code>\nAn archived <code>UnaryOp</code>\nAn archived <code>UpdateExpr</code>\nAn archived <code>UpdateOp</code>\nAn archived <code>UsingDecl</code>\nAn archived <code>VarDecl</code>\nAn archived <code>VarDeclKind</code>\nAn archived <code>VarDeclOrExpr</code>\nAn archived <code>VarDeclarator</code>\nAn archived <code>WhileStmt</code>\nAn archived <code>WithStmt</code>\nAn archived <code>YieldExpr</code>\nThe resolver for <code>Expr::Array</code>\nThe archived counterpart of <code>Expr::Array</code>\nThe resolver for <code>AssignTargetPat::Array</code>\nThe archived counterpart of <code>AssignTargetPat::Array</code>\nThe archived counterpart of <code>Pat::Array</code>\nThe archived counterpart of <code>TsFnParam::Array</code>\nArray literal.\nThe resolver for an archived <code>ArrayLit</code>\nThe resolver for <code>Expr::Arrow</code>\nThe archived counterpart of <code>Expr::Arrow</code>\nThe resolver for an archived <code>ArrowExpr</code>\nThe resolver for <code>Expr::Assign</code>\nThe archived counterpart of <code>Expr::Assign</code>\nThe archived counterpart of <code>AssignOp::Assign</code>\n<code>=</code>\nThe archived counterpart of <code>Pat::Assign</code>\nThe archived counterpart of <code>ObjectPatProp::Assign</code>\nThe archived counterpart of <code>Prop::Assign</code>\nThis is <strong>invalid</strong> for object literal.\nThe archived counterpart of <code>TsParamPropParam::Assign</code>\nThe resolver for an archived <code>AssignExpr</code>\n<code>{key}</code> or <code>{key = value}</code>\nThe resolver for an archived <code>AssignTargetPat</code>\nThe resolver for an archived <code>AssignTarget</code>\nThe archived counterpart of <code>ClassMember::AutoAccessor</code>\nStage 3\nThe resolver for <code>Expr::Await</code>\nThe archived counterpart of <code>Expr::Await</code>\nThe resolver for an archived <code>AwaitExpr</code>\nThe archived counterpart of <code>UnaryOp::Bang</code>\n<code>!</code>\nThe archived counterpart of <code>Lit::BigInt</code>\nThe archived counterpart of <code>PropName::BigInt</code>\nThe archived counterpart of <code>TsLit::BigInt</code>\nThe resolver for <code>Expr::Bin</code>\nThe archived counterpart of <code>Expr::Bin</code>\nThe resolver for an archived <code>BinExpr</code>\nIdentifier used as a pattern.\nThe archived counterpart of <code>BinaryOp::BitAnd</code>\n<code>&amp;</code>\nThe archived counterpart of <code>AssignOp::BitAndAssign</code>\n<code>&amp;=</code>\nThe archived counterpart of <code>BinaryOp::BitOr</code>\n<code>|</code>\nThe archived counterpart of <code>AssignOp::BitOrAssign</code>\n<code>|=</code>\nThe archived counterpart of <code>BinaryOp::BitXor</code>\n<code>^</code>\nThe archived counterpart of <code>AssignOp::BitXorAssign</code>\n<code>^=</code>\nThe archived counterpart of <code>Stmt::Block</code>\nUse when only block statements are allowed.\nThe resolver for <code>BlockStmtOrExpr::BlockStmt</code>\nThe archived counterpart of <code>BlockStmtOrExpr::BlockStmt</code>\nThe resolver for an archived <code>BlockStmtOrExpr</code>\nA boolean literal.\nThe archived counterpart of <code>Lit::Bool</code>\nThe archived counterpart of <code>TsLit::Bool</code>\nThe archived counterpart of <code>Stmt::Break</code>\nThe resolver for <code>Expr::Call</code>\nThe archived counterpart of <code>Expr::Call</code>\nThe resolver for <code>OptChainBase::Call</code>\nThe archived counterpart of <code>OptChainBase::Call</code>\nThe resolver for an archived <code>CallExpr</code>\nThe resolver for an archived <code>Callee</code>\nThe archived counterpart of <code>Decl::Class</code>\nThe resolver for <code>Expr::Class</code>\nThe archived counterpart of <code>Expr::Class</code>\nThe archived counterpart of <code>DefaultDecl::Class</code>\nClass expression.\nThe resolver for an archived <code>ClassExpr</code>\nThe archived counterpart of <code>ClassMember::ClassProp</code>\nstage 0 / Typescript\nThe resolver for <code>MemberProp::Computed</code>\nThe archived counterpart of <code>MemberProp::Computed</code>\nThe resolver for <code>SuperProp::Computed</code>\nThe archived counterpart of <code>SuperProp::Computed</code>\nThe archived counterpart of <code>PropName::Computed</code>\nThe resolver for <code>Expr::Cond</code>\nThe archived counterpart of <code>Expr::Cond</code>\ntrue ? ‘a’ : ‘b’\nThe resolver for an archived <code>CondExpr</code>\nThe archived counterpart of <code>VarDeclKind::Const</code>\n<code>const</code>\nThe archived counterpart of <code>ClassMember::Constructor</code>\nThe archived counterpart of <code>Stmt::Continue</code>\nThe archived counterpart of <code>Stmt::Debugger</code>\nThe archived counterpart of <code>Stmt::Decl</code>\nThe archived counterpart of <code>ImportSpecifier::Default</code>\nThe archived counterpart of <code>ExportSpecifier::Default</code>\nThe archived counterpart of <code>UnaryOp::Delete</code>\n<code>delete</code>\nThe archived counterpart of <code>BinaryOp::Div</code>\n<code>/</code>\nThe archived counterpart of <code>AssignOp::DivAssign</code>\n<code>/=</code>\nThe archived counterpart of <code>Stmt::DoWhile</code>\nThe archived counterpart of <code>ClassMember::Empty</code>\nThe archived counterpart of <code>Stmt::Empty</code>\nThe archived counterpart of <code>BinaryOp::EqEq</code>\n<code>==</code>\nThe archived counterpart of <code>BinaryOp::EqEqEq</code>\n<code>===</code>\nNote: This type implements <code>Serailize</code> and <code>Deserialize</code> if …\nThe archived counterpart of <code>BinaryOp::Exp</code>\n<code>**</code>\nThe archived counterpart of <code>AssignOp::ExpAssign</code>\n<code>**=</code>\n<code>export * from &#39;mod&#39;</code>\nThe archived counterpart of <code>ModuleDecl::ExportAll</code>\nThe archived counterpart of <code>ModuleDecl::ExportDecl</code>\nThe archived counterpart of <code>ModuleDecl::ExportDefaultDecl</code>\nDefault exports other than <strong>direct</strong> function expression or …\nThe archived counterpart of <code>ModuleDecl::ExportDefaultExpr</code>\nThe archived counterpart of <code>ModuleDecl::ExportNamed</code>\n<code>export * as foo from &#39;src&#39;;</code>\nThe resolver for <code>Callee::Expr</code>\nThe archived counterpart of <code>Callee::Expr</code>\nThe resolver for <code>BlockStmtOrExpr::Expr</code>\nThe archived counterpart of <code>BlockStmtOrExpr::Expr</code>\nThe archived counterpart of <code>JSXExpr::Expr</code>\nThe archived counterpart of <code>Pat::Expr</code>\nOnly for for-in / for-of loops. This is <em>syntactically</em> …\nThe archived counterpart of <code>Stmt::Expr</code>\nThe archived counterpart of <code>VarDeclOrExpr::Expr</code>\nThe resolver for an archived <code>ExprOrSpread</code>\nThe resolver for an archived <code>Expr</code>\nThe archived counterpart of <code>Decl::Fn</code>\nThe resolver for <code>Expr::Fn</code>\nThe archived counterpart of <code>Expr::Fn</code>\nThe archived counterpart of <code>DefaultDecl::Fn</code>\nFunction expression.\nThe resolver for an archived <code>FnExpr</code>\nThe archived counterpart of <code>Stmt::For</code>\nA head for for-in and for-of loop.\nThe archived counterpart of <code>Stmt::ForIn</code>\nThe archived counterpart of <code>Stmt::ForOf</code>\nCommon parts of function and method.\nThe archived counterpart of <code>MethodKind::Getter</code>\nThe archived counterpart of <code>Prop::Getter</code>\nThe archived counterpart of <code>BinaryOp::Gt</code>\n<code>&gt;</code>\nThe archived counterpart of <code>BinaryOp::GtEq</code>\n<code>&gt;=</code>\nSee Ident for documentation.\nA complete identifier with span.\nThe resolver for <code>Expr::Ident</code>\nThe archived counterpart of <code>Expr::Ident</code>\nThe resolver for <code>MemberProp::Ident</code>\nThe archived counterpart of <code>MemberProp::Ident</code>\nThe resolver for <code>SuperProp::Ident</code>\nThe archived counterpart of <code>SuperProp::Ident</code>\nThe resolver for <code>SimpleAssignTarget::Ident</code>\nThe archived counterpart of <code>SimpleAssignTarget::Ident</code>\nNote: This type is to help implementing visitor and the …\nThe archived counterpart of <code>JSXObject::Ident</code>\nThe archived counterpart of <code>JSXElementName::Ident</code>\nThe archived counterpart of <code>JSXAttrName::Ident</code>\nThe archived counterpart of <code>ModuleExportName::Ident</code>\nThe archived counterpart of <code>Pat::Ident</code>\nThe archived counterpart of <code>PropName::Ident</code>\nThe archived counterpart of <code>TsParamPropParam::Ident</code>\nThe archived counterpart of <code>TsEntityName::Ident</code>\nThe archived counterpart of <code>TsFnParam::Ident</code>\nThe archived counterpart of <code>TsThisTypeOrIdent::Ident</code>\nThe archived counterpart of <code>TsEnumMemberId::Ident</code>\nThe archived counterpart of <code>TsModuleName::Ident</code>\nThe archived counterpart of <code>Stmt::If</code>\nThe resolver for <code>Callee::Import</code>\nThe archived counterpart of <code>Callee::Import</code>\nThe archived counterpart of <code>ModuleDecl::Import</code>\nThe archived counterpart of <code>TsTypeQueryExpr::Import</code>\ne.g. <code>import foo from &#39;mod.js&#39;</code>\nThe resolver for <code>MetaPropKind::ImportMeta</code>\nThe archived counterpart of <code>MetaPropKind::ImportMeta</code>\n<code>import.meta</code>\ne.g. local = foo, imported = None …\nThe resolver for an archived <code>Import</code>\ne.g. <code>import * as foo from &#39;mod.js&#39;</code>.\nAccording to the current spec <code>with</code> of crate::ImportDecl …\nThe archived counterpart of <code>BinaryOp::In</code>\n<code>in</code>\nThe archived counterpart of <code>BinaryOp::InstanceOf</code>\n<code>instanceof</code>\nRepresents a invalid node.\nThe resolver for <code>Expr::Invalid</code>\nThe archived counterpart of <code>Expr::Invalid</code>\nThe resolver for <code>AssignTargetPat::Invalid</code>\nThe archived counterpart of <code>AssignTargetPat::Invalid</code>\nThe resolver for <code>SimpleAssignTarget::Invalid</code>\nThe archived counterpart of <code>SimpleAssignTarget::Invalid</code>\nThe archived counterpart of <code>Pat::Invalid</code>\nThe resolver for an archived <code>Invalid</code>\nThe archived counterpart of <code>JSXAttrOrSpread::JSXAttr</code>\nThe resolver for <code>Expr::JSXElement</code>\nThe archived counterpart of <code>Expr::JSXElement</code>\nThe archived counterpart of <code>JSXAttrValue::JSXElement</code>\nThe archived counterpart of <code>JSXElementChild::JSXElement</code>\nThe resolver for <code>Expr::JSXEmpty</code>\nThe archived counterpart of <code>Expr::JSXEmpty</code>\nThe archived counterpart of <code>JSXExpr::JSXEmptyExpr</code>\nThe archived counterpart of <code>JSXAttrValue::JSXExprContainer</code>\nThe archived counterpart of …\nThe resolver for <code>Expr::JSXFragment</code>\nThe archived counterpart of <code>Expr::JSXFragment</code>\nThe archived counterpart of <code>JSXAttrValue::JSXFragment</code>\nThe archived counterpart of <code>JSXElementChild::JSXFragment</code>\nThe resolver for <code>Expr::JSXMember</code>\nThe archived counterpart of <code>Expr::JSXMember</code>\nThe archived counterpart of <code>JSXObject::JSXMemberExpr</code>\nThe archived counterpart of <code>JSXElementName::JSXMemberExpr</code>\nXML-based namespace syntax:\nThe resolver for <code>Expr::JSXNamespacedName</code>\nThe archived counterpart of <code>Expr::JSXNamespacedName</code>\nThe archived counterpart of …\nThe archived counterpart of <code>JSXAttrName::JSXNamespacedName</code>\nUsed for <code>obj</code> property of <code>JSXMemberExpr</code>.\nThe archived counterpart of <code>JSXElementChild::JSXSpreadChild</code>\nThe archived counterpart of <code>JSXElementChild::JSXText</code>\nThe archived counterpart of <code>Lit::JSXText</code>\nEither a private name or a public name.\nThe archived counterpart of <code>TsTypeOperatorOp::KeyOf</code>\n<code>keyof</code>\nThe archived counterpart of <code>ObjectPatProp::KeyValue</code>\nThe archived counterpart of <code>Prop::KeyValue</code>\n<code>key: value</code> in <code>{ key: value, }</code>\n<code>{key: value}</code>\nThe archived counterpart of <code>BinaryOp::LShift</code>\n<code>&lt;&lt;</code>\nThe archived counterpart of <code>AssignOp::LShiftAssign</code>\n<code>&lt;&lt;=</code>\nThe archived counterpart of <code>Stmt::Labeled</code>\nThe archived counterpart of <code>VarDeclKind::Let</code>\n<code>let</code>\nRepresents the formatting rule for a list of nodes.\nThe resolver for <code>Expr::Lit</code>\nThe archived counterpart of <code>Expr::Lit</code>\nThe archived counterpart of <code>JSXAttrValue::Lit</code>\nThe archived counterpart of <code>BinaryOp::LogicalAnd</code>\n<code>&amp;&amp;</code>\nThe archived counterpart of <code>BinaryOp::LogicalOr</code>\n<code>||</code>\nThe archived counterpart of <code>BinaryOp::Lt</code>\n<code>&lt;</code>\nThe archived counterpart of <code>BinaryOp::LtEq</code>\n<code>&lt;=</code>\nThe resolver for <code>Expr::Member</code>\nThe archived counterpart of <code>Expr::Member</code>\nA member expression. If computed is true, the node …\nThe resolver for <code>SimpleAssignTarget::Member</code>\nThe archived counterpart of <code>SimpleAssignTarget::Member</code>\nThe resolver for <code>OptChainBase::Member</code>\nThe archived counterpart of <code>OptChainBase::Member</code>\nThe resolver for an archived <code>MemberExpr</code>\nThe resolver for an archived <code>MemberProp</code>\nThe resolver for <code>Expr::MetaProp</code>\nThe archived counterpart of <code>Expr::MetaProp</code>\nThe resolver for an archived <code>MetaPropExpr</code>\nThe resolver for an archived <code>MetaPropKind</code>\nThe archived counterpart of <code>ClassMember::Method</code>\n<code>es2015</code>\nThe archived counterpart of <code>MethodKind::Method</code>\nThe archived counterpart of <code>Prop::Method</code>\nThe archived counterpart of <code>UnaryOp::Minus</code>\n<code>-</code>\nThe archived counterpart of <code>TruePlusMinus::Minus</code>\nThe archived counterpart of <code>UpdateOp::MinusMinus</code>\n<code>--</code>\nThe archived counterpart of <code>BinaryOp::Mod</code>\n<code>%</code>\nThe archived counterpart of <code>AssignOp::ModAssign</code>\n<code>%=</code>\nThe archived counterpart of <code>Program::Module</code>\nThe archived counterpart of <code>ModuleItem::ModuleDecl</code>\nThe archived counterpart of <code>BinaryOp::Mul</code>\n<code>*</code>\nThe archived counterpart of <code>AssignOp::MulAssign</code>\n<code>*=</code>\nThe archived counterpart of <code>ImportSpecifier::Named</code>\nThe archived counterpart of <code>ExportSpecifier::Named</code>\n<code>export { foo } from &#39;mod&#39;</code> <code>export { foo as bar } from &#39;mod&#39;</code>\nThe archived counterpart of <code>ImportSpecifier::Namespace</code>\nThe archived counterpart of <code>ExportSpecifier::Namespace</code>\nThe resolver for <code>Expr::New</code>\nThe archived counterpart of <code>Expr::New</code>\n<code>new Cat()</code>\nThe resolver for an archived <code>NewExpr</code>\nThe resolver for <code>MetaPropKind::NewTarget</code>\nThe archived counterpart of <code>MetaPropKind::NewTarget</code>\n<code>new.target</code>\nThe archived counterpart of <code>BinaryOp::NotEq</code>\n<code>!=</code>\nThe archived counterpart of <code>BinaryOp::NotEqEq</code>\n<code>!==</code>\nThe archived counterpart of <code>Lit::Null</code>\nThe archived counterpart of <code>AssignOp::NullishAssign</code>\n<code>??=</code>\nThe archived counterpart of <code>BinaryOp::NullishCoalescing</code>\n<code>??</code>\nThe archived counterpart of <code>Lit::Num</code>\nThe archived counterpart of <code>PropName::Num</code>\nNumeric literal.\nA numeric literal.\nThe archived counterpart of <code>TsLit::Number</code>\nThe resolver for <code>Expr::Object</code>\nThe archived counterpart of <code>Expr::Object</code>\nThe resolver for <code>AssignTargetPat::Object</code>\nThe archived counterpart of <code>AssignTargetPat::Object</code>\nThe archived counterpart of <code>Pat::Object</code>\nThe archived counterpart of <code>TsFnParam::Object</code>\nObject literal.\nThe resolver for an archived <code>ObjectLit</code>\nThe resolver for an archived <code>OptCall</code>\nThe resolver for <code>Expr::OptChain</code>\nThe archived counterpart of <code>Expr::OptChain</code>\nThe resolver for <code>SimpleAssignTarget::OptChain</code>\nThe archived counterpart of <code>SimpleAssignTarget::OptChain</code>\nThe resolver for an archived <code>OptChainBase</code>\nThe resolver for an archived <code>OptChainExpr</code>\nThe archived counterpart of <code>AssignOp::OrAssign</code>\n<code>||=</code>\nThe archived counterpart of <code>ParamOrTsParamProp::Param</code>\nThe resolver for <code>Expr::Paren</code>\nThe archived counterpart of <code>Expr::Paren</code>\nThe resolver for <code>SimpleAssignTarget::Paren</code>\nThe archived counterpart of <code>SimpleAssignTarget::Paren</code>\nThe resolver for an archived <code>ParenExpr</code>\nThe resolver for <code>AssignTarget::Pat</code>\nThe archived counterpart of <code>AssignTarget::Pat</code>\nThe archived counterpart of <code>ForHead::Pat</code>\nThe archived counterpart of <code>UnaryOp::Plus</code>\n<code>+</code>\nThe archived counterpart of <code>TruePlusMinus::Plus</code>\nThe archived counterpart of <code>UpdateOp::PlusPlus</code>\n<code>++</code>\nThe archived counterpart of <code>Key::Private</code>\nThe archived counterpart of <code>Accessibility::Private</code>\nThe archived counterpart of <code>ClassMember::PrivateMethod</code>\nThe resolver for <code>Expr::PrivateName</code>\nThe archived counterpart of <code>Expr::PrivateName</code>\nThe resolver for <code>MemberProp::PrivateName</code>\nThe archived counterpart of <code>MemberProp::PrivateName</code>\nThe archived counterpart of <code>ClassMember::PrivateProp</code>\nThe resolver for <code>PropOrSpread::Prop</code>\nThe archived counterpart of <code>PropOrSpread::Prop</code>\nThe resolver for an archived <code>PropOrSpread</code>\nThe archived counterpart of <code>Accessibility::Protected</code>\nThe archived counterpart of <code>Key::Public</code>\nThe archived counterpart of <code>Accessibility::Public</code>\nThe archived counterpart of <code>BinaryOp::RShift</code>\n<code>&gt;&gt;</code>\nThe archived counterpart of <code>AssignOp::RShiftAssign</code>\n<code>&gt;&gt;=</code>\nThe archived counterpart of <code>TsTypeOperatorOp::ReadOnly</code>\n<code>readonly</code>\nThe archived counterpart of <code>Lit::Regex</code>\nThe archived counterpart of <code>Pat::Rest</code>\nThe archived counterpart of <code>ObjectPatProp::Rest</code>\nThe archived counterpart of <code>TsFnParam::Rest</code>\nEsTree <code>RestElement</code>\nThe archived counterpart of <code>Stmt::Return</code>\nThe archived counterpart of <code>Program::Script</code>\nThe resolver for <code>Expr::Seq</code>\nThe archived counterpart of <code>Expr::Seq</code>\nThe resolver for an archived <code>SeqExpr</code>\nThe archived counterpart of <code>MethodKind::Setter</code>\nThe archived counterpart of <code>Prop::Setter</code>\nThe archived counterpart of <code>Prop::Shorthand</code>\n<code>a</code> in <code>{ a, }</code>\nThe resolver for <code>AssignTarget::Simple</code>\nThe archived counterpart of <code>AssignTarget::Simple</code>\nThe resolver for an archived <code>SimpleAssignTarget</code>\nThe resolver for <code>PropOrSpread::Spread</code>\nThe archived counterpart of <code>PropOrSpread::Spread</code>\nSpread properties, e.g., <code>{a: 1, ...obj, b: 2}</code>.\nThe archived counterpart of <code>JSXAttrOrSpread::SpreadElement</code>\nThe resolver for an archived <code>SpreadElement</code>\nThe archived counterpart of <code>ClassMember::StaticBlock</code>\nStage 3\nThe archived counterpart of <code>ModuleItem::Stmt</code>\nA string literal.\nThe archived counterpart of <code>Lit::Str</code>\nThe archived counterpart of <code>ModuleExportName::Str</code>\nThe archived counterpart of <code>PropName::Str</code>\nString literal.\nThe archived counterpart of <code>TsLit::Str</code>\nThe archived counterpart of <code>TsEnumMemberId::Str</code>\nThe archived counterpart of <code>TsModuleName::Str</code>\nThe archived counterpart of <code>BinaryOp::Sub</code>\n<code>-</code>\nThe archived counterpart of <code>AssignOp::SubAssign</code>\n<code>-=</code>\nThe resolver for <code>Callee::Super</code>\nThe archived counterpart of <code>Callee::Super</code>\nThe resolver for <code>Expr::SuperProp</code>\nThe archived counterpart of <code>Expr::SuperProp</code>\nThe resolver for <code>SimpleAssignTarget::SuperProp</code>\nThe archived counterpart of <code>SimpleAssignTarget::SuperProp</code>\nThe resolver for an archived <code>SuperPropExpr</code>\nThe resolver for an archived <code>SuperProp</code>\nThe resolver for an archived <code>Super</code>\nThe archived counterpart of <code>Stmt::Switch</code>\nThe resolver for <code>Expr::TaggedTpl</code>\nThe archived counterpart of <code>Expr::TaggedTpl</code>\nThe resolver for an archived <code>TaggedTpl</code>\nThe resolver for <code>Expr::This</code>\nThe archived counterpart of <code>Expr::This</code>\nThe resolver for an archived <code>ThisExpr</code>\nThe archived counterpart of <code>Stmt::Throw</code>\nThe archived counterpart of <code>UnaryOp::Tilde</code>\n<code>~</code>\nThe resolver for <code>Expr::Tpl</code>\nThe archived counterpart of <code>Expr::Tpl</code>\nThe archived counterpart of <code>TsLit::Tpl</code>\nThe resolver for an archived <code>TplElement</code>\nThe resolver for an archived <code>Tpl</code>\nThe archived counterpart of <code>TruePlusMinus::True</code>\nThe archived counterpart of <code>Stmt::Try</code>\nA try statement. If handler is null then finalizer must be …\nThe archived counterpart of <code>TsKeywordTypeKind::TsAnyKeyword</code>\nThe archived counterpart of <code>TsType::TsArrayType</code>\nThe resolver for <code>Expr::TsAs</code>\nThe archived counterpart of <code>Expr::TsAs</code>\nThe resolver for <code>SimpleAssignTarget::TsAs</code>\nThe archived counterpart of <code>SimpleAssignTarget::TsAs</code>\nThe archived counterpart of …\nThe archived counterpart of …\nThe archived counterpart of …\nThe archived counterpart of <code>TsType::TsConditionalType</code>\nThe resolver for <code>Expr::TsConstAssertion</code>\nThe archived counterpart of <code>Expr::TsConstAssertion</code>\nThe archived counterpart of …\nThe archived counterpart of …\nThe archived counterpart of <code>TsTypeQueryExpr::TsEntityName</code>\nThe archived counterpart of <code>TsModuleRef::TsEntityName</code>\nThe archived counterpart of <code>Decl::TsEnum</code>\nInvalid: Ident with empty symbol.\nTypeScript’s own parser uses ExportAssignment for both …\nThe archived counterpart of <code>ModuleDecl::TsExportAssignment</code>\nThe archived counterpart of …\nThe archived counterpart of <code>TsType::TsFnOrConstructorType</code>\nThe archived counterpart of <code>TsFnOrConstructorType::TsFnType</code>\nThe archived counterpart of …\nThe archived counterpart of <code>ModuleDecl::TsImportEquals</code>\nThe archived counterpart of <code>TsType::TsImportType</code>\nThe archived counterpart of <code>ClassMember::TsIndexSignature</code>\nThe archived counterpart of <code>TsTypeElement::TsIndexSignature</code>\nThe archived counterpart of <code>TsType::TsIndexedAccessType</code>\nThe archived counterpart of <code>TsType::TsInferType</code>\nThe resolver for <code>Expr::TsInstantiation</code>\nThe archived counterpart of <code>Expr::TsInstantiation</code>\nThe resolver for <code>SimpleAssignTarget::TsInstantiation</code>\nThe archived counterpart of …\nThe archived counterpart of <code>Decl::TsInterface</code>\nThe archived counterpart of <code>DefaultDecl::TsInterfaceDecl</code>\nThe archived counterpart of …\nThe archived counterpart of …\nThe archived counterpart of <code>TsType::TsKeywordType</code>\nThe archived counterpart of <code>TsType::TsLitType</code>\nThe archived counterpart of <code>TsType::TsMappedType</code>\nThe archived counterpart of …\nThe archived counterpart of <code>Decl::TsModule</code>\nThe archived counterpart of <code>TsNamespaceBody::TsModuleBlock</code>\n<code>namespace A.B { }</code> is a namespace named <code>A</code> with another …\nThe archived counterpart of …\nThe archived counterpart of <code>ModuleDecl::TsNamespaceExport</code>\nThe archived counterpart of …\nThe resolver for <code>Expr::TsNonNull</code>\nThe archived counterpart of <code>Expr::TsNonNull</code>\nThe resolver for <code>SimpleAssignTarget::TsNonNull</code>\nThe archived counterpart of <code>SimpleAssignTarget::TsNonNull</code>\nThe archived counterpart of …\nThe archived counterpart of …\nThe archived counterpart of …\nThe archived counterpart of <code>TsType::TsOptionalType</code>\nThe archived counterpart of <code>ParamOrTsParamProp::TsParamProp</code>\nThe archived counterpart of <code>TsType::TsParenthesizedType</code>\nThe archived counterpart of …\nThe archived counterpart of <code>TsEntityName::TsQualifiedName</code>\nThe archived counterpart of <code>TsType::TsRestType</code>\nThe resolver for <code>Expr::TsSatisfies</code>\nThe archived counterpart of <code>Expr::TsSatisfies</code>\nThe resolver for <code>SimpleAssignTarget::TsSatisfies</code>\nThe archived counterpart of <code>SimpleAssignTarget::TsSatisfies</code>\nThe archived counterpart of …\nThe archived counterpart of …\nThe archived counterpart of …\nThe archived counterpart of <code>TsType::TsThisType</code>\nThe archived counterpart of <code>TsThisTypeOrIdent::TsThisType</code>\nThe archived counterpart of <code>TsType::TsTupleType</code>\nThe archived counterpart of <code>Decl::TsTypeAlias</code>\nThe resolver for <code>Expr::TsTypeAssertion</code>\nThe archived counterpart of <code>Expr::TsTypeAssertion</code>\nThe resolver for <code>SimpleAssignTarget::TsTypeAssertion</code>\nThe archived counterpart of …\nThe archived counterpart of <code>TsType::TsTypeLit</code>\nThe archived counterpart of <code>TsType::TsTypeOperator</code>\nThe archived counterpart of <code>TsType::TsTypePredicate</code>\n<code>typeof</code> operator\nThe archived counterpart of <code>TsType::TsTypeQuery</code>\nThe archived counterpart of <code>TsType::TsTypeRef</code>\nThe archived counterpart of …\nThe archived counterpart of …\nThe archived counterpart of …\nThe archived counterpart of …\nThe archived counterpart of …\nThe archived counterpart of <code>UnaryOp::TypeOf</code>\n<code>typeof</code>\nThe resolver for <code>Expr::Unary</code>\nThe archived counterpart of <code>Expr::Unary</code>\nThe resolver for an archived <code>UnaryExpr</code>\nThe archived counterpart of <code>TsTypeOperatorOp::Unique</code>\n<code>unique</code>\nThe resolver for <code>Expr::Update</code>\nThe archived counterpart of <code>Expr::Update</code>\n<code>++v</code>, <code>--v</code>, <code>v++</code>, <code>v--</code>\nThe resolver for an archived <code>UpdateExpr</code>\nThe archived counterpart of <code>Decl::Using</code>\nThe archived counterpart of <code>ForHead::UsingDecl</code>\nThe archived counterpart of <code>Decl::Var</code>\nThe archived counterpart of <code>VarDeclKind::Var</code>\n<code>var</code>\nThe archived counterpart of <code>ForHead::VarDecl</code>\nThe archived counterpart of <code>VarDeclOrExpr::VarDecl</code>\nThe archived counterpart of <code>UnaryOp::Void</code>\n<code>void</code>\nThe archived counterpart of <code>Stmt::While</code>\nThe archived counterpart of <code>Stmt::With</code>\nThe resolver for <code>Expr::Yield</code>\nThe archived counterpart of <code>Expr::Yield</code>\nThe resolver for an archived <code>YieldExpr</code>\nThe archived counterpart of <code>BinaryOp::ZeroFillRShift</code>\n<code>&gt;&gt;&gt;</code>\nThe archived counterpart of <code>AssignOp::ZeroFillRShiftAssign</code>\n<code>&gt;&gt;&gt;=</code>\nThe archived counterpart of <code>ClassProp::accessibility</code>\nTypescript extension.\nThe archived counterpart of <code>PrivateProp::accessibility</code>\nTypescript extension.\nThe archived counterpart of <code>ClassMethod::accessibility</code>\nTypescript extension.\nThe archived counterpart of <code>PrivateMethod::accessibility</code>\nTypescript extension.\nThe archived counterpart of <code>Constructor::accessibility</code>\nThe archived counterpart of <code>AutoAccessor::accessibility</code>\nTypescript extension.\nThe archived counterpart of <code>TsParamProp::accessibility</code>\nAt least one of <code>accessibility</code> or <code>readonly</code> must be set.\nThe archived counterpart of <code>CondExpr::alt</code>\nThe archived counterpart of <code>IfStmt::alt</code>\nThe archived counterpart of <code>UnaryExpr::arg</code>\nThe archived counterpart of <code>UpdateExpr::arg</code>\nThe archived counterpart of <code>YieldExpr::arg</code>\nThe archived counterpart of <code>AwaitExpr::arg</code>\nThe archived counterpart of <code>RestPat::arg</code>\nThe archived counterpart of <code>ReturnStmt::arg</code>\nThe archived counterpart of <code>ThrowStmt::arg</code>\nThe archived counterpart of <code>TsImportType::arg</code>\nThe archived counterpart of <code>CallExpr::args</code>\nThe archived counterpart of <code>NewExpr::args</code>\nThe archived counterpart of <code>OptCall::args</code>\nThe archived counterpart of <code>TsTypePredicate::asserts</code>\nThe archived counterpart of <code>JSXOpeningElement::attrs</code>\nThe archived counterpart of <code>OptChainExpr::base</code>\nThis is boxed to reduce the type size of Expr.\nThe archived counterpart of <code>TryStmt::block</code>\nThe archived counterpart of <code>Class::body</code>\nThe archived counterpart of <code>Constructor::body</code>\nThe archived counterpart of <code>StaticBlock::body</code>\nThe archived counterpart of <code>ArrowExpr::body</code>\nThis is boxed to reduce the type size of Expr.\nThe archived counterpart of <code>Function::body</code>\nThe archived counterpart of <code>ReservedUnused::body</code>\nThe archived counterpart of <code>Module::body</code>\nThe archived counterpart of <code>Script::body</code>\nThe archived counterpart of <code>GetterProp::body</code>\nThe archived counterpart of <code>SetterProp::body</code>\nThe archived counterpart of <code>WithStmt::body</code>\nThe archived counterpart of <code>LabeledStmt::body</code>\nThe archived counterpart of <code>WhileStmt::body</code>\nThe archived counterpart of <code>DoWhileStmt::body</code>\nThe archived counterpart of <code>ForStmt::body</code>\nThe archived counterpart of <code>ForInStmt::body</code>\nThe archived counterpart of <code>ForOfStmt::body</code>\nThe archived counterpart of <code>CatchClause::body</code>\nThe archived counterpart of <code>TsInterfaceDecl::body</code>\nThe archived counterpart of <code>TsInterfaceBody::body</code>\nThe archived counterpart of <code>TsModuleDecl::body</code>\nThe archived counterpart of <code>TsModuleBlock::body</code>\nThe archived counterpart of <code>TsNamespaceDecl::body</code>\nThe archived counterpart of <code>CallExpr::callee</code>\nThe archived counterpart of <code>NewExpr::callee</code>\nThe archived counterpart of <code>OptCall::callee</code>\nThe archived counterpart of <code>SwitchStmt::cases</code>\nThe archived counterpart of <code>TsConditionalType::check_type</code>\nThe archived counterpart of <code>JSXElement::children</code>\nThe archived counterpart of <code>JSXFragment::children</code>\nThe archived counterpart of <code>ClassDecl::class</code>\nThe archived counterpart of <code>ClassExpr::class</code>\nThe archived counterpart of <code>JSXElement::closing</code>\nThe archived counterpart of <code>JSXFragment::closing</code>\nGets a custom text range to use when emitting comments.\nThe archived counterpart of <code>TsPropertySignature::computed</code>\nThe archived counterpart of <code>TsGetterSignature::computed</code>\nThe archived counterpart of <code>TsSetterSignature::computed</code>\nThe archived counterpart of <code>TsMethodSignature::computed</code>\nThe archived counterpart of <code>CondExpr::cons</code>\nThe archived counterpart of <code>IfStmt::cons</code>\nThe archived counterpart of <code>SwitchCase::cons</code>\nThe archived counterpart of <code>TsTypeParam::constraint</code>\nThe archived counterpart of <code>TplElement::cooked</code>\nThis value is never used by <code>swc_ecma_codegen</code>, and this …\nThe archived counterpart of <code>ExportDecl::decl</code>\nThe archived counterpart of <code>ExportDefaultDecl::decl</code>\nThe archived counterpart of <code>ClassProp::declare</code>\nThe archived counterpart of <code>FnDecl::declare</code>\nThe archived counterpart of <code>ClassDecl::declare</code>\nThe archived counterpart of <code>VarDecl::declare</code>\nThe archived counterpart of <code>TsInterfaceDecl::declare</code>\nThe archived counterpart of <code>TsTypeAliasDecl::declare</code>\nThe archived counterpart of <code>TsEnumDecl::declare</code>\nThe archived counterpart of <code>TsModuleDecl::declare</code>\nThe archived counterpart of <code>TsNamespaceDecl::declare</code>\nThe archived counterpart of <code>VarDecl::decls</code>\nThe archived counterpart of <code>UsingDecl::decls</code>\nThe archived counterpart of <code>Class::decorators</code>\nThe archived counterpart of <code>ClassProp::decorators</code>\nThe archived counterpart of <code>PrivateProp::decorators</code>\nThe archived counterpart of <code>AutoAccessor::decorators</code>\nThe archived counterpart of <code>Function::decorators</code>\nThe archived counterpart of <code>Param::decorators</code>\nThe archived counterpart of <code>TsParamProp::decorators</code>\nThe archived counterpart of <code>TsTypeParam::default</code>\nThe archived counterpart of <code>ClassProp::definite</code>\nThe archived counterpart of <code>PrivateProp::definite</code>\nThe archived counterpart of <code>AutoAccessor::definite</code>\nThe archived counterpart of <code>VarDeclarator::definite</code>\nTypescript only\nThe archived counterpart of <code>YieldExpr::delegate</code>\nThe archived counterpart of <code>SwitchStmt::discriminant</code>\nThe archived counterpart of <code>SpreadElement::dot3_token</code>\nThe archived counterpart of <code>RestPat::dot3_token</code>\nThe archived counterpart of <code>TsArrayType::elem_type</code>\nThe archived counterpart of <code>TsTupleType::elem_types</code>\nThe archived counterpart of <code>ArrayLit::elems</code>\nThe archived counterpart of <code>ArrayPat::elems</code>\nThe archived counterpart of <code>Regex::exp</code>\nThe archived counterpart of …\nThe archived counterpart of <code>ExportNamedSpecifier::exported</code>\n<code>Some(bar)</code> in <code>export { foo as bar }</code>\nThe archived counterpart of <code>Decorator::expr</code>\nThe archived counterpart of <code>SpreadElement::expr</code>\nThe archived counterpart of <code>ParenExpr::expr</code>\nThe archived counterpart of <code>ExprOrSpread::expr</code>\nThe archived counterpart of <code>JSXExprContainer::expr</code>\nThe archived counterpart of <code>JSXSpreadChild::expr</code>\nThe archived counterpart of <code>ExportDefaultExpr::expr</code>\nThe archived counterpart of <code>ComputedPropName::expr</code>\nThe archived counterpart of <code>ExprStmt::expr</code>\nThe archived counterpart of <code>TsExprWithTypeArgs::expr</code>\nThe archived counterpart of <code>TsExternalModuleRef::expr</code>\nThe archived counterpart of <code>TsExportAssignment::expr</code>\nThe archived counterpart of <code>TsAsExpr::expr</code>\nThe archived counterpart of <code>TsTypeAssertion::expr</code>\nThe archived counterpart of <code>TsNonNullExpr::expr</code>\nThe archived counterpart of <code>TsSatisfiesExpr::expr</code>\nThe archived counterpart of <code>TsConstAssertion::expr</code>\nThe archived counterpart of <code>TsInstantiation::expr</code>\nThe archived counterpart of <code>TsTypeQuery::expr_name</code>\nThe archived counterpart of <code>SeqExpr::exprs</code>\nThe archived counterpart of <code>Tpl::exprs</code>\nThe archived counterpart of <code>TsInterfaceDecl::extends</code>\nThe archived counterpart of <code>TsConditionalType::extends_type</code>\nThe archived counterpart of <code>TsConditionalType::false_type</code>\nThe archived counterpart of <code>TryStmt::finalizer</code>\nThe archived counterpart of <code>Regex::flags</code>\nThe archived counterpart of <code>ClassMethod::function</code>\nThe archived counterpart of <code>PrivateMethod::function</code>\nThe archived counterpart of <code>FnDecl::function</code>\nThe archived counterpart of <code>FnExpr::function</code>\nThe archived counterpart of <code>MethodProp::function</code>\nThe archived counterpart of <code>TsModuleDecl::global</code>\nIn TypeScript, this is only available through<code>node.flags</code>.\nThe archived counterpart of <code>TsNamespaceDecl::global</code>\nIn TypeScript, this is only available through<code>node.flags</code>.\nThe archived counterpart of <code>TryStmt::handler</code>\nThe archived counterpart of <code>BindingIdent::id</code>\nThe archived counterpart of <code>PrivateName::id</code>\nThe archived counterpart of <code>TsInterfaceDecl::id</code>\nThe archived counterpart of <code>TsTypeAliasDecl::id</code>\nThe archived counterpart of <code>TsEnumDecl::id</code>\nThe archived counterpart of <code>TsEnumMember::id</code>\nThe archived counterpart of <code>TsModuleDecl::id</code>\nThe archived counterpart of <code>TsNamespaceDecl::id</code>\nThe archived counterpart of <code>TsImportEqualsDecl::id</code>\nThe archived counterpart of <code>TsNamespaceExportDecl::id</code>\nThe archived counterpart of <code>FnDecl::ident</code>\nThe archived counterpart of <code>ClassDecl::ident</code>\nThe archived counterpart of <code>FnExpr::ident</code>\nThe archived counterpart of <code>ClassExpr::ident</code>\nThe archived counterpart of <code>Class::implements</code>\nTypescript extension.\nThe archived counterpart of <code>ImportNamedSpecifier::imported</code>\nThe archived counterpart of <code>TsIndexedAccessType::index_type</code>\nThe archived counterpart of <code>VarDeclarator::init</code>\nInitialization expression.\nThe archived counterpart of <code>ForStmt::init</code>\nThe archived counterpart of <code>TsEnumMember::init</code>\nThe archived counterpart of <code>Class::is_abstract</code>\nThe archived counterpart of <code>ClassProp::is_abstract</code>\nTypescript extension.\nThe archived counterpart of <code>ClassMethod::is_abstract</code>\nTypescript extension.\nThe archived counterpart of <code>PrivateMethod::is_abstract</code>\nTypescript extension.\nThe archived counterpart of <code>AutoAccessor::is_abstract</code>\nThe archived counterpart of <code>TsConstructorType::is_abstract</code>\nThe archived counterpart of <code>ArrowExpr::is_async</code>\nThe archived counterpart of <code>Function::is_async</code>\nif it’s an async function.\nThe archived counterpart of <code>UsingDecl::is_await</code>\nThe archived counterpart of <code>ForOfStmt::is_await</code>\nSpan of the await token.\nThe archived counterpart of <code>TsTypeParam::is_const</code>\nThe archived counterpart of <code>TsEnumDecl::is_const</code>\nThe archived counterpart of <code>TsImportEqualsDecl::is_export</code>\nThe archived counterpart of <code>ArrowExpr::is_generator</code>\nThe archived counterpart of <code>Function::is_generator</code>\nif it’s a generator.\nThe archived counterpart of <code>TsTypeParam::is_in</code>\nThe archived counterpart of <code>ClassProp::is_optional</code>\nThe archived counterpart of <code>PrivateProp::is_optional</code>\nThe archived counterpart of <code>ClassMethod::is_optional</code>\nThe archived counterpart of <code>PrivateMethod::is_optional</code>\nThe archived counterpart of <code>Constructor::is_optional</code>\nThe archived counterpart of <code>TsTypeParam::is_out</code>\nThe archived counterpart of <code>ClassProp::is_override</code>\nThe archived counterpart of <code>PrivateProp::is_override</code>\nThe archived counterpart of <code>ClassMethod::is_override</code>\nThe archived counterpart of <code>PrivateMethod::is_override</code>\nThe archived counterpart of <code>AutoAccessor::is_override</code>\nThe archived counterpart of <code>TsParamProp::is_override</code>\nThe archived counterpart of <code>ClassProp::is_static</code>\nThe archived counterpart of <code>PrivateProp::is_static</code>\nThe archived counterpart of <code>ClassMethod::is_static</code>\nThe archived counterpart of <code>PrivateMethod::is_static</code>\nThe archived counterpart of <code>AutoAccessor::is_static</code>\nThe archived counterpart of <code>TsIndexSignature::is_static</code>\nThe archived counterpart of …\nThe archived counterpart of …\n<code>type</code> in <code>export { type foo as bar }</code>\nThe archived counterpart of …\nThe archived counterpart of <code>ClassProp::key</code>\nThe archived counterpart of <code>PrivateProp::key</code>\nThe archived counterpart of <code>ClassMethod::key</code>\nThe archived counterpart of <code>PrivateMethod::key</code>\nThe archived counterpart of <code>Constructor::key</code>\nThe archived counterpart of <code>AutoAccessor::key</code>\nThe archived counterpart of <code>KeyValuePatProp::key</code>\nThe archived counterpart of <code>AssignPatProp::key</code>\nNote: This type is to help implementing visitor and the …\nThe archived counterpart of <code>KeyValueProp::key</code>\nThe archived counterpart of <code>AssignProp::key</code>\nThe archived counterpart of <code>GetterProp::key</code>\nThe archived counterpart of <code>SetterProp::key</code>\nThe archived counterpart of <code>MethodProp::key</code>\nThe archived counterpart of <code>TsPropertySignature::key</code>\nThe archived counterpart of <code>TsGetterSignature::key</code>\nThe archived counterpart of <code>TsSetterSignature::key</code>\nThe archived counterpart of <code>TsMethodSignature::key</code>\nThe archived counterpart of <code>ClassMethod::kind</code>\nThe archived counterpart of <code>PrivateMethod::kind</code>\nThe archived counterpart of <code>VarDecl::kind</code>\nThe archived counterpart of <code>MetaPropExpr::kind</code>\nThe archived counterpart of <code>TsKeywordType::kind</code>\nThe archived counterpart of <code>LabeledStmt::label</code>\nThe archived counterpart of <code>BreakStmt::label</code>\nThe archived counterpart of <code>ContinueStmt::label</code>\nThe archived counterpart of <code>TsTupleElement::label</code>\n<code>Ident</code> or <code>RestPat { arg: Ident }</code>\nThe archived counterpart of <code>BinExpr::left</code>\nThe archived counterpart of <code>AssignExpr::left</code>\nThe archived counterpart of <code>AssignPat::left</code>\nThe archived counterpart of <code>ForInStmt::left</code>\nThe archived counterpart of <code>ForOfStmt::left</code>\nThe archived counterpart of <code>TsQualifiedName::left</code>\nThe archived counterpart of <code>TsLitType::lit</code>\nThe archived counterpart of <code>ImportDefaultSpecifier::local</code>\nThe archived counterpart of <code>ImportStarAsSpecifier::local</code>\nThe archived counterpart of <code>ImportNamedSpecifier::local</code>\nThe archived counterpart of <code>TsTypeLit::members</code>\nThe archived counterpart of <code>TsEnumDecl::members</code>\nThe archived counterpart of <code>TsImportEqualsDecl::module_ref</code>\nThe archived counterpart of <code>VarDeclarator::name</code>\nThe archived counterpart of <code>JSXNamespacedName::name</code>\nThe archived counterpart of <code>JSXOpeningElement::name</code>\nThe archived counterpart of <code>JSXClosingElement::name</code>\nThe archived counterpart of <code>JSXAttr::name</code>\nThe archived counterpart of <code>ExportNamespaceSpecifier::name</code>\nThe archived counterpart of <code>TsTypeParam::name</code>\nThe archived counterpart of <code>TsMappedType::name_type</code>\nThe archived counterpart of <code>JSXNamespacedName::ns</code>\nThe archived counterpart of <code>MemberExpr::obj</code>\nThe archived counterpart of <code>SuperPropExpr::obj</code>\nThe archived counterpart of <code>JSXMemberExpr::obj</code>\nThe archived counterpart of <code>WithStmt::obj</code>\nThe archived counterpart of <code>TsIndexedAccessType::obj_type</code>\nThe archived counterpart of <code>UnaryExpr::op</code>\nThe archived counterpart of <code>UpdateExpr::op</code>\nThe archived counterpart of <code>BinExpr::op</code>\nThe archived counterpart of <code>AssignExpr::op</code>\nThe archived counterpart of <code>TsTypeOperator::op</code>\nCreates a corresponding operator. This macro is used to …\nThe archived counterpart of <code>JSXElement::opening</code>\nThe archived counterpart of <code>JSXFragment::opening</code>\nThe archived counterpart of <code>OptChainExpr::optional</code>\nThe archived counterpart of <code>Ident::optional</code>\nTypeScript only. Used in case of an optional parameter.\nThe archived counterpart of <code>ArrayPat::optional</code>\nOnly in an ambient context\nThe archived counterpart of <code>ObjectPat::optional</code>\nOnly in an ambient context\nThe archived counterpart of <code>TsPropertySignature::optional</code>\nThe archived counterpart of <code>TsMethodSignature::optional</code>\nThe archived counterpart of <code>TsMappedType::optional</code>\nThe archived counterpart of <code>ExportNamedSpecifier::orig</code>\n<code>foo</code> in <code>export { foo as bar }</code>\nThe archived counterpart of <code>SetterProp::param</code>\nThe archived counterpart of <code>CatchClause::param</code>\nes2019\nThe archived counterpart of <code>TsParamProp::param</code>\nThe archived counterpart of <code>TsSetterSignature::param</code>\nThe archived counterpart of <code>TsTypePredicate::param_name</code>\nThe archived counterpart of <code>Constructor::params</code>\nThe archived counterpart of <code>ArrowExpr::params</code>\nThe archived counterpart of <code>Function::params</code>\nThe archived counterpart of <code>TsTypeParamDecl::params</code>\nThe archived counterpart of …\nThe archived counterpart of <code>TsCallSignatureDecl::params</code>\nThe archived counterpart of …\nThe archived counterpart of <code>TsMethodSignature::params</code>\nThe archived counterpart of <code>TsIndexSignature::params</code>\nThe archived counterpart of <code>TsFnType::params</code>\nThe archived counterpart of <code>TsConstructorType::params</code>\nThe archived counterpart of <code>Param::pat</code>\nThe archived counterpart of <code>Import::phase</code>\nThe archived counterpart of <code>ImportDecl::phase</code>\nThe archived counterpart of <code>UpdateExpr::prefix</code>\nThe archived counterpart of <code>MemberExpr::prop</code>\nThe archived counterpart of <code>SuperPropExpr::prop</code>\nThe archived counterpart of <code>JSXMemberExpr::prop</code>\nThe archived counterpart of <code>ObjectLit::props</code>\nThe archived counterpart of <code>ObjectPat::props</code>\nThe archived counterpart of <code>TsImportType::qualifier</code>\nThe archived counterpart of <code>Tpl::quasis</code>\nThe archived counterpart of <code>TsTplLitType::quasis</code>\nThe archived counterpart of <code>TplElement::raw</code>\nYou may need to perform. …\nThe archived counterpart of <code>JSXText::raw</code>\nThe archived counterpart of <code>BigInt::raw</code>\nUse <code>None</code> value only for transformations to avoid …\nThe archived counterpart of <code>Str::raw</code>\nUse <code>None</code> value only for transformations to avoid …\nThe archived counterpart of <code>Number::raw</code>\nUse <code>None</code> value only for transformations to avoid …\nThe archived counterpart of <code>ClassProp::readonly</code>\nThe archived counterpart of <code>PrivateProp::readonly</code>\nThe archived counterpart of <code>TsParamProp::readonly</code>\nThe archived counterpart of <code>TsPropertySignature::readonly</code>\nThe archived counterpart of <code>TsIndexSignature::readonly</code>\nThe archived counterpart of <code>TsIndexedAccessType::readonly</code>\nThe archived counterpart of <code>TsMappedType::readonly</code>\nThe archived counterpart of <code>ArrowExpr::return_type</code>\nThe archived counterpart of <code>Function::return_type</code>\nThe archived counterpart of <code>BinExpr::right</code>\nThe archived counterpart of <code>AssignExpr::right</code>\nThe archived counterpart of <code>AssignPat::right</code>\nThe archived counterpart of <code>ForInStmt::right</code>\nThe archived counterpart of <code>ForOfStmt::right</code>\nThe archived counterpart of <code>TsQualifiedName::right</code>\nThe archived counterpart of <code>JSXOpeningElement::self_closing</code>\nThe archived counterpart of <code>Module::shebang</code>\nThe archived counterpart of <code>Script::shebang</code>\nThe archived counterpart of <code>Class::span</code>\nThe archived counterpart of <code>ClassProp::span</code>\nThe archived counterpart of <code>PrivateProp::span</code>\nThe archived counterpart of <code>ClassMethod::span</code>\nThe archived counterpart of <code>PrivateMethod::span</code>\nThe archived counterpart of <code>Constructor::span</code>\nThe archived counterpart of <code>Decorator::span</code>\nThe archived counterpart of <code>StaticBlock::span</code>\nThe archived counterpart of <code>AutoAccessor::span</code>\nThe archived counterpart of <code>VarDecl::span</code>\nThe archived counterpart of <code>VarDeclarator::span</code>\nThe archived counterpart of <code>UsingDecl::span</code>\nThe archived counterpart of <code>ThisExpr::span</code>\nThe archived counterpart of <code>ArrayLit::span</code>\nThe archived counterpart of <code>ObjectLit::span</code>\nThe archived counterpart of <code>UnaryExpr::span</code>\nThe archived counterpart of <code>UpdateExpr::span</code>\nThe archived counterpart of <code>BinExpr::span</code>\nThe archived counterpart of <code>AssignExpr::span</code>\nThe archived counterpart of <code>MemberExpr::span</code>\nThe archived counterpart of <code>SuperPropExpr::span</code>\nThe archived counterpart of <code>CondExpr::span</code>\nThe archived counterpart of <code>CallExpr::span</code>\nThe archived counterpart of <code>NewExpr::span</code>\nThe archived counterpart of <code>SeqExpr::span</code>\nThe archived counterpart of <code>ArrowExpr::span</code>\nThe archived counterpart of <code>YieldExpr::span</code>\nThe archived counterpart of <code>MetaPropExpr::span</code>\nThe archived counterpart of <code>AwaitExpr::span</code>\nThe archived counterpart of <code>Tpl::span</code>\nThe archived counterpart of <code>TaggedTpl::span</code>\nThe archived counterpart of <code>TplElement::span</code>\nThe archived counterpart of <code>ParenExpr::span</code>\nThe archived counterpart of <code>Super::span</code>\nThe archived counterpart of <code>Import::span</code>\nThe archived counterpart of <code>OptChainExpr::span</code>\nThe archived counterpart of <code>OptCall::span</code>\nThe archived counterpart of <code>Function::span</code>\nThe archived counterpart of <code>Param::span</code>\nThe archived counterpart of <code>Ident::span</code>\nThe archived counterpart of <code>PrivateName::span</code>\nThe archived counterpart of <code>JSXEmptyExpr::span</code>\nThe archived counterpart of <code>JSXExprContainer::span</code>\nThe archived counterpart of <code>JSXSpreadChild::span</code>\nThe archived counterpart of <code>JSXOpeningElement::span</code>")