searchState.loadedDescShard("swc_core", 1, "The archived counterpart of <code>JSXClosingElement::span</code>\nThe archived counterpart of <code>JSXAttr::span</code>\nThe archived counterpart of <code>JSXText::span</code>\nThe archived counterpart of <code>JSXElement::span</code>\nThe archived counterpart of <code>JSXFragment::span</code>\nThe archived counterpart of <code>JSXOpeningFragment::span</code>\nThe archived counterpart of <code>JSXClosingFragment::span</code>\nThe archived counterpart of <code>BigInt::span</code>\nThe archived counterpart of <code>Str::span</code>\nThe archived counterpart of <code>Bool::span</code>\nThe archived counterpart of <code>Null::span</code>\nThe archived counterpart of <code>Regex::span</code>\nThe archived counterpart of <code>Number::span</code>\nThe archived counterpart of <code>ReservedUnused::span</code>\nThe archived counterpart of <code>Module::span</code>\nThe archived counterpart of <code>Script::span</code>\nThe archived counterpart of <code>ExportDefaultExpr::span</code>\nThe archived counterpart of <code>ExportDecl::span</code>\nThe archived counterpart of <code>ImportDecl::span</code>\nThe archived counterpart of <code>ExportAll::span</code>\nThe archived counterpart of <code>NamedExport::span</code>\nThe archived counterpart of <code>ExportDefaultDecl::span</code>\nThe archived counterpart of <code>ImportDefaultSpecifier::span</code>\nThe archived counterpart of <code>ImportStarAsSpecifier::span</code>\nThe archived counterpart of <code>ImportNamedSpecifier::span</code>\nThe archived counterpart of <code>ExportNamespaceSpecifier::span</code>\nThe archived counterpart of <code>ExportNamedSpecifier::span</code>\nThe archived counterpart of <code>ArrayPat::span</code>\nThe archived counterpart of <code>ObjectPat::span</code>\nThe archived counterpart of <code>AssignPat::span</code>\nThe archived counterpart of <code>RestPat::span</code>\nThe archived counterpart of <code>AssignPatProp::span</code>\nThe archived counterpart of <code>GetterProp::span</code>\nThe archived counterpart of <code>SetterProp::span</code>\nThe archived counterpart of <code>ComputedPropName::span</code>\nSpan including <code>[</code> and <code>]</code>.\nThe archived counterpart of <code>BlockStmt::span</code>\nSpan including the braces.\nThe archived counterpart of <code>ExprStmt::span</code>\nThe archived counterpart of <code>EmptyStmt::span</code>\nSpan of semicolon.\nThe archived counterpart of <code>DebuggerStmt::span</code>\nThe archived counterpart of <code>WithStmt::span</code>\nThe archived counterpart of <code>ReturnStmt::span</code>\nThe archived counterpart of <code>LabeledStmt::span</code>\nThe archived counterpart of <code>BreakStmt::span</code>\nThe archived counterpart of <code>ContinueStmt::span</code>\nThe archived counterpart of <code>IfStmt::span</code>\nThe archived counterpart of <code>SwitchStmt::span</code>\nThe archived counterpart of <code>ThrowStmt::span</code>\nThe archived counterpart of <code>TryStmt::span</code>\nThe archived counterpart of <code>WhileStmt::span</code>\nThe archived counterpart of <code>DoWhileStmt::span</code>\nThe archived counterpart of <code>ForStmt::span</code>\nThe archived counterpart of <code>ForInStmt::span</code>\nThe archived counterpart of <code>ForOfStmt::span</code>\nThe archived counterpart of <code>SwitchCase::span</code>\nThe archived counterpart of <code>CatchClause::span</code>\nThe archived counterpart of <code>TsTypeAnn::span</code>\nThe archived counterpart of <code>TsTypeParamDecl::span</code>\nThe archived counterpart of <code>TsTypeParam::span</code>\nThe archived counterpart of <code>TsTypeParamInstantiation::span</code>\nThe archived counterpart of <code>TsParamProp::span</code>\nThe archived counterpart of <code>TsCallSignatureDecl::span</code>\nThe archived counterpart of <code>TsConstructSignatureDecl::span</code>\nThe archived counterpart of <code>TsPropertySignature::span</code>\nThe archived counterpart of <code>TsGetterSignature::span</code>\nThe archived counterpart of <code>TsSetterSignature::span</code>\nThe archived counterpart of <code>TsMethodSignature::span</code>\nThe archived counterpart of <code>TsIndexSignature::span</code>\nThe archived counterpart of <code>TsKeywordType::span</code>\nThe archived counterpart of <code>TsThisType::span</code>\nThe archived counterpart of <code>TsFnType::span</code>\nThe archived counterpart of <code>TsConstructorType::span</code>\nThe archived counterpart of <code>TsTypeRef::span</code>\nThe archived counterpart of <code>TsTypePredicate::span</code>\nThe archived counterpart of <code>TsTypeQuery::span</code>\nThe archived counterpart of <code>TsImportType::span</code>\nThe archived counterpart of <code>TsTypeLit::span</code>\nThe archived counterpart of <code>TsArrayType::span</code>\nThe archived counterpart of <code>TsTupleType::span</code>\nThe archived counterpart of <code>TsTupleElement::span</code>\nThe archived counterpart of <code>TsOptionalType::span</code>\nThe archived counterpart of <code>TsRestType::span</code>\nThe archived counterpart of <code>TsUnionType::span</code>\nThe archived counterpart of <code>TsIntersectionType::span</code>\nThe archived counterpart of <code>TsConditionalType::span</code>\nThe archived counterpart of <code>TsInferType::span</code>\nThe archived counterpart of <code>TsParenthesizedType::span</code>\nThe archived counterpart of <code>TsTypeOperator::span</code>\nThe archived counterpart of <code>TsIndexedAccessType::span</code>\nThe archived counterpart of <code>TsMappedType::span</code>\nThe archived counterpart of <code>TsLitType::span</code>\nThe archived counterpart of <code>TsTplLitType::span</code>\nThe archived counterpart of <code>TsInterfaceDecl::span</code>\nThe archived counterpart of <code>TsInterfaceBody::span</code>\nThe archived counterpart of <code>TsExprWithTypeArgs::span</code>\nThe archived counterpart of <code>TsTypeAliasDecl::span</code>\nThe archived counterpart of <code>TsEnumDecl::span</code>\nThe archived counterpart of <code>TsEnumMember::span</code>\nThe archived counterpart of <code>TsModuleDecl::span</code>\nThe archived counterpart of <code>TsModuleBlock::span</code>\nThe archived counterpart of <code>TsNamespaceDecl::span</code>\nThe archived counterpart of <code>TsImportEqualsDecl::span</code>\nThe archived counterpart of <code>TsExternalModuleRef::span</code>\nThe archived counterpart of <code>TsExportAssignment::span</code>\nThe archived counterpart of <code>TsNamespaceExportDecl::span</code>\nThe archived counterpart of <code>TsAsExpr::span</code>\nThe archived counterpart of <code>TsTypeAssertion::span</code>\nThe archived counterpart of <code>TsNonNullExpr::span</code>\nThe archived counterpart of <code>TsSatisfiesExpr::span</code>\nThe archived counterpart of <code>TsConstAssertion::span</code>\nThe archived counterpart of <code>TsInstantiation::span</code>\nThe archived counterpart of <code>Invalid::span</code>\nThe archived counterpart of <code>ImportDecl::specifiers</code>\nThe archived counterpart of <code>NamedExport::specifiers</code>\nThe archived counterpart of <code>ExprOrSpread::spread</code>\nThe archived counterpart of <code>ImportDecl::src</code>\nThe archived counterpart of <code>ExportAll::src</code>\nThe archived counterpart of <code>NamedExport::src</code>\nThe archived counterpart of <code>BlockStmt::stmts</code>\nThe archived counterpart of <code>Class::super_class</code>\nThe archived counterpart of <code>Class::super_type_params</code>\nThe archived counterpart of <code>Ident::sym</code>\nThe archived counterpart of <code>TaggedTpl::tag</code>\nThe archived counterpart of <code>TplElement::tail</code>\nThe archived counterpart of <code>CondExpr::test</code>\nThe archived counterpart of <code>IfStmt::test</code>\nThe archived counterpart of <code>WhileStmt::test</code>\nThe archived counterpart of <code>DoWhileStmt::test</code>\nThe archived counterpart of <code>ForStmt::test</code>\nThe archived counterpart of <code>SwitchCase::test</code>\nNone for <code>default:</code>\nThe archived counterpart of <code>SetterProp::this_param</code>\nThe archived counterpart of <code>TaggedTpl::tpl</code>\nThis is boxed to reduce the type size of Expr.\nThe archived counterpart of <code>TsConditionalType::true_type</code>\nThe archived counterpart of <code>TsTupleElement::ty</code>\nThe archived counterpart of <code>ClassProp::type_ann</code>\nThe archived counterpart of <code>PrivateProp::type_ann</code>\nThe archived counterpart of <code>AutoAccessor::type_ann</code>\nThe archived counterpart of <code>BindingIdent::type_ann</code>\nThe archived counterpart of <code>ArrayPat::type_ann</code>\nThe archived counterpart of <code>ObjectPat::type_ann</code>\nThe archived counterpart of <code>RestPat::type_ann</code>\nThe archived counterpart of <code>GetterProp::type_ann</code>\nThe archived counterpart of <code>TsTypeAnn::type_ann</code>\nThe archived counterpart of <code>TsCallSignatureDecl::type_ann</code>\nThe archived counterpart of …\nThe archived counterpart of <code>TsPropertySignature::type_ann</code>\nThe archived counterpart of <code>TsGetterSignature::type_ann</code>\nThe archived counterpart of <code>TsMethodSignature::type_ann</code>\nThe archived counterpart of <code>TsIndexSignature::type_ann</code>\nThe archived counterpart of <code>TsFnType::type_ann</code>\nThe archived counterpart of <code>TsConstructorType::type_ann</code>\nThe archived counterpart of <code>TsTypePredicate::type_ann</code>\nThe archived counterpart of <code>TsOptionalType::type_ann</code>\nThe archived counterpart of <code>TsRestType::type_ann</code>\nThe archived counterpart of <code>TsParenthesizedType::type_ann</code>\nThe archived counterpart of <code>TsTypeOperator::type_ann</code>\nThe archived counterpart of <code>TsMappedType::type_ann</code>\nThe archived counterpart of <code>TsTypeAliasDecl::type_ann</code>\nThe archived counterpart of <code>TsAsExpr::type_ann</code>\nThe archived counterpart of <code>TsTypeAssertion::type_ann</code>\nThe archived counterpart of <code>TsSatisfiesExpr::type_ann</code>\nThe archived counterpart of <code>CallExpr::type_args</code>\nThe archived counterpart of <code>NewExpr::type_args</code>\nThe archived counterpart of <code>OptCall::type_args</code>\nThe archived counterpart of <code>JSXOpeningElement::type_args</code>\nNote: This field’s name is different from one from babel …\nThe archived counterpart of <code>TsTypeQuery::type_args</code>\nThe archived counterpart of <code>TsImportType::type_args</code>\nThe archived counterpart of <code>TsExprWithTypeArgs::type_args</code>\nThe archived counterpart of <code>TsInstantiation::type_args</code>\nThe archived counterpart of <code>TsTypeRef::type_name</code>\nThe archived counterpart of <code>ImportDecl::type_only</code>\nThe archived counterpart of <code>ExportAll::type_only</code>\nThe archived counterpart of <code>NamedExport::type_only</code>\nThe archived counterpart of <code>TsInferType::type_param</code>\nThe archived counterpart of <code>TsMappedType::type_param</code>\nThe archived counterpart of <code>Class::type_params</code>\nThe archived counterpart of <code>ArrowExpr::type_params</code>\nThe archived counterpart of <code>TaggedTpl::type_params</code>\nThe archived counterpart of <code>Function::type_params</code>\nThe archived counterpart of …\nThe archived counterpart of …\nThe archived counterpart of <code>TsMethodSignature::type_params</code>\nThe archived counterpart of <code>TsFnType::type_params</code>\nThe archived counterpart of <code>TsConstructorType::type_params</code>\nThe archived counterpart of <code>TsTypeRef::type_params</code>\nThe archived counterpart of <code>TsInterfaceDecl::type_params</code>\nThe archived counterpart of <code>TsTypeAliasDecl::type_params</code>\nThe archived counterpart of <code>TsUnionType::types</code>\nThe archived counterpart of <code>TsIntersectionType::types</code>\nThe archived counterpart of <code>TsTplLitType::types</code>\nThe archived counterpart of <code>ForStmt::update</code>\nThe archived counterpart of <code>ClassProp::value</code>\nThe archived counterpart of <code>PrivateProp::value</code>\nThe archived counterpart of <code>AutoAccessor::value</code>\nThe archived counterpart of <code>JSXAttr::value</code>\nBabel uses Expr instead of JSXAttrValue\nThe archived counterpart of <code>JSXText::value</code>\nThe archived counterpart of <code>BigInt::value</code>\nThe archived counterpart of <code>Str::value</code>\nThe archived counterpart of <code>Bool::value</code>\nThe archived counterpart of <code>Number::value</code>\n<strong>Note</strong>: This should not be <code>NaN</code>. Use crate::Ident to …\nThe archived counterpart of <code>KeyValuePatProp::value</code>\nThe archived counterpart of <code>AssignPatProp::value</code>\nThe archived counterpart of <code>KeyValueProp::value</code>\nThe archived counterpart of <code>AssignProp::value</code>\nThe archived counterpart of <code>ImportDecl::with</code>\nThe archived counterpart of <code>ExportAll::with</code>\nThe archived counterpart of <code>NamedExport::with</code>\nClone-on-write string.\nA fast internally mutable cell for AtomStore.\nClone-on-write string.\nThis should be used as a key for hash maps and hash sets.\nCreates an Atom from a constant.\nCreates an Atom from a constant.\nCreates an Atom from a constant.\nAn immutable string which is cheap to clone, compare, …\nA store that stores Atoms. Can be merged with other …\nCreate an atom from a string literal. This atom is never …\nThread-safe, non-blocking, “first one wins” flavor of …\nThread-safe, blocking version of <code>OnceCell</code>.\nSingle-threaded version of <code>OnceCell</code>.\nA thread-safe cell which can be written to only once.\nA thread-safe cell which can be written to only once.\nA thread-safe cell which can be written to only once.\nA thread-safe cell which can be written to only once.\nA value which is initialized on the first access.\nA thread-safe cell which can be written to only once.\nA value which is initialized on the first access.\nA cell which can be written to only once. It is not thread …\nList of built in packages for latest stable node with LTS …\nTarget runtime environment.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nFaster version of node-resolve.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCreate a node modules resolver for the target runtime …\nCreate a node modules resolver which does not care about …\nSupport for <code>paths</code> of <code>tsconfig.json</code>.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nParameters\nAlternative for https://babeljs.io/docs/en/assumptions\nhttps://babeljs.io/docs/en/assumptions#arraylikeisiterable\nhttps://babeljs.io/docs/en/assumptions#constantreexports\nhttps://babeljs.io/docs/en/assumptions#constantsuper\nhttps://babeljs.io/docs/en/assumptions#enumerablemodulemeta\nReturns the argument unchanged.\nhttps://babeljs.io/docs/en/assumptions#ignorefunctionlength\n…\nCalls <code>U::from(self)</code>.\nhttps://babeljs.io/docs/en/assumptions#iterableisarray\n…\nhttps://babeljs.io/docs/en/assumptions#noclasscalls\nhttps://babeljs.io/docs/en/assumptions#nodocumentall\n…\nhttps://babeljs.io/docs/en/assumptions#nonewarrows\nhttps://babeljs.io/docs/en/assumptions#objectrestnosymbols\n…\nhttps://babeljs.io/docs/en/assumptions#puregetters\nSee Ident for know how does swc manages identifiers.\nhttps://babeljs.io/docs/en/assumptions#setclassmethods\n…\nhttps://babeljs.io/docs/en/assumptions#setpublicclassfields\nhttps://babeljs.io/docs/en/assumptions#setspreadproperties\n…\n…\n<code>transform-arrow-functions</code>\n<code>proposal-async-generator-functions</code>\n<code>transform-async-to-generator</code>\n<code>transform-block-scoped-functions</code>\n<code>transform-block-scoping</code>\n<code>bugfix/transform-async-arrows-in-class</code>\n<code>bugfix/transform-edge-default-parameters</code>\n…\n<code>bugfix/transform-tagged-template-caching</code>\n<code>bugfix/transform-edge-function-name</code>\n<code>bugfix/transform-safari-block-shadowing</code>\n<code>bugfix/transform-safari-for-shadowing</code>\n<code>bugfix/transform-v8-spread-parameters-in-optional-chaining</code>\n<code>proposal-class-properties</code>\n<code>proposal-class-static-block</code>\n<code>transform-classes</code>\n<code>transform-computed-properties</code>\n<code>transform-destructuring</code>\n<code>transform-dotall-regex</code>\n<code>transform-duplicate-keys</code>\n<code>transform-exponentiation-operator</code>\n<code>proposal-export-namespace-from</code>\n<code>transform-for-of</code>\n<code>transform-function-name</code>\n<code>proposal-json-strings</code>\n<code>transform-literals</code>\n<code>proposal-logical-assignment-operators</code>\n<code>transform-member-expression-literals</code>\n<code>transform-named-capturing-groups-regex</code>\n<code>transform-new-target</code>\n<code>proposal-nullish-coalescing-operator</code>\n<code>proposal-numeric-separator</code>\n<code>proposal-object-rest-spread</code>\n<code>transform-object-super</code>\n<code>proposal-optional-catch-binding</code>\n<code>proposal-optional-chaining</code>\n<code>transform-parameters</code>\n<code>proposal-private-methods</code>\n<code>proposal-private-property-in-object</code>\n<code>transform-property-literals</code>\n<code>transform-regenerator</code>\n<code>transform-reserved-words</code>\n<code>transform-shorthand-properties</code>\n<code>transform-spread</code>\n<code>transform-sticky-regex</code>\n<code>transform-template-literals</code>\n<code>transform-typeof-symbol</code>\n<code>transform-unicode-escapes</code>\n<code>proposal-unicode-property-regex</code>\n<code>transform-unicode-regex</code>\nGet a flags value with all known bits set.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nGet the underlying bits value.\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nWhether all set bits in a source flags value are also set …\nThe intersection of a source flags value with the …\nGet a flags value with all bits unset.\nThe bitwise or (<code>|</code>) of the bits in each flags value.\nReturns the argument unchanged.\nConvert from a bits value.\nConvert from a bits value exactly.\nConvert from a bits value, unsetting any unknown bits.\nThe bitwise or (<code>|</code>) of the bits in each flags value.\nGet a flags value with the bits of a flag with the given …\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nWhether any set bits in a source flags value are also set …\nCalls <code>U::from(self)</code>.\nWhether all known bits in this flags value are set.\nWhether all bits in this flags value are unset.\nYield a set of contained flags values.\nYield a set of contained named flags values.\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nThe intersection of a source flags value with the …\nCall <code>insert</code> when <code>value</code> is <code>true</code> or <code>remove</code> when <code>value</code> is …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nFixes ast nodes before printing so semantics are preserved.\nThis variable is used to manage helper scripts like …\nTracks used helper methods. (e.g. __extends)\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nReturns the argument unchanged.\nSee hygiene_with_config for doc. Creates a <code>hygiene</code> pass …\nThe pass actually modifies the identifiers in the way that …\nMangle even if vars are visible to <code>eval</code> or <code>with</code>.\nCalls <code>U::from(self)</code>.\nIf true, the <code>hygiene</code> pass will preserve class names.\nIf true, the bug of safari 10 is avoided.\nThe marks derived from this marks will treated as …\nA visitor which visits node only if <code>enabled</code> is true.\nTrait for a pass which is designed to invoked multiple …\nShould run again?\nReset.\nThis is considered as a private type and it’s NOT A …\nInvoked after visiting all ModuleItems, possibly in …\nInvoked after visiting each statements.\nInvoked after visiting each statements.\nInvoked after visiting all Stmts, possibly in parallel.\nUsed to create visitor.\nInvoke <code>op</code> in parallel, if <code>swc_ecma_utils</code> is compiled with …\nInvoke <code>op</code> in parallel, if <code>swc_ecma_utils</code> is compiled with …\nThis can be called in anytime.\nConfig for test_fixture. See test_fixture for …\nConverts <code>foo#1</code> to <code>foo__1</code> so it can be verified by the test.\nIf true, diagnostics written to HANDLER will be printed as …\nThis will be changed to SingleThreadedComments once …\nExecute <code>node</code> for <code>input</code> and ensure that it prints same …\nTest transformation by invoking it using <code>node</code>. The code …\nExecute <code>jest</code> after transpiling <code>input</code> using <code>tr</code>.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nJust like babel, walk up the directory tree and find a …\nIf true, source map will be printed to the <code>.map</code> file.\nTest transformation.\nYou can do <code>UPDATE=1 cargo test</code> to update fixtures.\nThese tests use <code>options.json</code>.\nThis takes a closure which returns a PassFactory. This is …\nSingleThreadedComments is cheap to clone.\nExecute using node.js\nExecute using node.js and mocha\nRun a fixture test\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nFinds all <strong>binding</strong> idents of variables.\nFinds all <strong>binding</strong> idents of variables.\nExtension methods for Expr.\nExtension methods for Expr.\nReplacer for Id =&gt; ]Id]\nFinds usage of <code>ident</code>\nMay have some side effects.\nA newtype that will ignore Span while doing <code>eq</code> or <code>hash</code>.\nDoes not have any side effect.\nReplace <code>foo</code> with <code>bar</code> or <code>bar.baz</code>\nVariable remapper\nType of value.\nNot determined at compile time.`\nNot determined at compile time.`\nRuntime value.\nUsed to determine super_class_ident\nUsed to determine super_class_ident\nReturns <code>(ident, aliased)</code>\nCreates an ExprOrSpread using the given Expr.\nGet bool value of <code>self</code> if it does not have any side …\nEmulates javascript Number() cast function.\nReturns Known only if it’s pure.\nThis method emulates the <code>Boolean()</code> JavaScript cast …\nCollects binding identifiers.\nCollects binding identifiers, but only if it has a context …\nThis does not recurse into a function if <code>this</code> is changed …\nAdd side effects of <code>expr</code> to <code>to</code>. This function preserves …\nExtracts hoisted variables\nExtracts hoisted variables\nFinds all <strong>binding</strong> idents of <code>node</code>.\nFinds all <strong>binding</strong> idents of <code>node</code>. <strong>Any nested identifiers in</strong>\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nApply the supplied predicate against all possible result …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\ncreate a ArrowExpr which return self\ncreate a Function which return self\nCreates a statement whcih return <code>self</code>.\nCreates an expression statement with <code>self</code>.\ncreate a var declartor using self as init\nReturns <code>true</code> if <code>id</code> references a global object.\nReturns true if this is an immutable value.\nReturns true if the value is known.\nIf the stmt is maybe a directive like <code>&quot;use strict&quot;;</code>\nChecks if <code>self</code> is <code>NaN</code>.\nReturns <code>true</code> if <code>id</code> references a global object.\nReturns true if it’s pure.\nCheck if <code>e</code> is <code>...arguments</code>\nReturns true if the value is not known.\nTrue for argument of <code>typeof</code>.\nCreates a assign expr <code>$lhs $op $self</code>\nCreates a binary expr <code>$self $op $rhs</code>\nCreates a binary expr <code>$self === </code>\nCreates a member expression.\nModule for parallel processing\ninject <code>branch</code> after directives\ninject <code>stmts</code> after directives\nmake a new expression which evaluates <code>val</code> preserving side …\nShortcut for …\nSimilar to <code>prop_name_to_expr</code>, but used for value position.\nref used in JSX\nReplace all <code>from</code> in <code>expr</code> with <code>to</code>.\nwhen <code>foo()</code> is replaced with <code>bar.baz()</code>, should <code>bar.baz</code> be …\nstmts contain top level return/break/continue/throw\nCast to javascript’s int32\nThis SyntaxContext should be applied only to unresolved …\nDon’t recurse into constructor\nDon’t recurse into constructor\nNo-op (we don’t care about expressions)\nNo-op (we don’t care about expressions)\nDon’t recurse into fn\nDon’t recurse into fn\nDon’t recurse into fn\nDon’t recurse into fn\nDon’t recurse into fn\nDon’t recurse into fn\nreplace bar in binding pattern input:\nNo-op (we don’t care about expressions)\nDon’t recurse into fn\nDon’t use it against function, it will stop if come …\nThe result of declaration wrapper includes two parts. …\nDisable hoisting of <code>arguments</code>\nDisable hoisting of nodes realted to <code>super</code>\nDisable hoisting of <code>this</code>\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nIf a function has a function name, it may be called …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nDon’t recurse into constructor\nDon’t recurse into fn\nDon’t recurse into getter/setter/method except computed …\nhttps://tc39.es/ecma262/#sec-numeric-types-number-tostring\nThis is considered as a private type and it’s NOT A …\nInvoked after visiting all ModuleItems, possibly in …\nInvoked after visiting all Stmts, possibly in parallel.\nUsed to create visitor.\nInvoke <code>op</code> in parallel, if <code>swc_ecma_utils</code> is compiled with …\nInvoke <code>op</code> in parallel, if <code>swc_ecma_utils</code> is compiled with …\nThis can be called in anytime.\nCalls <code>callback</code> with a larger stack size.\nCalls <code>callback</code> with a larger stack size.\nThe archived counterpart of <code>FileName::Anon</code>\nCommand line\nAn archived <code>BytePos</code>\nAn archived <code>CharPos</code>\nAn archived <code>FileName</code>\nAn archived <code>MultiSpan</code>\nAn archived <code>SourceFile</code>\nAn archived <code>SourceFileAndBytePos</code>\nAn archived <code>Span</code>\nAn archived <code>SpanLinesError</code>\nAn archived <code>SpanSnippetError</code>\nA trait for ast nodes.\nA byte offset. Keep this small (currently 32-bits), as AST …\nA character offset. Because of multibyte utf8 characters, …\nThe archived counterpart of <code>FileName::Custom</code>\nCustom sources for explicit parser calls from plugins and …\nDummy span, both position and length are zero, syntax …\nDerives <code>serde::Deserialize</code> which is aware of <code>tag</code> based …\nThe archived counterpart of <code>SpanLinesError::DistinctSources</code>\nThe archived counterpart of …\nThe archived counterpart of <code>SpanSnippetError::DummyBytePos</code>\nDerive with <code>#[derive(EqIgnoreSpan)]</code>.\nDerives <code>swc_common::EqIgnoreSpan</code>.\nNote: This struct intentionally does not implement rkyv’…\nAn abstraction over the fs operations used by the Parser.\nDerives [<code>From</code>] for all variants. This only supports an …\nStorage for span hygiene data.\nThe archived counterpart of <code>SpanLinesError::IllFormedSpan</code>\nThe archived counterpart of <code>SpanSnippetError::IllFormedSpan</code>\nThe archived counterpart of <code>FileName::Internal</code>\nUsed to create a <code>.map</code> file.\nA source code location used for error reporting Note: This …\nA source code location used as the result of …\nThe archived counterpart of <code>SpanSnippetError::LookupFailed</code>\nThe archived counterpart of <code>FileName::MacroExpansion</code>\nHack in src/libsyntax/parse.rs\nThe archived counterpart of <code>FileName::Macros</code>\nA macro. This includes the full name of the macro, so that …\nThe archived counterpart of …\nA mark is a unique id associated with a macro expansion.\nA collection of spans. Spans have two orthogonal …\nThe archived counterpart of <code>FileName::ProcMacroSourceCode</code>\nThe archived counterpart of <code>FileName::QuoteExpansion</code>\ncall to <code>quote!</code>\nThe archived counterpart of <code>FileName::Real</code>\nA single source in the SourceMap.\nThe interner for spans.\nThe archived counterpart of …\nSpans represent a region of code, used for error …\nDerive\nDerives [<code>swc_common::Spanned</code>]. See [<code>swc_common::Spanned</code>] …\nA SyntaxContext represents a chain of macro expansions …\nDerive with <code>#[derive(TypeEq)]</code>.\nDerives <code>swc_common::TypeEq</code>.\nThe archived counterpart of <code>FileName::Url</code>\nReturn an absolute path to a file, if possible.\nAlias for <code>#[derive(Spanned, Fold, Clone, Debug, PartialEq)]</code>…\nDerives <code>serde::Serialize</code> and <code>serde::Deserialize</code>.\nChains multiple visitor.\nThe (0-based) column offset\nUTF-16 column in line, starting from 0.\nThe (0-based) column offset when displayed\nThe archived counterpart of <code>SourceFile::crate_of_origin</code>\nIndicates which crate this <code>SourceFile</code> was imported from.\nThe archived counterpart of <code>Span::ctxt</code>\nInformation about where the macro came from, if this piece …\nThe archived counterpart of <code>SourceFile::end_pos</code>\nThe end position of this source in the <code>SourceMap</code>\nInformation about the original source\nQuery the existence of a file.\nThe archived counterpart of <code>Span::hi</code>\nThe (1-based) line number\nIndex of line, starting from 0.\nThe archived counterpart of <code>SourceFile::lines</code>\nLocations of lines beginnings in the source code\nThe archived counterpart of <code>Span::lo</code>\nThe archived counterpart of <code>SourceFile::multibyte_chars</code>\nLocations of multi-byte characters in the source code\nThe archived counterpart of <code>SourceFile::name</code>\nThe name of the file that the source came from. Source …\nThe archived counterpart of <code>SourceFile::name_hash</code>\nA hash of the filename, used for speeding up the incr. …\nThe archived counterpart of <code>SourceFile::name_was_remapped</code>\nTrue if the <code>name</code> field above has been modified by …\nThe archived counterpart of <code>SourceFile::non_narrow_chars</code>\nWidth of characters that are not narrow in the source code\nThis module reexports items from <code>swc_visit</code> with some …\nThe archived counterpart of <code>SourceFileAndBytePos::pos</code>\nRead the contents of an UTF-8 file into memory.\nThe archived counterpart of <code>SourceFileAndBytePos::sf</code>\nThe SourceMap tracks all the source code used within a …\nGet span of <code>self</code>.\nThe archived counterpart of <code>SourceFile::src</code>\nThe complete source code\nThe archived counterpart of <code>SourceFile::src_hash</code>\nThe source code’s hash\nThe archived counterpart of <code>SourceFile::start_pos</code>\nThe start position of this source in the <code>SourceMap</code>\nThis module defines types which are thread safe if …\n<strong>Note</strong>: This method should return <code>true</code> for non-type values.\nThe archived counterpart of <code>SourceFile::unmapped_path</code>\nThe unmapped path of the file that the source came from. …\nThe archived counterpart of …\nAn archived <code>Comment</code>\nAn archived <code>CommentKind</code>\nThe resolver for <code>CommentKind::Block</code>\nThe archived counterpart of <code>CommentKind::Block</code>\nThe resolver for an archived <code>CommentKind</code>\nThe resolver for an archived <code>Comment</code>\nStores comment.\nThe resolver for <code>CommentKind::Line</code>\nThe archived counterpart of <code>CommentKind::Line</code>\nImplementation of Comments which does not store any …\nSingle-threaded storage for comments.\nThis method is used to check if a comment with the given …\nThe archived counterpart of <code>Comment::kind</code>\nThe archived counterpart of <code>Comment::span</code>\nThe archived counterpart of <code>Comment::text</code>\n[<code>Atom::new_bad</code>][] is perfectly fine for this value.\nThe resolver for an archived <code>Applicability</code>\nAn archived <code>Applicability</code>\nAn archived <code>CodeSuggestion</code>\nAn archived <code>Level</code>\nAn archived <code>Substitution</code>\nAn archived <code>SubstitutionPart</code>\nThe resolver for <code>Level::Bug</code>\nThe archived counterpart of <code>Level::Bug</code>\nThe resolver for <code>Level::Cancelled</code>\nThe archived counterpart of <code>Level::Cancelled</code>\nThe resolver for an archived <code>CodeSuggestion</code>\nUsed for emitting structured error messages and other …\nEmitter trait for emitting errors.\nImplementation of Emitter which pretty-prints the errors.\nThe resolver for <code>Level::Error</code>\nThe archived counterpart of <code>Level::Error</code>\nSignifies that the compiler died with an explicit call to …\nThe resolver for <code>Level::FailureNote</code>\nThe archived counterpart of <code>Level::FailureNote</code>\nThe resolver for <code>Level::Fatal</code>\nThe archived counterpart of <code>Level::Fatal</code>\nUsed as a return value to signify a fatal error occurred. …\nUsed for error reporting in transform.\nA handler deals with errors; certain errors (fatal, bug, …\nThe resolver for <code>Applicability::HasPlaceholders</code>\nThe archived counterpart of <code>Applicability::HasPlaceholders</code>\nThe resolver for <code>Level::Help</code>\nThe archived counterpart of <code>Level::Help</code>\nThe resolver for an archived <code>Level</code>\nThe resolver for <code>Applicability::MachineApplicable</code>\nThe archived counterpart of …\nThe resolver for <code>Applicability::MaybeIncorrect</code>\nThe archived counterpart of <code>Applicability::MaybeIncorrect</code>\nThe resolver for <code>Level::Note</code>\nThe archived counterpart of <code>Level::Note</code>\nThe resolver for <code>Level::PhaseFatal</code>\nThe archived counterpart of <code>Level::PhaseFatal</code>\nFor example a note attached to an error.\nSee the docs on <code>CodeSuggestion::substitutions</code>\nThe resolver for an archived <code>SubstitutionPart</code>\nThe resolver for an archived <code>Substitution</code>\nThe resolver for <code>Applicability::Unspecified</code>\nThe archived counterpart of <code>Applicability::Unspecified</code>\nThe resolver for <code>Level::Warning</code>\nThe archived counterpart of <code>Level::Warning</code>\nThe archived counterpart of <code>CodeSuggestion::applicability</code>\nWhether or not the suggestion is approximate\nIf false, warning-level lints are suppressed. (rustc: see …\nIf true, immediately emit diagnostics that would otherwise …\nEmit a structured diagnostic.\nshow macro backtraces even for non-local macros. (rustc: …\nThe archived counterpart of <code>CodeSuggestion::msg</code>\nThe archived counterpart of <code>Substitution::parts</code>\nIf true, immediately print bugs registered with …\nCheck if should show explanations about “rustc –explain…\nThe archived counterpart of …\nThe archived counterpart of <code>SubstitutionPart::snippet</code>\nThe archived counterpart of <code>SubstitutionPart::span</code>\nThe archived counterpart of <code>CodeSuggestion::substitutions</code>\nEach substitute can have multiple variants due to multiple …\nIf true, error-level diagnostics are upgraded to bug-level.\nEmitter trait for emitting errors.\nImplementation of Emitter which pretty-prints the errors.\nmaximum number of lines we will print for each error; …\nmaximum number of suggestions to be shown\nEmit a structured diagnostic.\nCheck if should show explanations about “rustc –explain…\nImplementation of Input.\nSafety\nReturns None if it’s end of input <strong>or</strong> current character …\nImplementors can override the method to make it faster.\nThis method modifies [last_pos()] and [cur_pos()].\nImplementors can override the method to make it faster.\nImplementors can override the method to make it faster.\nSafety\nSafety\nTakes items from stream, testing each one with predicate. …\nCopied from …\nVisit all children nodes. This converts <code>VisitAll</code> to <code>Visit</code>. …\nA visitor which applies <code>A</code> and then <code>B</code>.\nA named compiler pass.\nThe enum <code>Either</code> with variants <code>Left</code> and <code>Right</code> is a general …\nA value of type <code>L</code>.\nA visitor which visits node only if <code>enabled</code> is true.\nA visitor which applies <code>V</code> again and again if <code>V</code> modifies …\nTrait for a pass which is designed to invoked multiple …\nA value of type <code>R</code>.\nChains multiple visitor.\nShould run again?\nThis creates <code>Visit</code>. This is extensible visitor generator, …\nname should follow hyphen-case.an implementation should …\nReset.\nSome utilities for generated visitors.\nCopied from <code>syntax::ptr::P</code> of rustc.\nTransform the inner value, consuming <code>self</code> and producing a …\nModifiers vector in-place.\nThis will be very slow if you try to extend vector using …\nMap in place.\nCompile-time version constant for the AST struct schema’…\nAn archived <code>PluginCorePkgDiagnostics</code>\nA serializable, wrapped struct for the diagnostics …\nThe resolver for an archived <code>PluginCorePkgDiagnostics</code>\nThe archived counterpart of …\nThe archived counterpart of …\nThe archived counterpart of …\nThe archived counterpart of …\nHost side metadata context plugin may need to access. This …\nIndexable key to the metadata context for a transform …\nThe current working directory.\nThe current environment resolved as process.env.SWC_ENV || …\nThe path of the file being processed. This includes all of …\nAn archived <code>PluginError</code>\nAn archived <code>VersionedSerializable</code>\nThe resolver for <code>PluginError::Deserialize</code>\nThe archived counterpart of <code>PluginError::Deserialize</code>\nOccurs when failed to reconstruct a struct from <code>Serialized</code>.\nEnum for possible errors while running transform via …\nThe resolver for an archived <code>PluginError</code>\nWraps internal representation of serialized data for …\nThe resolver for <code>PluginError::Serialize</code>\nThe archived counterpart of <code>PluginError::Serialize</code>\nOccurs when failed to serialize a struct into <code>Serialized</code>. …\nThe resolver for <code>PluginError::SizeInteropFailure</code>\nThe archived counterpart of <code>PluginError::SizeInteropFailure</code>\nOccurs when failed to convert size passed from host / …\nA wrapper type for the structures to be passed into plugins\nThe resolver for an archived <code>VersionedSerializable</code>\nThe resolver for <code>FileName::Anon</code>\nThe archived counterpart of <code>FileName::Anon</code>\nCommand line\nAn archived <code>BytePos</code>\nAn archived <code>CharPos</code>\nAn archived <code>DistinctSources</code>\nAn archived <code>FileName</code>\nAn archived <code>FilePos</code>\nAn archived <code>LineInfo</code>\nAn archived <code>MalformedSourceMapPositions</code>\nAn archived <code>MultiByteChar</code>\nAn archived <code>MultiSpan</code>\nAn archived <code>NonNarrowChar</code>\nAn archived <code>PartialFileLines</code>\nAn archived <code>PartialLoc</code>\nAn archived <code>PrimarySpanLabel</code>\nAn archived <code>SourceFile</code>\nAn archived <code>SourceFileAndBytePos</code>\nAn archived <code>SourceMapLookupError</code>\nAn archived <code>Span</code>\nAn archived <code>SpanLinesError</code>\nAn archived <code>SpanSnippetError</code>\nA byte offset. Keep this small (currently 32-bits), as AST …\nThe resolver for an archived <code>BytePos</code>\nStores the state of the last conversion between BytePos …\nA character offset. Because of multibyte utf8 characters, …\nThe resolver for an archived <code>CharPos</code>\nThe resolver for <code>FileName::Custom</code>\nThe archived counterpart of <code>FileName::Custom</code>\nCustom sources for explicit parser calls from plugins and …\nDummy span, both position and length are zero, syntax …\nThe resolver for <code>SpanLinesError::DistinctSources</code>\nThe archived counterpart of <code>SpanLinesError::DistinctSources</code>\nThe resolver for <code>SpanSnippetError::DistinctSources</code>\nThe archived counterpart of …\nThe resolver for an archived <code>DistinctSources</code>\nThe resolver for <code>SpanSnippetError::DummyBytePos</code>\nThe archived counterpart of <code>SpanSnippetError::DummyBytePos</code>\nA wrapper that attempts to convert a type to and from …\nA wrapper that attempts to convert a Url to and from …\nContains the error value\nContains the error value\nNote: This struct intentionally does not implement rkyv’…\nAn abstraction over the fs operations used by the Parser.\nThe resolver for an archived <code>FileName</code>\nThe resolver for an archived <code>FilePos</code>\nStorage for span hygiene data.\nThe resolver for <code>SpanLinesError::IllFormedSpan</code>\nThe archived counterpart of <code>SpanLinesError::IllFormedSpan</code>\nThe resolver for <code>SpanSnippetError::IllFormedSpan</code>\nThe archived counterpart of <code>SpanSnippetError::IllFormedSpan</code>\nThe resolver for <code>FileName::Internal</code>\nThe archived counterpart of <code>FileName::Internal</code>\nUsed to create a <code>.map</code> file.\nThe resolver for an archived <code>LineInfo</code>\nA source code location used for error reporting Note: This …\nA source code location used as the result of …\nThe resolver for <code>SpanSnippetError::LookupFailed</code>\nThe archived counterpart of <code>SpanSnippetError::LookupFailed</code>\nThe resolver for <code>FileName::MacroExpansion</code>\nThe archived counterpart of <code>FileName::MacroExpansion</code>\nHack in src/libsyntax/parse.rs\nThe resolver for <code>FileName::Macros</code>\nThe archived counterpart of <code>FileName::Macros</code>\nA macro. This includes the full name of the macro, so that …\nThe resolver for <code>SpanSnippetError::MalformedForSourcemap</code>\nThe archived counterpart of …\nThe resolver for an archived <code>MalformedSourceMapPositions</code>\nA mark is a unique id associated with a macro expansion.\nIdentifies an offset of a multi-byte character in a …\nThe resolver for an archived <code>MultiByteChar</code>\nA collection of spans. Spans have two orthogonal …\nThe resolver for an archived <code>MultiSpan</code>\nThe resolver for <code>SourceMapLookupError::NoFileFor</code>\nThe archived counterpart of <code>SourceMapLookupError::NoFileFor</code>\nIdentifies an offset of a non-narrow character in a …\nThe resolver for an archived <code>NonNarrowChar</code>\nContains the success value\nContains the success value\nA struct to exchange <code>FileLines</code> with omitting SourceFile as …\nThe resolver for an archived <code>PartialFileLines</code>\nA struct to exchange <code>Loc</code> with omitting SourceFile as …\nThe resolver for an archived <code>PartialLoc</code>\nThe resolver for an archived <code>PrimarySpanLabel</code>\nThe resolver for <code>FileName::ProcMacroSourceCode</code>\nThe archived counterpart of <code>FileName::ProcMacroSourceCode</code>\nThe resolver for <code>FileName::QuoteExpansion</code>\nThe archived counterpart of <code>FileName::QuoteExpansion</code>\ncall to <code>quote!</code>\nThe resolver for <code>FileName::Real</code>\nThe archived counterpart of <code>FileName::Real</code>\nA FileLoader that uses std::fs to load real files.\nA single source in the SourceMap.\nThe resolver for an archived <code>SourceFileAndBytePos</code>\nThe resolver for an archived <code>SourceFile</code>\nThe interner for spans.\nAn error type for looking up source maps.\nThe resolver for an archived <code>SourceMapLookupError</code>\nThe resolver for <code>SpanSnippetError::SourceNotAvailable</code>\nThe archived counterpart of …\nSpans represent a region of code, used for error …\nThe resolver for an archived <code>SpanLinesError</code>\nThe resolver for an archived <code>Span</code>\nThe resolver for an archived <code>SpanSnippetError</code>\nA SyntaxContext represents a chain of macro expansions …\nThe resolver for <code>NonNarrowChar::Tab</code>\nThe archived counterpart of <code>NonNarrowChar::Tab</code>\nRepresents a tab character, represented visually with a …\nThe resolver for <code>FileName::Url</code>\nThe archived counterpart of <code>FileName::Url</code>\nThe resolver for <code>NonNarrowChar::Wide</code>\nThe archived counterpart of <code>NonNarrowChar::Wide</code>\nRepresents a wide (fullwidth) character\nThe resolver for <code>NonNarrowChar::ZeroWidth</code>\nThe archived counterpart of <code>NonNarrowChar::ZeroWidth</code>\nRepresents a zero-width character\nReturn an absolute path to a file, if possible.\nThe archived counterpart of <code>DistinctSources::begin</code>\nThe archived counterpart of …\nThe archived counterpart of <code>MultiByteChar::bytes</code>\nThe number of bytes, &gt;=2\nThe (0-based) column offset\nThe archived counterpart of <code>PartialLoc::col</code>\nUTF-16 column in line, starting from 0.\nThe (0-based) column offset when displayed\nThe archived counterpart of <code>PartialLoc::col_display</code>\nThe archived counterpart of <code>SourceFile::crate_of_origin</code>\nIndicates which crate this <code>SourceFile</code> was imported from.\nThe archived counterpart of <code>Span::ctxt</code>\nInformation about where the macro came from, if this piece …\nYou can define whether to emit sourcemap with columns or …\nThe archived counterpart of <code>DistinctSources::end</code>\nThe archived counterpart of <code>LineInfo::end_col</code>\nColumn in line where span ends, starting from 0, exclusive.\nThe archived counterpart of <code>SourceFile::end_pos</code>\nThe end position of this source in the <code>SourceMap</code>\nThe archived counterpart of …\nInformation about the original source\nThe archived counterpart of <code>PartialFileLines::file</code>\nQuery the existence of a file.\nReturns\nThe archived counterpart of <code>Span::hi</code>\nMachinery for hygienic macros, inspired by the <code>MTWT[1]</code> …\nYou can override this to control <code>sourceContents</code>.\nIs this a primary span? This is the “locus” of the …\nWhat label should we attach to this span (if any)?\nThe (1-based) line number\nThe archived counterpart of <code>PartialLoc::line</code>\nIndex of line, starting from 0.\nThe archived counterpart of <code>LineInfo::line_index</code>\nIndex of line, starting from 0.\nThe archived counterpart of <code>SourceFile::lines</code>\nLocations of lines beginnings in the source code\nThe archived counterpart of <code>PartialFileLines::lines</code>\nThe archived counterpart of <code>Span::lo</code>\nThe archived counterpart of <code>SourceFile::multibyte_chars</code>\nLocations of multi-byte characters in the source code\nThe archived counterpart of <code>SourceFile::name</code>\nThe name of the file that the source came from. Source …\nThe archived counterpart of …\nReturns identifier starting at <code>bpos</code>.\nThe archived counterpart of <code>SourceFile::name_hash</code>\nA hash of the filename, used for speeding up the incr. …\nThe archived counterpart of <code>SourceFile::name_was_remapped</code>\nTrue if the <code>name</code> field above has been modified by …\nThe archived counterpart of <code>SourceFile::non_narrow_chars</code>\nWidth of characters that are not narrow in the source code\nThe archived counterpart of <code>MultiByteChar::pos</code>\nThe absolute offset of the character in the SourceMap\nThe archived counterpart of <code>SourceFileAndBytePos::pos</code>\nRead the contents of an UTF-8 file into memory.\nThe archived counterpart of <code>SourceFileAndBytePos::sf</code>\nBy default, we skip internal files.\nThe archived counterpart of <code>PartialLoc::source_file</code>\nThe archived counterpart of …\nThe span we are going to include in the final snippet.\nThe archived counterpart of <code>SourceFile::src</code>\nThe complete source code\nThe archived counterpart of <code>SourceFile::src_hash</code>\nThe source code’s hash\nThe archived counterpart of <code>LineInfo::start_col</code>\nColumn in line where span begins, starting from 0.\nThe archived counterpart of <code>SourceFile::start_pos</code>\nThe start position of this source in the <code>SourceMap</code>\nThe archived counterpart of <code>SourceFile::unmapped_path</code>\nThe unmapped path of the file that the source came from. …\nThe archived counterpart of …\nThe resolver for …\nAn archived <code>MutableMarkContext</code>\nAn archived <code>SyntaxContext</code>\nA mark is a unique id associated with a macro expansion.\nThe resolver for an archived <code>MutableMarkContext</code>\nA SyntaxContext represents a chain of macro expansions …\nThe resolver for an archived <code>SyntaxContext</code>\nA value which is initialized on the first access.\nAn RAII implementation of a “scoped lock” of a mutex. …\nA thread-safe reference-counting pointer. ‘Arc’ stands …\nAn RAII mutex guard returned by <code>MutexGuard::map</code>, which can …\nAn RAII read lock guard returned by <code>RwLockReadGuard::map</code>, …\nAn RAII write lock guard returned by <code>RwLockWriteGuard::map</code>…\nA thread-safe cell which can be written to only once.\nRAII structure used to release the shared read access of a …\nTypes that can be transferred across thread boundaries.\nTypes for which it is safe to share references between …\nRAII structure used to release the exclusive write access …\nSame as HashMap::insert, but it may panic if there’s …\nCopied from https://stackoverflow.com/a/49456265/6193633\nCopied from <code>syntax::ptr::P</code> of rustc.\nTransform the inner value, consuming <code>self</code> and producing a …\nModifiers vector in-place.\nThis will be very slow if you try to extend vector using …\nMap in place.\nHelper for people who are working on <code>VisitMut</code>.\nCreate a dummy value of this type.\nMutate <code>self</code> using <code>op</code>, which accepts owned data.\nThe archived counterpart of <code>BinaryOp::Add</code>\n<code>+</code>\nThe archived counterpart of <code>AssignOp::AddAssign</code>\n<code>+=</code>\nEach list item is space-and-ampersand (“ &amp;“) delimited.\nThe archived counterpart of <code>AssignOp::AndAssign</code>\n<code>&amp;&amp;=</code>\nThe list is surrounded by “&lt;” and “&gt;”.\nAn archived <code>Accessibility</code>\nAn archived <code>ArrayLit</code>\nAn archived <code>ArrayPat</code>\nAn archived <code>ArrowExpr</code>\nAn archived <code>AssignExpr</code>\nAn archived <code>AssignOp</code>\nAn archived <code>AssignPat</code>\nAn archived <code>AssignPatProp</code>\nAn archived <code>AssignProp</code>\nAn archived <code>AssignTarget</code>\nAn archived <code>AssignTargetPat</code>\nAn archived <code>AutoAccessor</code>\nAn archived <code>AwaitExpr</code>\nAn archived <code>BigInt</code>\nAn archived <code>BinExpr</code>\nAn archived <code>BinaryOp</code>\nAn archived <code>BindingIdent</code>\nAn archived <code>BlockStmt</code>\nAn archived <code>BlockStmtOrExpr</code>\nAn archived <code>Bool</code>\nAn archived <code>BreakStmt</code>\nAn archived <code>CallExpr</code>\nAn archived <code>Callee</code>\nAn archived <code>CatchClause</code>\nAn archived <code>Class</code>\nAn archived <code>ClassDecl</code>\nAn archived <code>ClassExpr</code>\nAn archived <code>ClassMember</code>\nAn archived <code>ClassMethod</code>\nAn archived <code>ClassProp</code>\nAn archived <code>ComputedPropName</code>\nAn archived <code>CondExpr</code>\nAn archived <code>Constructor</code>\nAn archived <code>ContinueStmt</code>\nAn archived <code>DebuggerStmt</code>\nAn archived <code>Decl</code>\nAn archived <code>Decorator</code>\nAn archived <code>DefaultDecl</code>\nAn archived <code>DoWhileStmt</code>\nAn archived <code>EmptyStmt</code>\nAn archived <code>ExportAll</code>\nAn archived <code>ExportDecl</code>\nAn archived <code>ExportDefaultDecl</code>\nAn archived <code>ExportDefaultExpr</code>\nAn archived <code>ExportDefaultSpecifier</code>\nAn archived <code>ExportNamedSpecifier</code>\nAn archived <code>ExportNamespaceSpecifier</code>\nAn archived <code>ExportSpecifier</code>\nAn archived <code>Expr</code>\nAn archived <code>ExprOrSpread</code>\nAn archived <code>ExprStmt</code>\nAn archived <code>FnDecl</code>\nAn archived <code>FnExpr</code>\nAn archived <code>ForHead</code>\nAn archived <code>ForInStmt</code>\nAn archived <code>ForOfStmt</code>\nAn archived <code>ForStmt</code>\nAn archived <code>Function</code>\nAn archived <code>GetterProp</code>\nAn archived <code>Ident</code>\nAn archived <code>IfStmt</code>\nAn archived <code>Import</code>\nAn archived <code>ImportDecl</code>\nAn archived <code>ImportDefaultSpecifier</code>\nAn archived <code>ImportNamedSpecifier</code>\nAn archived <code>ImportSpecifier</code>\nAn archived <code>ImportStarAsSpecifier</code>\nAn archived <code>Invalid</code>\nAn archived <code>JSXAttr</code>\nAn archived <code>JSXAttrName</code>\nAn archived <code>JSXAttrOrSpread</code>\nAn archived <code>JSXAttrValue</code>\nAn archived <code>JSXClosingElement</code>\nAn archived <code>JSXClosingFragment</code>\nAn archived <code>JSXElement</code>\nAn archived <code>JSXElementChild</code>\nAn archived <code>JSXElementName</code>\nAn archived <code>JSXEmptyExpr</code>\nAn archived <code>JSXExpr</code>\nAn archived <code>JSXExprContainer</code>\nAn archived <code>JSXFragment</code>\nAn archived <code>JSXMemberExpr</code>\nAn archived <code>JSXNamespacedName</code>\nAn archived <code>JSXObject</code>\nAn archived <code>JSXOpeningElement</code>\nAn archived <code>JSXOpeningFragment</code>\nAn archived <code>JSXSpreadChild</code>\nAn archived <code>JSXText</code>\nAn archived <code>Key</code>\nAn archived <code>KeyValuePatProp</code>\nAn archived <code>KeyValueProp</code>\nAn archived <code>LabeledStmt</code>\nAn archived <code>Lit</code>\nAn archived <code>MemberExpr</code>\nAn archived <code>MemberProp</code>\nAn archived <code>MetaPropExpr</code>\nAn archived <code>MetaPropKind</code>\nAn archived <code>MethodKind</code>\nAn archived <code>MethodProp</code>\nAn archived <code>Module</code>\nAn archived <code>ModuleDecl</code>\nAn archived <code>ModuleExportName</code>\nAn archived <code>ModuleItem</code>\nAn archived <code>NamedExport</code>\nAn archived <code>NewExpr</code>\nAn archived <code>Null</code>\nAn archived <code>Number</code>\nAn archived <code>ObjectLit</code>\nAn archived <code>ObjectPat</code>\nAn archived <code>ObjectPatProp</code>\nAn archived <code>OptCall</code>\nAn archived <code>OptChainBase</code>\nAn archived <code>OptChainExpr</code>\nAn archived <code>Param</code>\nAn archived <code>ParamOrTsParamProp</code>\nAn archived <code>ParenExpr</code>\nAn archived <code>Pat</code>\nAn archived <code>PrivateMethod</code>\nAn archived <code>PrivateName</code>\nAn archived <code>PrivateProp</code>\nAn archived <code>Program</code>\nAn archived <code>Prop</code>\nAn archived <code>PropName</code>\nAn archived <code>PropOrSpread</code>\nAn archived <code>Regex</code>\nAn archived <code>ReservedUnused</code>\nAn archived <code>RestPat</code>\nAn archived <code>ReturnStmt</code>\nAn archived <code>Script</code>\nAn archived <code>SeqExpr</code>\nAn archived <code>SetterProp</code>\nAn archived <code>SimpleAssignTarget</code>\nAn archived <code>SpreadElement</code>\nAn archived <code>StaticBlock</code>\nAn archived <code>Stmt</code>\nAn archived <code>Str</code>\nAn archived <code>Super</code>\nAn archived <code>SuperProp</code>\nAn archived <code>SuperPropExpr</code>\nAn archived <code>SwitchCase</code>\nAn archived <code>SwitchStmt</code>\nAn archived <code>TaggedTpl</code>\nAn archived <code>ThisExpr</code>\nAn archived <code>ThrowStmt</code>\nAn archived <code>Tpl</code>\nAn archived <code>TplElement</code>\nAn archived <code>TruePlusMinus</code>\nAn archived <code>TryStmt</code>\nAn archived <code>TsArrayType</code>\nAn archived <code>TsAsExpr</code>\nAn archived <code>TsCallSignatureDecl</code>\nAn archived <code>TsConditionalType</code>\nAn archived <code>TsConstAssertion</code>\nAn archived <code>TsConstructSignatureDecl</code>\nAn archived <code>TsConstructorType</code>\nAn archived <code>TsEntityName</code>\nAn archived <code>TsEnumDecl</code>\nAn archived <code>TsEnumMember</code>\nAn archived <code>TsEnumMemberId</code>\nAn archived <code>TsExportAssignment</code>\nAn archived <code>TsExprWithTypeArgs</code>\nAn archived <code>TsExternalModuleRef</code>\nAn archived <code>TsFnOrConstructorType</code>\nAn archived <code>TsFnParam</code>\nAn archived <code>TsFnType</code>\nAn archived <code>TsGetterSignature</code>\nAn archived <code>TsImportEqualsDecl</code>\nAn archived <code>TsImportType</code>\nAn archived <code>TsIndexSignature</code>\nAn archived <code>TsIndexedAccessType</code>\nAn archived <code>TsInferType</code>\nAn archived <code>TsInstantiation</code>\nAn archived <code>TsInterfaceBody</code>\nAn archived <code>TsInterfaceDecl</code>\nAn archived <code>TsIntersectionType</code>\nAn archived <code>TsKeywordType</code>\nAn archived <code>TsKeywordTypeKind</code>\nAn archived <code>TsLit</code>\nAn archived <code>TsLitType</code>\nAn archived <code>TsMappedType</code>\nAn archived <code>TsMethodSignature</code>\nAn archived <code>TsModuleBlock</code>\nAn archived <code>TsModuleDecl</code>\nAn archived <code>TsModuleName</code>\nAn archived <code>TsModuleRef</code>\nAn archived <code>TsNamespaceBody</code>\nAn archived <code>TsNamespaceDecl</code>\nAn archived <code>TsNamespaceExportDecl</code>\nAn archived <code>TsNonNullExpr</code>\nAn archived <code>TsOptionalType</code>\nAn archived <code>TsParamProp</code>\nAn archived <code>TsParamPropParam</code>\nAn archived <code>TsParenthesizedType</code>\nAn archived <code>TsPropertySignature</code>\nAn archived <code>TsQualifiedName</code>\nAn archived <code>TsRestType</code>\nAn archived <code>TsSatisfiesExpr</code>\nAn archived <code>TsSetterSignature</code>\nAn archived <code>TsThisType</code>\nAn archived <code>TsThisTypeOrIdent</code>\nAn archived <code>TsTplLitType</code>\nAn archived <code>TsTupleElement</code>\nAn archived <code>TsTupleType</code>\nAn archived <code>TsType</code>\nAn archived <code>TsTypeAliasDecl</code>\nAn archived <code>TsTypeAnn</code>\nAn archived <code>TsTypeAssertion</code>\nAn archived <code>TsTypeElement</code>\nAn archived <code>TsTypeLit</code>\nAn archived <code>TsTypeOperator</code>\nAn archived <code>TsTypeOperatorOp</code>\nAn archived <code>TsTypeParam</code>\nAn archived <code>TsTypeParamDecl</code>\nAn archived <code>TsTypeParamInstantiation</code>\nAn archived <code>TsTypePredicate</code>\nAn archived <code>TsTypeQuery</code>\nAn archived <code>TsTypeQueryExpr</code>\nAn archived <code>TsTypeRef</code>\nAn archived <code>TsUnionOrIntersectionType</code>\nAn archived <code>TsUnionType</code>\nAn archived <code>UnaryExpr</code>\nAn archived <code>UnaryOp</code>\nAn archived <code>UpdateExpr</code>\nAn archived <code>UpdateOp</code>\nAn archived <code>UsingDecl</code>\nAn archived <code>VarDecl</code>\nAn archived <code>VarDeclKind</code>\nAn archived <code>VarDeclOrExpr</code>\nAn archived <code>VarDeclarator</code>\nAn archived <code>WhileStmt</code>\nAn archived <code>WithStmt</code>\nAn archived <code>YieldExpr</code>\nThe resolver for <code>Expr::Array</code>\nThe archived counterpart of <code>Expr::Array</code>\nThe resolver for <code>AssignTargetPat::Array</code>\nThe archived counterpart of <code>AssignTargetPat::Array</code>\nThe archived counterpart of <code>Pat::Array</code>\nThe archived counterpart of <code>TsFnParam::Array</code>\nArray literal.\nThe resolver for an archived <code>ArrayLit</code>\nThe resolver for <code>Expr::Arrow</code>\nThe archived counterpart of <code>Expr::Arrow</code>\nThe resolver for an archived <code>ArrowExpr</code>\nThe resolver for <code>Expr::Assign</code>\nThe archived counterpart of <code>Expr::Assign</code>\nThe archived counterpart of <code>AssignOp::Assign</code>\n<code>=</code>\nThe archived counterpart of <code>Pat::Assign</code>\nThe archived counterpart of <code>ObjectPatProp::Assign</code>\nThe archived counterpart of <code>Prop::Assign</code>\nThis is <strong>invalid</strong> for object literal.\nThe archived counterpart of <code>TsParamPropParam::Assign</code>\nThe resolver for an archived <code>AssignExpr</code>\n<code>{key}</code> or <code>{key = value}</code>\nThe resolver for an archived <code>AssignTargetPat</code>\nThe resolver for an archived <code>AssignTarget</code>\nThe archived counterpart of <code>ClassMember::AutoAccessor</code>\nStage 3\nThe resolver for <code>Expr::Await</code>\nThe archived counterpart of <code>Expr::Await</code>\nThe resolver for an archived <code>AwaitExpr</code>\nThe archived counterpart of <code>UnaryOp::Bang</code>\n<code>!</code>\nEach list item is space-and-bar (“ |“) delimited.\nThe archived counterpart of <code>Lit::BigInt</code>\nThe archived counterpart of <code>PropName::BigInt</code>\nThe archived counterpart of <code>TsLit::BigInt</code>\nThe resolver for <code>Expr::Bin</code>\nThe archived counterpart of <code>Expr::Bin</code>\nThe resolver for an archived <code>BinExpr</code>\nIdentifier used as a pattern.\nThe archived counterpart of <code>BinaryOp::BitAnd</code>\n<code>&amp;</code>\nThe archived counterpart of <code>AssignOp::BitAndAssign</code>\n<code>&amp;=</code>\nThe archived counterpart of <code>BinaryOp::BitOr</code>\n<code>|</code>\nThe archived counterpart of <code>AssignOp::BitOrAssign</code>\n<code>|=</code>\nThe archived counterpart of <code>BinaryOp::BitXor</code>\n<code>^</code>\nThe archived counterpart of <code>AssignOp::BitXorAssign</code>\n<code>^=</code>\nThe archived counterpart of <code>Stmt::Block</code>\nUse when only block statements are allowed.\nThe resolver for <code>BlockStmtOrExpr::BlockStmt</code>\nThe archived counterpart of <code>BlockStmtOrExpr::BlockStmt</code>\nThe resolver for an archived <code>BlockStmtOrExpr</code>\nA boolean literal.\nThe archived counterpart of <code>Lit::Bool</code>\nThe archived counterpart of <code>TsLit::Bool</code>\nThe list is surrounded by “{” and “}”.\nThe archived counterpart of <code>Stmt::Break</code>\nThe resolver for <code>Expr::Call</code>\nThe archived counterpart of <code>Expr::Call</code>\nThe resolver for <code>OptChainBase::Call</code>\nThe archived counterpart of <code>OptChainBase::Call</code>\nThe resolver for an archived <code>CallExpr</code>\nThe resolver for an archived <code>Callee</code>\nThe archived counterpart of <code>Decl::Class</code>\nThe resolver for <code>Expr::Class</code>\nThe archived counterpart of <code>Expr::Class</code>\nThe archived counterpart of <code>DefaultDecl::Class</code>\nClass expression.\nThe resolver for an archived <code>ClassExpr</code>\nThe archived counterpart of <code>ClassMember::ClassProp</code>\nstage 0 / Typescript\nEach list item is comma (“;”) delimited.\nThe resolver for <code>MemberProp::Computed</code>\nThe archived counterpart of <code>MemberProp::Computed</code>\nThe resolver for <code>SuperProp::Computed</code>\nThe archived counterpart of <code>SuperProp::Computed</code>\nThe archived counterpart of <code>PropName::Computed</code>\nThe resolver for <code>Expr::Cond</code>\nThe archived counterpart of <code>Expr::Cond</code>\ntrue ? ‘a’ : ‘b’\nThe resolver for an archived <code>CondExpr</code>\nThe archived counterpart of <code>VarDeclKind::Const</code>\n<code>const</code>\nThe archived counterpart of <code>ClassMember::Constructor</code>\nThe archived counterpart of <code>Stmt::Continue</code>\nThe archived counterpart of <code>Stmt::Debugger</code>\nThe archived counterpart of <code>Stmt::Decl</code>\nThe archived counterpart of <code>ImportSpecifier::Default</code>\nThe archived counterpart of <code>ExportSpecifier::Default</code>\nThe archived counterpart of <code>UnaryOp::Delete</code>\n<code>delete</code>\nThe archived counterpart of <code>BinaryOp::Div</code>\n<code>/</code>\nThe archived counterpart of <code>AssignOp::DivAssign</code>\n<code>/=</code>\nThe archived counterpart of <code>Stmt::DoWhile</code>\nThe archived counterpart of <code>ClassMember::Empty</code>\nThe archived counterpart of <code>Stmt::Empty</code>\nThe archived counterpart of <code>BinaryOp::EqEq</code>\n<code>==</code>\nThe archived counterpart of <code>BinaryOp::EqEqEq</code>\n<code>===</code>\nNote: This type implements <code>Serailize</code> and <code>Deserialize</code> if …\nThe archived counterpart of <code>BinaryOp::Exp</code>\n<code>**</code>\nThe archived counterpart of <code>AssignOp::ExpAssign</code>\n<code>**=</code>\n<code>export * from &#39;mod&#39;</code>\nThe archived counterpart of <code>ModuleDecl::ExportAll</code>\nThe archived counterpart of <code>ModuleDecl::ExportDecl</code>\nThe archived counterpart of <code>ModuleDecl::ExportDefaultDecl</code>\nDefault exports other than <strong>direct</strong> function expression or …\nThe archived counterpart of <code>ModuleDecl::ExportDefaultExpr</code>\nThe archived counterpart of <code>ModuleDecl::ExportNamed</code>\n<code>export * as foo from &#39;src&#39;;</code>\nThe resolver for <code>Callee::Expr</code>\nThe archived counterpart of <code>Callee::Expr</code>\nThe resolver for <code>BlockStmtOrExpr::Expr</code>\nThe archived counterpart of <code>BlockStmtOrExpr::Expr</code>\nThe archived counterpart of <code>JSXExpr::Expr</code>\nThe archived counterpart of <code>Pat::Expr</code>\nOnly for for-in / for-of loops. This is <em>syntactically</em> …\nThe archived counterpart of <code>Stmt::Expr</code>\nThe archived counterpart of <code>VarDeclOrExpr::Expr</code>\nThe resolver for an archived <code>ExprOrSpread</code>\nThe resolver for an archived <code>Expr</code>\nThe archived counterpart of <code>Decl::Fn</code>\nThe resolver for <code>Expr::Fn</code>\nThe archived counterpart of <code>Expr::Fn</code>\nThe archived counterpart of <code>DefaultDecl::Fn</code>\nFunction expression.\nThe resolver for an archived <code>FnExpr</code>\nThe archived counterpart of <code>Stmt::For</code>\nA head for for-in and for-of loop.\nThe archived counterpart of <code>Stmt::ForIn</code>\nThe archived counterpart of <code>Stmt::ForOf</code>\nCommon parts of function and method.\nThe archived counterpart of <code>MethodKind::Getter</code>\nThe archived counterpart of <code>Prop::Getter</code>\nThe archived counterpart of <code>BinaryOp::Gt</code>\n<code>&gt;</code>\nThe archived counterpart of <code>BinaryOp::GtEq</code>\n<code>&gt;=</code>\nSee Ident for documentation.\nA complete identifier with span.\nThe resolver for <code>Expr::Ident</code>\nThe archived counterpart of <code>Expr::Ident</code>\nThe resolver for <code>MemberProp::Ident</code>\nThe archived counterpart of <code>MemberProp::Ident</code>\nThe resolver for <code>SuperProp::Ident</code>\nThe archived counterpart of <code>SuperProp::Ident</code>\nThe resolver for <code>SimpleAssignTarget::Ident</code>\nThe archived counterpart of <code>SimpleAssignTarget::Ident</code>\nNote: This type is to help implementing visitor and the …\nThe archived counterpart of <code>JSXObject::Ident</code>\nThe archived counterpart of <code>JSXElementName::Ident</code>\nThe archived counterpart of <code>JSXAttrName::Ident</code>\nThe archived counterpart of <code>ModuleExportName::Ident</code>\nThe archived counterpart of <code>Pat::Ident</code>\nThe archived counterpart of <code>PropName::Ident</code>\nThe archived counterpart of <code>TsParamPropParam::Ident</code>\nThe archived counterpart of <code>TsEntityName::Ident</code>\nThe archived counterpart of <code>TsFnParam::Ident</code>\nThe archived counterpart of <code>TsThisTypeOrIdent::Ident</code>\nThe archived counterpart of <code>TsEnumMemberId::Ident</code>\nThe archived counterpart of <code>TsModuleName::Ident</code>\nThe archived counterpart of <code>Stmt::If</code>\nThe resolver for <code>Callee::Import</code>\nThe archived counterpart of <code>Callee::Import</code>\nThe archived counterpart of <code>ModuleDecl::Import</code>\nThe archived counterpart of <code>TsTypeQueryExpr::Import</code>\ne.g. <code>import foo from &#39;mod.js&#39;</code>\nThe resolver for <code>MetaPropKind::ImportMeta</code>\nThe archived counterpart of <code>MetaPropKind::ImportMeta</code>\n<code>import.meta</code>\ne.g. local = foo, imported = None …\nThe resolver for an archived <code>Import</code>\ne.g. <code>import * as foo from &#39;mod.js&#39;</code>.\nAccording to the current spec <code>with</code> of crate::ImportDecl …\nThe archived counterpart of <code>BinaryOp::In</code>\n<code>in</code>\nThe list should be indented.\nThe archived counterpart of <code>BinaryOp::InstanceOf</code>\n<code>instanceof</code>\nRepresents a invalid node.\nThe resolver for <code>Expr::Invalid</code>\nThe archived counterpart of <code>Expr::Invalid</code>\nThe resolver for <code>AssignTargetPat::Invalid</code>\nThe archived counterpart of <code>AssignTargetPat::Invalid</code>\nThe resolver for <code>SimpleAssignTarget::Invalid</code>\nThe archived counterpart of <code>SimpleAssignTarget::Invalid</code>\nThe archived counterpart of <code>Pat::Invalid</code>\nThe resolver for an archived <code>Invalid</code>\nThe archived counterpart of <code>JSXAttrOrSpread::JSXAttr</code>\nThe resolver for <code>Expr::JSXElement</code>\nThe archived counterpart of <code>Expr::JSXElement</code>\nThe archived counterpart of <code>JSXAttrValue::JSXElement</code>\nThe archived counterpart of <code>JSXElementChild::JSXElement</code>\nThe resolver for <code>Expr::JSXEmpty</code>\nThe archived counterpart of <code>Expr::JSXEmpty</code>\nThe archived counterpart of <code>JSXExpr::JSXEmptyExpr</code>\nThe archived counterpart of <code>JSXAttrValue::JSXExprContainer</code>\nThe archived counterpart of …\nThe resolver for <code>Expr::JSXFragment</code>\nThe archived counterpart of <code>Expr::JSXFragment</code>\nThe archived counterpart of <code>JSXAttrValue::JSXFragment</code>\nThe archived counterpart of <code>JSXElementChild::JSXFragment</code>\nThe resolver for <code>Expr::JSXMember</code>\nThe archived counterpart of <code>Expr::JSXMember</code>\nThe archived counterpart of <code>JSXObject::JSXMemberExpr</code>\nThe archived counterpart of <code>JSXElementName::JSXMemberExpr</code>\nXML-based namespace syntax:\nThe resolver for <code>Expr::JSXNamespacedName</code>\nThe archived counterpart of <code>Expr::JSXNamespacedName</code>\nThe archived counterpart of …\nThe archived counterpart of <code>JSXAttrName::JSXNamespacedName</code>\nUsed for <code>obj</code> property of <code>JSXMemberExpr</code>.\nThe archived counterpart of <code>JSXElementChild::JSXSpreadChild</code>\nThe archived counterpart of <code>JSXElementChild::JSXText</code>\nThe archived counterpart of <code>Lit::JSXText</code>\nEither a private name or a public name.\nThe archived counterpart of <code>TsTypeOperatorOp::KeyOf</code>\n<code>keyof</code>\nThe archived counterpart of <code>ObjectPatProp::KeyValue</code>\nThe archived counterpart of <code>Prop::KeyValue</code>\n<code>key: value</code> in <code>{ key: value, }</code>\n<code>{key: value}</code>\nThe archived counterpart of <code>BinaryOp::LShift</code>\n<code>&lt;&lt;</code>\nThe archived counterpart of <code>AssignOp::LShiftAssign</code>\n<code>&lt;&lt;=</code>\nThe archived counterpart of <code>Stmt::Labeled</code>\nThe archived counterpart of <code>VarDeclKind::Let</code>\n<code>let</code>\nRepresents the formatting rule for a list of nodes.\nThe resolver for <code>Expr::Lit</code>\nThe archived counterpart of <code>Expr::Lit</code>\nThe archived counterpart of <code>JSXAttrValue::Lit</code>\nThe archived counterpart of <code>BinaryOp::LogicalAnd</code>\n<code>&amp;&amp;</code>\nThe archived counterpart of <code>BinaryOp::LogicalOr</code>\n<code>||</code>\nThe archived counterpart of <code>BinaryOp::Lt</code>\n<code>&lt;</code>\nThe archived counterpart of <code>BinaryOp::LtEq</code>\n<code>&lt;=</code>\nThe resolver for <code>Expr::Member</code>\nThe archived counterpart of <code>Expr::Member</code>\nA member expression. If computed is true, the node …\nThe resolver for <code>SimpleAssignTarget::Member</code>\nThe archived counterpart of <code>SimpleAssignTarget::Member</code>\nThe resolver for <code>OptChainBase::Member</code>\nThe archived counterpart of <code>OptChainBase::Member</code>\nThe resolver for an archived <code>MemberExpr</code>\nThe resolver for an archived <code>MemberProp</code>\nThe resolver for <code>Expr::MetaProp</code>\nThe archived counterpart of <code>Expr::MetaProp</code>\nThe resolver for an archived <code>MetaPropExpr</code>\nThe resolver for an archived <code>MetaPropKind</code>\nThe archived counterpart of <code>ClassMember::Method</code>\n<code>es2015</code>\nThe archived counterpart of <code>MethodKind::Method</code>\nThe archived counterpart of <code>Prop::Method</code>\nThe archived counterpart of <code>UnaryOp::Minus</code>\n<code>-</code>\nThe archived counterpart of <code>TruePlusMinus::Minus</code>\nThe archived counterpart of <code>UpdateOp::MinusMinus</code>\n<code>--</code>\nThe archived counterpart of <code>BinaryOp::Mod</code>\n<code>%</code>\nThe archived counterpart of <code>AssignOp::ModAssign</code>\n<code>%=</code>\nThe archived counterpart of <code>Program::Module</code>\nThe archived counterpart of <code>ModuleItem::ModuleDecl</code>\nThe archived counterpart of <code>BinaryOp::Mul</code>\n<code>*</code>\nThe archived counterpart of <code>AssignOp::MulAssign</code>\n<code>*=</code>\nPrints the list on multiple lines.\nThe archived counterpart of <code>ImportSpecifier::Named</code>\nThe archived counterpart of <code>ExportSpecifier::Named</code>\n<code>export { foo } from &#39;mod&#39;</code> <code>export { foo as bar } from &#39;mod&#39;</code>\nThe archived counterpart of <code>ImportSpecifier::Namespace</code>\nThe archived counterpart of <code>ExportSpecifier::Namespace</code>\nThe resolver for <code>Expr::New</code>\nThe archived counterpart of <code>Expr::New</code>\n<code>new Cat()</code>\nThe resolver for an archived <code>NewExpr</code>\nThe resolver for <code>MetaPropKind::NewTarget</code>\nThe archived counterpart of <code>MetaPropKind::NewTarget</code>\n<code>new.target</code>\nDo not emit comments between each node\nIf the literal is empty; do not add spaces between braces.\nDo not emit a trailing NewLine for a MultiLine list.\nDefault value.\nThere is no delimiter between list items (default).\nThe archived counterpart of <code>BinaryOp::NotEq</code>\n<code>!=</code>\nThe archived counterpart of <code>BinaryOp::NotEqEq</code>\n<code>!==</code>\nThe archived counterpart of <code>Lit::Null</code>\nThe archived counterpart of <code>AssignOp::NullishAssign</code>\n<code>??=</code>\nThe archived counterpart of <code>BinaryOp::NullishCoalescing</code>\n<code>??</code>\nThe archived counterpart of <code>Lit::Num</code>\nThe archived counterpart of <code>PropName::Num</code>\nNumeric literal.\nA numeric literal.\nThe archived counterpart of <code>TsLit::Number</code>\nThe resolver for <code>Expr::Object</code>\nThe archived counterpart of <code>Expr::Object</code>\nThe resolver for <code>AssignTargetPat::Object</code>\nThe archived counterpart of <code>AssignTargetPat::Object</code>\nThe archived counterpart of <code>Pat::Object</code>\nThe archived counterpart of <code>TsFnParam::Object</code>\nObject literal.\nThe resolver for an archived <code>ObjectLit</code>\nThe resolver for an archived <code>OptCall</code>\nThe resolver for <code>Expr::OptChain</code>\nThe archived counterpart of <code>Expr::OptChain</code>\nThe resolver for <code>SimpleAssignTarget::OptChain</code>\nThe archived counterpart of <code>SimpleAssignTarget::OptChain</code>\nThe resolver for an archived <code>OptChainBase</code>\nThe resolver for an archived <code>OptChainExpr</code>\nDo not emit brackets if the list is empty.\nDo not emit brackets if the list is undefined.\nThe archived counterpart of <code>AssignOp::OrAssign</code>\n<code>||=</code>\nThe archived counterpart of <code>ParamOrTsParamProp::Param</code>\nThe resolver for <code>Expr::Paren</code>\nThe archived counterpart of <code>Expr::Paren</code>\nThe resolver for <code>SimpleAssignTarget::Paren</code>\nThe archived counterpart of <code>SimpleAssignTarget::Paren</code>\nThe resolver for an archived <code>ParenExpr</code>\nThe list is surrounded by “(” and “)”.\nThe resolver for <code>AssignTarget::Pat</code>\nThe archived counterpart of <code>AssignTarget::Pat</code>\nThe archived counterpart of <code>ForHead::Pat</code>\nThe archived counterpart of <code>UnaryOp::Plus</code>\n<code>+</code>\nThe archived counterpart of <code>TruePlusMinus::Plus</code>\nThe archived counterpart of <code>UpdateOp::PlusPlus</code>\n<code>++</code>\nPrefer adding a LineTerminator between synthesized nodes.\nPrints the list using line preservation if possible.\nThe archived counterpart of <code>Key::Private</code>\nThe archived counterpart of <code>Accessibility::Private</code>\nThe archived counterpart of <code>ClassMember::PrivateMethod</code>\nThe resolver for <code>Expr::PrivateName</code>\nThe archived counterpart of <code>Expr::PrivateName</code>\nThe resolver for <code>MemberProp::PrivateName</code>\nThe archived counterpart of <code>MemberProp::PrivateName</code>\nThe archived counterpart of <code>ClassMember::PrivateProp</code>\nThe resolver for <code>PropOrSpread::Prop</code>\nThe archived counterpart of <code>PropOrSpread::Prop</code>\nThe resolver for an archived <code>PropOrSpread</code>\nThe archived counterpart of <code>Accessibility::Protected</code>\nThe archived counterpart of <code>Key::Public</code>\nThe archived counterpart of <code>Accessibility::Public</code>\nThe archived counterpart of <code>BinaryOp::RShift</code>\n<code>&gt;&gt;</code>\nThe archived counterpart of <code>AssignOp::RShiftAssign</code>\n<code>&gt;&gt;=</code>\nThe archived counterpart of <code>TsTypeOperatorOp::ReadOnly</code>\n<code>readonly</code>\nThe archived counterpart of <code>Lit::Regex</code>\nThe archived counterpart of <code>Pat::Rest</code>\nThe archived counterpart of <code>ObjectPatProp::Rest</code>\nThe archived counterpart of <code>TsFnParam::Rest</code>\nEsTree <code>RestElement</code>\nThe archived counterpart of <code>Stmt::Return</code>\nThe archived counterpart of <code>Program::Script</code>\nThe resolver for <code>Expr::Seq</code>\nThe archived counterpart of <code>Expr::Seq</code>\nThe resolver for an archived <code>SeqExpr</code>\nThe archived counterpart of <code>MethodKind::Setter</code>\nThe archived counterpart of <code>Prop::Setter</code>\nThe archived counterpart of <code>Prop::Shorthand</code>\n<code>a</code> in <code>{ a, }</code>\nThe resolver for <code>AssignTarget::Simple</code>\nThe archived counterpart of <code>AssignTarget::Simple</code>\nThe resolver for an archived <code>SimpleAssignTarget</code>\nPrints the list on a single line (default).\nInserts a space after the opening brace and before the …\nInserts a space between each sibling node.\nThe resolver for <code>PropOrSpread::Spread</code>\nThe archived counterpart of <code>PropOrSpread::Spread</code>\nSpread properties, e.g., <code>{a: 1, ...obj, b: 2}</code>.\nThe archived counterpart of <code>JSXAttrOrSpread::SpreadElement</code>\nThe resolver for an archived <code>SpreadElement</code>\nThe list is surrounded by “[” and “]”.\nThe archived counterpart of <code>ClassMember::StaticBlock</code>\nStage 3\nThe archived counterpart of <code>ModuleItem::Stmt</code>\nA string literal.\nThe archived counterpart of <code>Lit::Str</code>\nThe archived counterpart of <code>ModuleExportName::Str</code>\nThe archived counterpart of <code>PropName::Str</code>\nString literal.\nThe archived counterpart of <code>TsLit::Str</code>\nThe archived counterpart of <code>TsEnumMemberId::Str</code>\nThe archived counterpart of <code>TsModuleName::Str</code>\nThe archived counterpart of <code>BinaryOp::Sub</code>\n<code>-</code>\nThe archived counterpart of <code>AssignOp::SubAssign</code>\n<code>-=</code>\nThe resolver for <code>Callee::Super</code>\nThe archived counterpart of <code>Callee::Super</code>\nThe resolver for <code>Expr::SuperProp</code>\nThe archived counterpart of <code>Expr::SuperProp</code>\nThe resolver for <code>SimpleAssignTarget::SuperProp</code>\nThe archived counterpart of <code>SimpleAssignTarget::SuperProp</code>\nThe resolver for an archived <code>SuperPropExpr</code>\nThe resolver for an archived <code>SuperProp</code>\nThe resolver for an archived <code>Super</code>\nThe archived counterpart of <code>Stmt::Switch</code>\nThe resolver for <code>Expr::TaggedTpl</code>\nThe archived counterpart of <code>Expr::TaggedTpl</code>\nThe resolver for an archived <code>TaggedTpl</code>\nThe resolver for <code>Expr::This</code>\nThe archived counterpart of <code>Expr::This</code>\nThe resolver for an archived <code>ThisExpr</code>\nThe archived counterpart of <code>Stmt::Throw</code>\nThe archived counterpart of <code>UnaryOp::Tilde</code>\n<code>~</code>\nThe resolver for <code>Expr::Tpl</code>\nThe archived counterpart of <code>Expr::Tpl</code>\nThe archived counterpart of <code>TsLit::Tpl</code>\nThe resolver for an archived <code>TplElement</code>\nThe resolver for an archived <code>Tpl</code>\nThe archived counterpart of <code>TruePlusMinus::True</code>\nThe archived counterpart of <code>Stmt::Try</code>\nA try statement. If handler is null then finalizer must be …\nThe archived counterpart of <code>TsKeywordTypeKind::TsAnyKeyword</code>\nThe archived counterpart of <code>TsType::TsArrayType</code>\nThe resolver for <code>Expr::TsAs</code>\nThe archived counterpart of <code>Expr::TsAs</code>\nThe resolver for <code>SimpleAssignTarget::TsAs</code>\nThe archived counterpart of <code>SimpleAssignTarget::TsAs</code>\nThe archived counterpart of …\nThe archived counterpart of …\nThe archived counterpart of …\nThe archived counterpart of <code>TsType::TsConditionalType</code>\nThe resolver for <code>Expr::TsConstAssertion</code>\nThe archived counterpart of <code>Expr::TsConstAssertion</code>\nThe archived counterpart of …\nThe archived counterpart of …\nThe archived counterpart of <code>TsTypeQueryExpr::TsEntityName</code>\nThe archived counterpart of <code>TsModuleRef::TsEntityName</code>\nThe archived counterpart of <code>Decl::TsEnum</code>\nInvalid: Ident with empty symbol.\nTypeScript’s own parser uses ExportAssignment for both …\nThe archived counterpart of <code>ModuleDecl::TsExportAssignment</code>\nThe archived counterpart of …\nThe archived counterpart of <code>TsType::TsFnOrConstructorType</code>\nThe archived counterpart of <code>TsFnOrConstructorType::TsFnType</code>\nThe archived counterpart of …\nThe archived counterpart of <code>ModuleDecl::TsImportEquals</code>\nThe archived counterpart of <code>TsType::TsImportType</code>\nThe archived counterpart of <code>ClassMember::TsIndexSignature</code>\nThe archived counterpart of <code>TsTypeElement::TsIndexSignature</code>\nThe archived counterpart of <code>TsType::TsIndexedAccessType</code>\nThe archived counterpart of <code>TsType::TsInferType</code>\nThe resolver for <code>Expr::TsInstantiation</code>\nThe archived counterpart of <code>Expr::TsInstantiation</code>\nThe resolver for <code>SimpleAssignTarget::TsInstantiation</code>\nThe archived counterpart of …\nThe archived counterpart of <code>Decl::TsInterface</code>\nThe archived counterpart of <code>DefaultDecl::TsInterfaceDecl</code>\nThe archived counterpart of …\nThe archived counterpart of …\nThe archived counterpart of <code>TsType::TsKeywordType</code>\nThe archived counterpart of <code>TsType::TsLitType</code>\nThe archived counterpart of <code>TsType::TsMappedType</code>\nThe archived counterpart of …\nThe archived counterpart of <code>Decl::TsModule</code>\nThe archived counterpart of <code>TsNamespaceBody::TsModuleBlock</code>\n<code>namespace A.B { }</code> is a namespace named <code>A</code> with another …\nThe archived counterpart of …\nThe archived counterpart of <code>ModuleDecl::TsNamespaceExport</code>\nThe archived counterpart of …\nThe resolver for <code>Expr::TsNonNull</code>\nThe archived counterpart of <code>Expr::TsNonNull</code>\nThe resolver for <code>SimpleAssignTarget::TsNonNull</code>\nThe archived counterpart of <code>SimpleAssignTarget::TsNonNull</code>\nThe archived counterpart of …\nThe archived counterpart of …\nThe archived counterpart of …\nThe archived counterpart of <code>TsType::TsOptionalType</code>\nThe archived counterpart of <code>ParamOrTsParamProp::TsParamProp</code>\nThe archived counterpart of <code>TsType::TsParenthesizedType</code>\nThe archived counterpart of …\nThe archived counterpart of <code>TsEntityName::TsQualifiedName</code>\nThe archived counterpart of <code>TsType::TsRestType</code>\nThe resolver for <code>Expr::TsSatisfies</code>\nThe archived counterpart of <code>Expr::TsSatisfies</code>\nThe resolver for <code>SimpleAssignTarget::TsSatisfies</code>\nThe archived counterpart of <code>SimpleAssignTarget::TsSatisfies</code>\nThe archived counterpart of …\nThe archived counterpart of …\nThe archived counterpart of …\nThe archived counterpart of <code>TsType::TsThisType</code>\nThe archived counterpart of <code>TsThisTypeOrIdent::TsThisType</code>\nThe archived counterpart of <code>TsType::TsTupleType</code>\nThe archived counterpart of <code>Decl::TsTypeAlias</code>\nThe resolver for <code>Expr::TsTypeAssertion</code>\nThe archived counterpart of <code>Expr::TsTypeAssertion</code>\nThe resolver for <code>SimpleAssignTarget::TsTypeAssertion</code>\nThe archived counterpart of …\nThe archived counterpart of <code>TsType::TsTypeLit</code>\nThe archived counterpart of <code>TsType::TsTypeOperator</code>\nThe archived counterpart of <code>TsType::TsTypePredicate</code>\n<code>typeof</code> operator\nThe archived counterpart of <code>TsType::TsTypeQuery</code>\nThe archived counterpart of <code>TsType::TsTypeRef</code>\nThe archived counterpart of …\nThe archived counterpart of …\nThe archived counterpart of …\nThe archived counterpart of …\nThe archived counterpart of …\nThe archived counterpart of <code>UnaryOp::TypeOf</code>\n<code>typeof</code>\nThe resolver for <code>Expr::Unary</code>\nThe archived counterpart of <code>Expr::Unary</code>\nThe resolver for an archived <code>UnaryExpr</code>\nThe archived counterpart of <code>TsTypeOperatorOp::Unique</code>\n<code>unique</code>\nThe resolver for <code>Expr::Update</code>\nThe archived counterpart of <code>Expr::Update</code>\n<code>++v</code>, <code>--v</code>, <code>v++</code>, <code>v--</code>\nThe resolver for an archived <code>UpdateExpr</code>\nThe archived counterpart of <code>Decl::Using</code>\nThe archived counterpart of <code>ForHead::UsingDecl</code>\nThe archived counterpart of <code>Decl::Var</code>\nThe archived counterpart of <code>VarDeclKind::Var</code>\n<code>var</code>\nThe archived counterpart of <code>ForHead::VarDecl</code>\nThe archived counterpart of <code>VarDeclOrExpr::VarDecl</code>\nThe archived counterpart of <code>UnaryOp::Void</code>\n<code>void</code>\nThe archived counterpart of <code>Stmt::While</code>\nThe archived counterpart of <code>Stmt::With</code>\nThe resolver for <code>Expr::Yield</code>\nThe archived counterpart of <code>Expr::Yield</code>\nThe resolver for an archived <code>YieldExpr</code>\nThe archived counterpart of <code>BinaryOp::ZeroFillRShift</code>\n<code>&gt;&gt;&gt;</code>\nThe archived counterpart of <code>AssignOp::ZeroFillRShiftAssign</code>\n<code>&gt;&gt;&gt;=</code>\nThe archived counterpart of <code>ClassProp::accessibility</code>\nTypescript extension.\nThe archived counterpart of <code>PrivateProp::accessibility</code>\nTypescript extension.\nThe archived counterpart of <code>ClassMethod::accessibility</code>\nTypescript extension.\nThe archived counterpart of <code>PrivateMethod::accessibility</code>\nTypescript extension.\nThe archived counterpart of <code>Constructor::accessibility</code>\nThe archived counterpart of <code>AutoAccessor::accessibility</code>\nTypescript extension.\nThe archived counterpart of <code>TsParamProp::accessibility</code>\nAt least one of <code>accessibility</code> or <code>readonly</code> must be set.\nGet a flags value with all known bits set.\nThe archived counterpart of <code>CondExpr::alt</code>\nThe archived counterpart of <code>IfStmt::alt</code>\nThe archived counterpart of <code>UnaryExpr::arg</code>\nThe archived counterpart of <code>UpdateExpr::arg</code>\nThe archived counterpart of <code>YieldExpr::arg</code>\nThe archived counterpart of <code>AwaitExpr::arg</code>\nThe archived counterpart of <code>RestPat::arg</code>\nThe archived counterpart of <code>ReturnStmt::arg</code>\nThe archived counterpart of <code>ThrowStmt::arg</code>\nThe archived counterpart of <code>TsImportType::arg</code>\nThe archived counterpart of <code>CallExpr::args</code>\nThe archived counterpart of <code>NewExpr::args</code>\nThe archived counterpart of <code>OptCall::args</code>\nReturns <code>Some</code> if <code>self</code> is of variant <code>Array</code>, and <code>None</code> …\nReturns <code>Some</code> if <code>self</code> is of variant <code>Array</code>, and <code>None</code> …\nReturns <code>Some</code> if <code>self</code> is of variant <code>Array</code>, and <code>None</code> …\nReturns <code>Some</code> if <code>self</code> is of variant <code>Array</code>, and <code>None</code> …\nReturns <code>Some</code> if <code>self</code> is of variant <code>Arrow</code>, and <code>None</code> …\nReturns <code>Some</code> if <code>self</code> is a reference of variant <code>Array</code>, and …\nReturns <code>Some</code> if <code>self</code> is a reference of variant <code>Array</code>, and …\nReturns <code>Some</code> if <code>self</code> is a reference of variant <code>Array</code>, and …\nReturns <code>Some</code> if <code>self</code> is a reference of variant <code>Array</code>, and …\nReturns <code>Some</code> if <code>self</code> is a reference of variant <code>Arrow</code>, and …\nReturns <code>Some</code> if <code>self</code> is a reference of variant <code>Assign</code>, and …\nReturns <code>Some</code> if <code>self</code> is a reference of variant <code>Assign</code>, and …\nReturns <code>Some</code> if <code>self</code> is a reference of variant <code>Assign</code>, and …\nReturns <code>Some</code> if <code>self</code> is a reference of variant <code>Assign</code>, and …\nReturns <code>Some</code> if <code>self</code> is a reference of variant <code>Assign</code>, and …\nReturns <code>Some</code> if <code>self</code> is a reference of variant <code>AutoAccessor</code>…\nReturns <code>Some</code> if <code>self</code> is a reference of variant <code>Await</code>, and …\nReturns <code>Some</code> if <code>self</code> is a reference of variant <code>BigInt</code>, and …\nReturns <code>Some</code> if <code>self</code> is a reference of variant <code>BigInt</code>, and …\nReturns <code>Some</code> if <code>self</code> is a reference of variant <code>Bin</code>, and …\nReturns <code>Some</code> if <code>self</code> is a reference of variant <code>Block</code>, and …\nReturns <code>Some</code> if <code>self</code> is a reference of variant <code>BlockStmt</code>, …\nReturns <code>Some</code> if <code>self</code> is a reference of variant <code>Bool</code>, and …\nReturns <code>Some</code> if <code>self</code> is a reference of variant <code>Break</code>, and …\nReturns <code>Some</code> if <code>self</code> is a reference of variant <code>Call</code>, and …\nReturns <code>Some</code> if <code>self</code> is a reference of variant <code>Call</code>, and …\nReturns <code>Some</code> if <code>self</code> is a reference of variant <code>Class</code>, and …\nReturns <code>Some</code> if <code>self</code> is a reference of variant <code>Class</code>, and …\nReturns <code>Some</code> if <code>self</code> is a reference of variant <code>Class</code>, and …\nReturns <code>Some</code> if <code>self</code> is a reference of variant <code>ClassProp</code>, …\nReturns <code>Some</code> if <code>self</code> is a reference of variant <code>Computed</code>, …\nReturns <code>Some</code> if <code>self</code> is a reference of variant <code>Computed</code>, …\nReturns <code>Some</code> if <code>self</code> is a reference of variant <code>Computed</code>, …\nReturns <code>Some</code> if <code>self</code> is a reference of variant <code>Cond</code>, and …\nReturns <code>Some</code> if <code>self</code> is a reference of variant <code>Constructor</code>…\nReturns <code>Some</code> if <code>self</code> is a reference of variant <code>Continue</code>, …\nReturns <code>Some</code> if <code>self</code> is a reference of variant <code>Debugger</code>, …\nReturns <code>Some</code> if <code>self</code> is a reference of variant <code>Decl</code>, and …\nReturns <code>Some</code> if <code>self</code> is a reference of variant <code>Default</code>, …\nReturns <code>Some</code> if <code>self</code> is a reference of variant <code>Default</code>, …\nReturns <code>Some</code> if <code>self</code> is a reference of variant <code>DoWhile</code>, …\nReturns <code>Some</code> if <code>self</code> is a reference of variant <code>Empty</code>, and …\nReturns <code>Some</code> if <code>self</code> is a reference of variant <code>Empty</code>, and …\nReturns <code>Some</code> if <code>self</code> is a reference of variant <code>ExportAll</code>, …\nReturns <code>Some</code> if <code>self</code> is a reference of variant <code>ExportDecl</code>, …\nReturns <code>Some</code> if <code>self</code> is a reference of variant …\nReturns <code>Some</code> if <code>self</code> is a reference of variant …\nReturns <code>Some</code> if <code>self</code> is a reference of variant <code>ExportNamed</code>…\nReturns <code>Some</code> if <code>self</code> is a reference of variant <code>Expr</code>, and …\nReturns <code>Some</code> if <code>self</code> is a reference of variant <code>Expr</code>, and …\nReturns <code>Some</code> if <code>self</code> is a reference of variant <code>Expr</code>, and …\nReturns <code>Some</code> if <code>self</code> is a reference of variant <code>Expr</code>, and …\nReturns <code>Some</code> if <code>self</code> is a reference of variant <code>Expr</code>, and …\nReturns <code>Some</code> if <code>self</code> is a reference of variant <code>Fn</code>, and <code>None</code>…\nReturns <code>Some</code> if <code>self</code> is a reference of variant <code>Fn</code>, and <code>None</code>…\nReturns <code>Some</code> if <code>self</code> is a reference of variant <code>Fn</code>, and <code>None</code>…\nReturns <code>Some</code> if <code>self</code> is a reference of variant <code>ForIn</code>, and …\nReturns <code>Some</code> if <code>self</code> is a reference of variant <code>ForOf</code>, and …\nReturns <code>Some</code> if <code>self</code> is a reference of variant <code>For</code>, and …\nReturns <code>Some</code> if <code>self</code> is a reference of variant <code>Getter</code>, and …\nReturns <code>Some</code> if <code>self</code> is a reference of variant <code>Ident</code>, and …\nReturns <code>Some</code> if <code>self</code> is a reference of variant <code>Ident</code>, and …\nReturns <code>Some</code> if <code>self</code> is a reference of variant <code>Ident</code>, and …\nReturns <code>Some</code> if <code>self</code> is a reference of variant <code>Ident</code>, and …\nReturns <code>Some</code> if <code>self</code> is a reference of variant <code>Ident</code>, and …\nReturns <code>Some</code> if <code>self</code> is a reference of variant <code>Ident</code>, and …\nReturns <code>Some</code> if <code>self</code> is a reference of variant <code>Ident</code>, and …\nReturns <code>Some</code> if <code>self</code> is a reference of variant <code>Ident</code>, and …\nReturns <code>Some</code> if <code>self</code> is a reference of variant <code>Ident</code>, and …\nReturns <code>Some</code> if <code>self</code> is a reference of variant <code>Ident</code>, and …\nReturns <code>Some</code> if <code>self</code> is a reference of variant <code>Ident</code>, and …\nReturns <code>Some</code> if <code>self</code> is a reference of variant <code>Ident</code>, and …\nReturns <code>Some</code> if <code>self</code> is a reference of variant <code>Ident</code>, and …\nReturns <code>Some</code> if <code>self</code> is a reference of variant <code>If</code>, and <code>None</code>…\nReturns <code>Some</code> if <code>self</code> is a reference of variant <code>Import</code>, and …\nReturns <code>Some</code> if <code>self</code> is a reference of variant <code>Import</code>, and …\nReturns <code>Some</code> if <code>self</code> is a reference of variant <code>Import</code>, and …\nSee ImportWith for details.\nReturns <code>Some</code> if <code>self</code> is a reference of variant <code>Invalid</code>, …\nReturns <code>Some</code> if <code>self</code> is a reference of variant <code>Invalid</code>, …\nReturns <code>Some</code> if <code>self</code> is a reference of variant <code>Invalid</code>, …\nReturns <code>Some</code> if <code>self</code> is a reference of variant <code>Invalid</code>, …\nReturns <code>Some</code> if <code>self</code> is a reference of variant <code>JSXElement</code>, …\nReturns <code>Some</code> if <code>self</code> is a reference of variant <code>JSXEmpty</code>, …\nReturns <code>Some</code> if <code>self</code> is a reference of variant <code>JSXFragment</code>…\nReturns <code>Some</code> if <code>self</code> is a reference of variant <code>JSXMember</code>, …\nReturns <code>Some</code> if <code>self</code> is a reference of variant …\nReturns <code>Some</code> if <code>self</code> is a reference of variant …\nReturns <code>Some</code> if <code>self</code> is a reference of variant <code>KeyValue</code>, …\nReturns <code>Some</code> if <code>self</code> is a reference of variant <code>KeyValue</code>, …\nReturns <code>Some</code> if <code>self</code> is a reference of variant <code>Labeled</code>, …\nReturns <code>Some</code> if <code>self</code> is a reference of variant <code>Lit</code>, and …\nReturns <code>Some</code> if <code>self</code> is a reference of variant <code>Member</code>, and …\nReturns <code>Some</code> if <code>self</code> is a reference of variant <code>Member</code>, and …\nReturns <code>Some</code> if <code>self</code> is a reference of variant <code>Member</code>, and …\nReturns <code>Some</code> if <code>self</code> is a reference of variant <code>MetaProp</code>, …\nReturns <code>Some</code> if <code>self</code> is a reference of variant <code>Method</code>, and …\nReturns <code>Some</code> if <code>self</code> is a reference of variant <code>Method</code>, and …\nReturns <code>Some</code> if <code>self</code> is a reference of variant <code>Module</code>, and …\nReturns <code>Some</code> if <code>self</code> is a reference of variant <code>ModuleDecl</code>, …\nReturns <code>Some</code> if <code>self</code> is a mutable reference of variant …\nReturns <code>Some</code> if <code>self</code> is a mutable reference of variant …\nReturns <code>Some</code> if <code>self</code> is a mutable reference of variant …\nReturns <code>Some</code> if <code>self</code> is a mutable reference of variant …\nReturns <code>Some</code> if <code>self</code> is a mutable reference of variant …\nReturns <code>Some</code> if <code>self</code> is a mutable reference of variant …\nReturns <code>Some</code> if <code>self</code> is a mutable reference of variant …\nReturns <code>Some</code> if <code>self</code> is a mutable reference of variant …\nReturns <code>Some</code> if <code>self</code> is a mutable reference of variant …\nReturns <code>Some</code> if <code>self</code> is a mutable reference of variant …\nReturns <code>Some</code> if <code>self</code> is a mutable reference of variant …\nReturns <code>Some</code> if <code>self</code> is a mutable reference of variant …\nReturns <code>Some</code> if <code>self</code> is a mutable reference of variant …\nReturns <code>Some</code> if <code>self</code> is a mutable reference of variant …\nReturns <code>Some</code> if <code>self</code> is a mutable reference of variant <code>Bin</code>…\nReturns <code>Some</code> if <code>self</code> is a mutable reference of variant …\nReturns <code>Some</code> if <code>self</code> is a mutable reference of variant …\nReturns <code>Some</code> if <code>self</code> is a mutable reference of variant <code>Bool</code>…\nReturns <code>Some</code> if <code>self</code> is a mutable reference of variant …\nReturns <code>Some</code> if <code>self</code> is a mutable reference of variant <code>Call</code>…\nReturns <code>Some</code> if <code>self</code> is a mutable reference of variant <code>Call</code>…\nReturns <code>Some</code> if <code>self</code> is a mutable reference of variant …\nReturns <code>Some</code> if <code>self</code> is a mutable reference of variant …\nReturns <code>Some</code> if <code>self</code> is a mutable reference of variant …\nReturns <code>Some</code> if <code>self</code> is a mutable reference of variant …\nReturns <code>Some</code> if <code>self</code> is a mutable reference of variant …\nReturns <code>Some</code> if <code>self</code> is a mutable reference of variant …\nReturns <code>Some</code> if <code>self</code> is a mutable reference of variant …\nReturns <code>Some</code> if <code>self</code> is a mutable reference of variant <code>Cond</code>…\nReturns <code>Some</code> if <code>self</code> is a mutable reference of variant …\nReturns <code>Some</code> if <code>self</code> is a mutable reference of variant …\nReturns <code>Some</code> if <code>self</code> is a mutable reference of variant …\nReturns <code>Some</code> if <code>self</code> is a mutable reference of variant <code>Decl</code>…\nReturns <code>Some</code> if <code>self</code> is a mutable reference of variant …\nReturns <code>Some</code> if <code>self</code> is a mutable reference of variant …\nReturns <code>Some</code> if <code>self</code> is a mutable reference of variant …\nReturns <code>Some</code> if <code>self</code> is a mutable reference of variant …\nReturns <code>Some</code> if <code>self</code> is a mutable reference of variant …\nReturns <code>Some</code> if <code>self</code> is a mutable reference of variant …\nReturns <code>Some</code> if <code>self</code> is a mutable reference of variant …\nReturns <code>Some</code> if <code>self</code> is a mutable reference of variant …\nReturns <code>Some</code> if <code>self</code> is a mutable reference of variant …\nReturns <code>Some</code> if <code>self</code> is a mutable reference of variant …\nReturns <code>Some</code> if <code>self</code> is a mutable reference of variant <code>Expr</code>…\nReturns <code>Some</code> if <code>self</code> is a mutable reference of variant <code>Expr</code>…\nReturns <code>Some</code> if <code>self</code> is a mutable reference of variant <code>Expr</code>…\nReturns <code>Some</code> if <code>self</code> is a mutable reference of variant <code>Expr</code>…\nReturns <code>Some</code> if <code>self</code> is a mutable reference of variant <code>Expr</code>…\nReturns <code>Some</code> if <code>self</code> is a mutable reference of variant <code>Fn</code>, …\nReturns <code>Some</code> if <code>self</code> is a mutable reference of variant <code>Fn</code>, …\nReturns <code>Some</code> if <code>self</code> is a mutable reference of variant <code>Fn</code>, …\nReturns <code>Some</code> if <code>self</code> is a mutable reference of variant …\nReturns <code>Some</code> if <code>self</code> is a mutable reference of variant …\nReturns <code>Some</code> if <code>self</code> is a mutable reference of variant <code>For</code>…\nReturns <code>Some</code> if <code>self</code> is a mutable reference of variant …\nReturns <code>Some</code> if <code>self</code> is a mutable reference of variant …\nReturns <code>Some</code> if <code>self</code> is a mutable reference of variant …\nReturns <code>Some</code> if <code>self</code> is a mutable reference of variant …\nReturns <code>Some</code> if <code>self</code> is a mutable reference of variant …\nReturns <code>Some</code> if <code>self</code> is a mutable reference of variant …\nReturns <code>Some</code> if <code>self</code> is a mutable reference of variant …\nReturns <code>Some</code> if <code>self</code> is a mutable reference of variant …\nReturns <code>Some</code> if <code>self</code> is a mutable reference of variant …\nReturns <code>Some</code> if <code>self</code> is a mutable reference of variant …\nReturns <code>Some</code> if <code>self</code> is a mutable reference of variant …\nReturns <code>Some</code> if <code>self</code> is a mutable reference of variant …\nReturns <code>Some</code> if <code>self</code> is a mutable reference of variant …\nReturns <code>Some</code> if <code>self</code> is a mutable reference of variant …\nReturns <code>Some</code> if <code>self</code> is a mutable reference of variant <code>If</code>, …\nReturns <code>Some</code> if <code>self</code> is a mutable reference of variant …\nReturns <code>Some</code> if <code>self</code> is a mutable reference of variant …\nReturns <code>Some</code> if <code>self</code> is a mutable reference of variant …\nReturns <code>Some</code> if <code>self</code> is a mutable reference of variant …\nReturns <code>Some</code> if <code>self</code> is a mutable reference of variant …\nReturns <code>Some</code> if <code>self</code> is a mutable reference of variant …\nReturns <code>Some</code> if <code>self</code> is a mutable reference of variant …\nReturns <code>Some</code> if <code>self</code> is a mutable reference of variant …\nReturns <code>Some</code> if <code>self</code> is a mutable reference of variant …\nReturns <code>Some</code> if <code>self</code> is a mutable reference of variant …\nReturns <code>Some</code> if <code>self</code> is a mutable reference of variant …\nReturns <code>Some</code> if <code>self</code> is a mutable reference of variant …\nReturns <code>Some</code> if <code>self</code> is a mutable reference of variant …\nReturns <code>Some</code> if <code>self</code> is a mutable reference of variant …\nReturns <code>Some</code> if <code>self</code> is a mutable reference of variant …\nReturns <code>Some</code> if <code>self</code> is a mutable reference of variant …\nReturns <code>Some</code> if <code>self</code> is a mutable reference of variant <code>Lit</code>…\nReturns <code>Some</code> if <code>self</code> is a mutable reference of variant …\nReturns <code>Some</code> if <code>self</code> is a mutable reference of variant …\nReturns <code>Some</code> if <code>self</code> is a mutable reference of variant …\nReturns <code>Some</code> if <code>self</code> is a mutable reference of variant …\nReturns <code>Some</code> if <code>self</code> is a mutable reference of variant …\nReturns <code>Some</code> if <code>self</code> is a mutable reference of variant …\nReturns <code>Some</code> if <code>self</code> is a mutable reference of variant …\nReturns <code>Some</code> if <code>self</code> is a mutable reference of variant …\nReturns <code>Some</code> if <code>self</code> is a mutable reference of variant …\nReturns <code>Some</code> if <code>self</code> is a mutable reference of variant …\nReturns <code>Some</code> if <code>self</code> is a mutable reference of variant …\nReturns <code>Some</code> if <code>self</code> is a mutable reference of variant …\nReturns <code>Some</code> if <code>self</code> is a mutable reference of variant <code>New</code>…\nReturns <code>Some</code> if <code>self</code> is a mutable reference of variant <code>Num</code>…\nReturns <code>Some</code> if <code>self</code> is a mutable reference of variant …\nReturns <code>Some</code> if <code>self</code> is a mutable reference of variant …\nReturns <code>Some</code> if <code>self</code> is a mutable reference of variant …\nReturns <code>Some</code> if <code>self</code> is a mutable reference of variant …\nReturns <code>Some</code> if <code>self</code> is a mutable reference of variant …\nReturns <code>Some</code> if <code>self</code> is a mutable reference of variant …\nReturns <code>Some</code> if <code>self</code> is a mutable reference of variant …\nReturns <code>Some</code> if <code>self</code> is a mutable reference of variant …\nReturns <code>Some</code> if <code>self</code> is a mutable reference of variant …\nReturns <code>Some</code> if <code>self</code> is a mutable reference of variant …\nReturns <code>Some</code> if <code>self</code> is a mutable reference of variant <code>Pat</code>…\nReturns <code>Some</code> if <code>self</code> is a mutable reference of variant <code>Pat</code>…\nReturns <code>Some</code> if <code>self</code> is a mutable reference of variant …\nReturns <code>Some</code> if <code>self</code> is a mutable reference of variant …\nReturns <code>Some</code> if <code>self</code> is a mutable reference of variant …\nReturns <code>Some</code> if <code>self</code> is a mutable reference of variant …\nReturns <code>Some</code> if <code>self</code> is a mutable reference of variant …\nReturns <code>Some</code> if <code>self</code> is a mutable reference of variant <code>Prop</code>…\nReturns <code>Some</code> if <code>self</code> is a mutable reference of variant …\nReturns <code>Some</code> if <code>self</code> is a mutable reference of variant <code>Rest</code>…\nReturns <code>Some</code> if <code>self</code> is a mutable reference of variant <code>Rest</code>…\nReturns <code>Some</code> if <code>self</code> is a mutable reference of variant <code>Rest</code>…\nReturns <code>Some</code> if <code>self</code> is a mutable reference of variant …\nReturns <code>Some</code> if <code>self</code> is a mutable reference of variant …\nReturns <code>Some</code> if <code>self</code> is a mutable reference of variant <code>Seq</code>…\nReturns <code>Some</code> if <code>self</code> is a mutable reference of variant …\nReturns <code>Some</code> if <code>self</code> is a mutable reference of variant …\nReturns <code>Some</code> if <code>self</code> is a mutable reference of variant …\nReturns <code>Some</code> if <code>self</code> is a mutable reference of variant …\nReturns <code>Some</code> if <code>self</code> is a mutable reference of variant …\nReturns <code>Some</code> if <code>self</code> is a mutable reference of variant <code>Stmt</code>…\nReturns <code>Some</code> if <code>self</code> is a mutable reference of variant <code>Str</code>…\nReturns <code>Some</code> if <code>self</code> is a mutable reference of variant <code>Str</code>…\nReturns <code>Some</code> if <code>self</code> is a mutable reference of variant <code>Str</code>…\nReturns <code>Some</code> if <code>self</code> is a mutable reference of variant <code>Str</code>…\nReturns <code>Some</code> if <code>self</code> is a mutable reference of variant …\nReturns <code>Some</code> if <code>self</code> is a mutable reference of variant …\nReturns <code>Some</code> if <code>self</code> is a mutable reference of variant …\nReturns <code>Some</code> if <code>self</code> is a mutable reference of variant …\nReturns <code>Some</code> if <code>self</code> is a mutable reference of variant …\nReturns <code>Some</code> if <code>self</code> is a mutable reference of variant <code>This</code>…\nReturns <code>Some</code> if <code>self</code> is a mutable reference of variant …\nReturns <code>Some</code> if <code>self</code> is a mutable reference of variant <code>Tpl</code>…\nReturns <code>Some</code> if <code>self</code> is a mutable reference of variant <code>Tpl</code>…\nReturns <code>Some</code> if <code>self</code> is a mutable reference of variant <code>Try</code>…\nReturns <code>Some</code> if <code>self</code> is a mutable reference of variant …\nReturns <code>Some</code> if <code>self</code> is a mutable reference of variant <code>TsAs</code>…\nReturns <code>Some</code> if <code>self</code> is a mutable reference of variant <code>TsAs</code>…\nReturns <code>Some</code> if <code>self</code> is a mutable reference of variant …\nReturns <code>Some</code> if <code>self</code> is a mutable reference of variant …\nReturns <code>Some</code> if <code>self</code> is a mutable reference of variant …\nReturns <code>Some</code> if <code>self</code> is a mutable reference of variant …\nReturns <code>Some</code> if <code>self</code> is a mutable reference of variant …\nReturns <code>Some</code> if <code>self</code> is a mutable reference of variant …\nReturns <code>Some</code> if <code>self</code> is a mutable reference of variant …\nReturns <code>Some</code> if <code>self</code> is a mutable reference of variant …\nReturns <code>Some</code> if <code>self</code> is a mutable reference of variant …\nReturns <code>Some</code> if <code>self</code> is a mutable reference of variant …\nReturns <code>Some</code> if <code>self</code> is a mutable reference of variant …\nReturns <code>Some</code> if <code>self</code> is a mutable reference of variant …\nReturns <code>Some</code> if <code>self</code> is a mutable reference of variant …\nReturns <code>Some</code> if <code>self</code> is a mutable reference of variant …\nReturns <code>Some</code> if <code>self</code> is a mutable reference of variant …\nReturns <code>Some</code> if <code>self</code> is a mutable reference of variant …\nReturns <code>Some</code> if <code>self</code> is a mutable reference of variant …\nReturns <code>Some</code> if <code>self</code> is a mutable reference of variant …\nReturns <code>Some</code> if <code>self</code> is a mutable reference of variant …\nReturns <code>Some</code> if <code>self</code> is a mutable reference of variant …\nReturns <code>Some</code> if <code>self</code> is a mutable reference of variant …\nReturns <code>Some</code> if <code>self</code> is a mutable reference of variant …\nReturns <code>Some</code> if <code>self</code> is a mutable reference of variant …\nReturns <code>Some</code> if <code>self</code> is a mutable reference of variant …\nReturns <code>Some</code> if <code>self</code> is a mutable reference of variant …\nReturns <code>Some</code> if <code>self</code> is a mutable reference of variant …\nReturns <code>Some</code> if <code>self</code> is a mutable reference of variant …\nReturns <code>Some</code> if <code>self</code> is a mutable reference of variant …\nReturns <code>Some</code> if <code>self</code> is a mutable reference of variant …\nReturns <code>Some</code> if <code>self</code> is a mutable reference of variant …\nReturns <code>Some</code> if <code>self</code> is a mutable reference of variant …\nReturns <code>Some</code> if <code>self</code> is a mutable reference of variant …\nReturns <code>Some</code> if <code>self</code> is a mutable reference of variant …\nReturns <code>Some</code> if <code>self</code> is a mutable reference of variant …\nReturns <code>Some</code> if <code>self</code> is a mutable reference of variant …\nReturns <code>Some</code> if <code>self</code> is a mutable reference of variant …\nReturns <code>Some</code> if <code>self</code> is a mutable reference of variant …\nReturns <code>Some</code> if <code>self</code> is a mutable reference of variant …\nReturns <code>Some</code> if <code>self</code> is a mutable reference of variant …\nReturns <code>Some</code> if <code>self</code> is a mutable reference of variant …\nReturns <code>Some</code> if <code>self</code> is a mutable reference of variant …\nReturns <code>Some</code> if <code>self</code> is a mutable reference of variant …\nReturns <code>Some</code> if <code>self</code> is a mutable reference of variant …\nReturns <code>Some</code> if <code>self</code> is a mutable reference of variant …\nReturns <code>Some</code> if <code>self</code> is a mutable reference of variant …\nReturns <code>Some</code> if <code>self</code> is a mutable reference of variant …\nReturns <code>Some</code> if <code>self</code> is a mutable reference of variant …\nReturns <code>Some</code> if <code>self</code> is a mutable reference of variant …\nReturns <code>Some</code> if <code>self</code> is a mutable reference of variant …\nReturns <code>Some</code> if <code>self</code> is a mutable reference of variant …\nReturns <code>Some</code> if <code>self</code> is a mutable reference of variant …\nReturns <code>Some</code> if <code>self</code> is a mutable reference of variant …\nReturns <code>Some</code> if <code>self</code> is a mutable reference of variant …\nReturns <code>Some</code> if <code>self</code> is a mutable reference of variant …\nReturns <code>Some</code> if <code>self</code> is a mutable reference of variant …\nReturns <code>Some</code> if <code>self</code> is a mutable reference of variant …\nReturns <code>Some</code> if <code>self</code> is a mutable reference of variant …\nReturns <code>Some</code> if <code>self</code> is a mutable reference of variant …\nReturns <code>Some</code> if <code>self</code> is a mutable reference of variant …\nReturns <code>Some</code> if <code>self</code> is a mutable reference of variant …\nReturns <code>Some</code> if <code>self</code> is a mutable reference of variant <code>Var</code>…\nReturns <code>Some</code> if <code>self</code> is a mutable reference of variant …\nReturns <code>Some</code> if <code>self</code> is a mutable reference of variant …\nReturns <code>Some</code> if <code>self</code> is a mutable reference of variant …\nReturns <code>Some</code> if <code>self</code> is a mutable reference of variant <code>With</code>…\nReturns <code>Some</code> if <code>self</code> is a mutable reference of variant …\nReturns <code>Some</code> if <code>self</code> is a reference of variant <code>Named</code>, and …\nReturns <code>Some</code> if <code>self</code> is a reference of variant <code>Named</code>, and …\nReturns <code>Some</code> if <code>self</code> is a reference of variant <code>Namespace</code>, …\nReturns <code>Some</code> if <code>self</code> is a reference of variant <code>Namespace</code>, …\nReturns <code>Some</code> if <code>self</code> is a reference of variant <code>New</code>, and …\nReturns <code>Some</code> if <code>self</code> is a reference of variant <code>Num</code>, and …\nReturns <code>Some</code> if <code>self</code> is a reference of variant <code>Number</code>, and …\nReturns <code>Some</code> if <code>self</code> is a reference of variant <code>Object</code>, and …\nReturns <code>Some</code> if <code>self</code> is a reference of variant <code>Object</code>, and …\nReturns <code>Some</code> if <code>self</code> is a reference of variant <code>Object</code>, and …\nReturns <code>Some</code> if <code>self</code> is a reference of variant <code>Object</code>, and …\nReturns <code>Some</code> if <code>self</code> is a reference of variant <code>OptChain</code>, …\nReturns <code>Some</code> if <code>self</code> is a reference of variant <code>OptChain</code>, …\nReturns <code>Some</code> if <code>self</code> is a reference of variant <code>Param</code>, and …\nReturns <code>Some</code> if <code>self</code> is a reference of variant <code>Paren</code>, and …\nReturns <code>Some</code> if <code>self</code> is a reference of variant <code>Paren</code>, and …\nReturns <code>Some</code> if <code>self</code> is a reference of variant <code>Pat</code>, and …\nReturns <code>Some</code> if <code>self</code> is a reference of variant <code>Pat</code>, and …\nReturns <code>Some</code> if <code>self</code> is a reference of variant <code>Private</code>, …\nReturns <code>Some</code> if <code>self</code> is a reference of variant …\nReturns <code>Some</code> if <code>self</code> is a reference of variant <code>PrivateName</code>…\nReturns <code>Some</code> if <code>self</code> is a reference of variant <code>PrivateName</code>…\nReturns <code>Some</code> if <code>self</code> is a reference of variant <code>PrivateProp</code>…\nReturns <code>Some</code> if <code>self</code> is a reference of variant <code>Prop</code>, and …\nReturns <code>Some</code> if <code>self</code> is a reference of variant <code>Public</code>, and …\nReturns <code>Some</code> if <code>self</code> is a reference of variant <code>Rest</code>, and …\nReturns <code>Some</code> if <code>self</code> is a reference of variant <code>Rest</code>, and …\nReturns <code>Some</code> if <code>self</code> is a reference of variant <code>Rest</code>, and …\nReturns <code>Some</code> if <code>self</code> is a reference of variant <code>Return</code>, and …\nReturns <code>Some</code> if <code>self</code> is a reference of variant <code>Script</code>, and …\nReturns <code>Some</code> if <code>self</code> is a reference of variant <code>Seq</code>, and …\nReturns <code>Some</code> if <code>self</code> is a reference of variant <code>Setter</code>, and …\nReturns <code>Some</code> if <code>self</code> is a reference of variant <code>Shorthand</code>, …\nReturns <code>Some</code> if <code>self</code> is a reference of variant <code>Simple</code>, and …\nReturns <code>Some</code> if <code>self</code> is a reference of variant <code>Spread</code>, and …\nReturns <code>Some</code> if <code>self</code> is a reference of variant <code>StaticBlock</code>…\nReturns <code>Some</code> if <code>self</code> is a reference of variant <code>Stmt</code>, and …\nReturns <code>Some</code> if <code>self</code> is a reference of variant <code>Str</code>, and …\nReturns <code>Some</code> if <code>self</code> is a reference of variant <code>Str</code>, and …\nReturns <code>Some</code> if <code>self</code> is a reference of variant <code>Str</code>, and …\nReturns <code>Some</code> if <code>self</code> is a reference of variant <code>Str</code>, and …\nReturns <code>Some</code> if <code>self</code> is a reference of variant <code>Super</code>, and …\nReturns <code>Some</code> if <code>self</code> is a reference of variant <code>SuperProp</code>, …\nReturns <code>Some</code> if <code>self</code> is a reference of variant <code>SuperProp</code>, …\nReturns <code>Some</code> if <code>self</code> is a reference of variant <code>Switch</code>, and …\nReturns <code>Some</code> if <code>self</code> is a reference of variant <code>TaggedTpl</code>, …\nReturns <code>Some</code> if <code>self</code> is a reference of variant <code>This</code>, and …\nReturns <code>Some</code> if <code>self</code> is a reference of variant <code>Throw</code>, and …\nReturns <code>Some</code> if <code>self</code> is a reference of variant <code>Tpl</code>, and …\nReturns <code>Some</code> if <code>self</code> is a reference of variant <code>Tpl</code>, and …\nReturns <code>Some</code> if <code>self</code> is a reference of variant <code>Try</code>, and …\nReturns <code>Some</code> if <code>self</code> is a reference of variant <code>TsArrayType</code>…\nReturns <code>Some</code> if <code>self</code> is a reference of variant <code>TsAs</code>, and …\nReturns <code>Some</code> if <code>self</code> is a reference of variant <code>TsAs</code>, and …\nReturns <code>Some</code> if <code>self</code> is a reference of variant …\nReturns <code>Some</code> if <code>self</code> is a reference of variant …\nReturns <code>Some</code> if <code>self</code> is a reference of variant …\nReturns <code>Some</code> if <code>self</code> is a reference of variant …\nReturns <code>Some</code> if <code>self</code> is a reference of variant …\nReturns <code>Some</code> if <code>self</code> is a reference of variant <code>TsEntityName</code>…\nReturns <code>Some</code> if <code>self</code> is a reference of variant <code>TsEntityName</code>…\nReturns <code>Some</code> if <code>self</code> is a reference of variant <code>TsEnum</code>, and …\nReturns <code>Some</code> if <code>self</code> is a reference of variant …\nReturns <code>Some</code> if <code>self</code> is a reference of variant …\nReturns <code>Some</code> if <code>self</code> is a reference of variant …\nReturns <code>Some</code> if <code>self</code> is a reference of variant <code>TsFnType</code>, …\nReturns <code>Some</code> if <code>self</code> is a reference of variant …\nReturns <code>Some</code> if <code>self</code> is a reference of variant …\nReturns <code>Some</code> if <code>self</code> is a reference of variant <code>TsImportType</code>…\nReturns <code>Some</code> if <code>self</code> is a reference of variant …\nReturns <code>Some</code> if <code>self</code> is a reference of variant …\nReturns <code>Some</code> if <code>self</code> is a reference of variant …\nReturns <code>Some</code> if <code>self</code> is a reference of variant <code>TsInferType</code>…\nReturns <code>Some</code> if <code>self</code> is a reference of variant …\nReturns <code>Some</code> if <code>self</code> is a reference of variant …\nReturns <code>Some</code> if <code>self</code> is a reference of variant <code>TsInterface</code>…\nReturns <code>Some</code> if <code>self</code> is a reference of variant …\nReturns <code>Some</code> if <code>self</code> is a reference of variant …\nReturns <code>Some</code> if <code>self</code> is a reference of variant …\nReturns <code>Some</code> if <code>self</code> is a reference of variant <code>TsLitType</code>, …\nReturns <code>Some</code> if <code>self</code> is a reference of variant <code>TsMappedType</code>…\nReturns <code>Some</code> if <code>self</code> is a reference of variant …\nReturns <code>Some</code> if <code>self</code> is a reference of variant <code>TsModule</code>, …\nReturns <code>Some</code> if <code>self</code> is a reference of variant …\nReturns <code>Some</code> if <code>self</code> is a reference of variant …\nReturns <code>Some</code> if <code>self</code> is a reference of variant …\nReturns <code>Some</code> if <code>self</code> is a reference of variant <code>TsNonNull</code>, …\nReturns <code>Some</code> if <code>self</code> is a reference of variant <code>TsNonNull</code>, …\nReturns <code>Some</code> if <code>self</code> is a reference of variant …\nReturns <code>Some</code> if <code>self</code> is a reference of variant <code>TsParamProp</code>…\nReturns <code>Some</code> if <code>self</code> is a reference of variant …\nReturns <code>Some</code> if <code>self</code> is a reference of variant …\nReturns <code>Some</code> if <code>self</code> is a reference of variant …\nReturns <code>Some</code> if <code>self</code> is a reference of variant <code>TsRestType</code>, …\nReturns <code>Some</code> if <code>self</code> is a reference of variant <code>TsSatisfies</code>…\nReturns <code>Some</code> if <code>self</code> is a reference of variant <code>TsSatisfies</code>…\nReturns <code>Some</code> if <code>self</code> is a reference of variant …\nReturns <code>Some</code> if <code>self</code> is a reference of variant <code>TsThisType</code>, …\nReturns <code>Some</code> if <code>self</code> is a reference of variant <code>TsThisType</code>, …\nReturns <code>Some</code> if <code>self</code> is a reference of variant <code>TsTupleType</code>…\nReturns <code>Some</code> if <code>self</code> is a reference of variant <code>TsTypeAlias</code>…\nReturns <code>Some</code> if <code>self</code> is a reference of variant …\nReturns <code>Some</code> if <code>self</code> is a reference of variant …\nReturns <code>Some</code> if <code>self</code> is a reference of variant <code>TsTypeLit</code>, …\nReturns <code>Some</code> if <code>self</code> is a reference of variant …\nReturns <code>Some</code> if <code>self</code> is a reference of variant …\nReturns <code>Some</code> if <code>self</code> is a reference of variant <code>TsTypeQuery</code>…\nReturns <code>Some</code> if <code>self</code> is a reference of variant <code>TsTypeRef</code>, …\nReturns <code>Some</code> if <code>self</code> is a reference of variant …\nReturns <code>Some</code> if <code>self</code> is a reference of variant <code>TsUnionType</code>…\nReturns <code>Some</code> if <code>self</code> is a reference of variant <code>Unary</code>, and …\nReturns <code>Some</code> if <code>self</code> is a reference of variant <code>Update</code>, and …\nReturns <code>Some</code> if <code>self</code> is a reference of variant <code>Using</code>, and …\nReturns <code>Some</code> if <code>self</code> is a reference of variant <code>UsingDecl</code>, …\nReturns <code>Some</code> if <code>self</code> is a reference of variant <code>Var</code>, and …\nReturns <code>Some</code> if <code>self</code> is a reference of variant <code>VarDecl</code>, …\nReturns <code>Some</code> if <code>self</code> is a reference of variant <code>VarDecl</code>, …\nReturns <code>Some</code> if <code>self</code> is a reference of variant <code>While</code>, and …\nReturns <code>Some</code> if <code>self</code> is a reference of variant <code>With</code>, and …\nReturns <code>Some</code> if <code>self</code> is a reference of variant <code>Yield</code>, and …\nThe archived counterpart of <code>TsTypePredicate::asserts</code>\nReturns <code>Some</code> if <code>self</code> is of variant <code>Assign</code>, and <code>None</code> …\nReturns <code>Some</code> if <code>self</code> is of variant <code>Assign</code>, and <code>None</code> …\nReturns <code>Some</code> if <code>self</code> is of variant <code>Assign</code>, and <code>None</code> …\nReturns <code>Some</code> if <code>self</code> is of variant <code>Assign</code>, and <code>None</code> …")