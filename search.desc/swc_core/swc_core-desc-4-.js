searchState.loadedDescShard("swc_core", 4, "This is not considered as a public API\nThis is not considered as a public API\nThis is not considered as a public API\nThis is not considered as a public API\nThis is not considered as a public API\nThis is not considered as a public API\nThis is not considered as a public API\nThis is not considered as a public API\nThis is not considered as a public API\nThis is not considered as a public API\nThis is not considered as a public API\nThis is not considered as a public API\nThis is not considered as a public API\nThis is not considered as a public API\nThis is not considered as a public API\nThis is not considered as a public API\nThis is not considered as a public API\nThis is not considered as a public API\nThis is not considered as a public API\nThis is not considered as a public API\nThis is not considered as a public API\nThis is not considered as a public API\nThis is not considered as a public API\nThis is not considered as a public API\nThis is not considered as a public API\nThis is not considered as a public API\nThis is not considered as a public API\nThis is not considered as a public API\nThis is not considered as a public API\nThis is not considered as a public API\nThis is not considered as a public API\nThis is not considered as a public API\nThis is not considered as a public API\nThis is not considered as a public API\nThis is not considered as a public API\nThis is not considered as a public API\nThis is not considered as a public API\nThis is not considered as a public API\nThis is not considered as a public API\nThis is not considered as a public API\nThis is not considered as a public API\nThis is not considered as a public API\nThis is not considered as a public API\nThis is not considered as a public API\nThis is not considered as a public API\nThis is not considered as a public API\nThis is not considered as a public API\nThis is not considered as a public API\nThis is not considered as a public API\nThis is not considered as a public API\nThis is not considered as a public API\nThis is not considered as a public API\nThis is not considered as a public API\nThis is not considered as a public API\nThis is not considered as a public API\nThis is not considered as a public API\nThis is not considered as a public API\nThis is not considered as a public API\nThe archived counterpart of <code>BinaryOp::Add</code>\n<code>+</code>\nThe archived counterpart of <code>AssignOp::AddAssign</code>\n<code>+=</code>\nThe archived counterpart of <code>AssignOp::AndAssign</code>\n<code>&amp;&amp;=</code>\nAn archived <code>Accessibility</code>\nAn archived <code>ArrayLit</code>\nAn archived <code>ArrayPat</code>\nAn archived <code>ArrowExpr</code>\nAn archived <code>AssignExpr</code>\nAn archived <code>AssignOp</code>\nAn archived <code>AssignPat</code>\nAn archived <code>AssignPatProp</code>\nAn archived <code>AssignProp</code>\nAn archived <code>AssignTarget</code>\nAn archived <code>AssignTargetPat</code>\nAn archived <code>AutoAccessor</code>\nAn archived <code>AwaitExpr</code>\nAn archived <code>BigInt</code>\nAn archived <code>BinExpr</code>\nAn archived <code>BinaryOp</code>\nAn archived <code>BindingIdent</code>\nAn archived <code>BlockStmt</code>\nAn archived <code>BlockStmtOrExpr</code>\nAn archived <code>Bool</code>\nAn archived <code>BreakStmt</code>\nAn archived <code>CallExpr</code>\nAn archived <code>Callee</code>\nAn archived <code>CatchClause</code>\nAn archived <code>Class</code>\nAn archived <code>ClassDecl</code>\nAn archived <code>ClassExpr</code>\nAn archived <code>ClassMember</code>\nAn archived <code>ClassMethod</code>\nAn archived <code>ClassProp</code>\nAn archived <code>ComputedPropName</code>\nAn archived <code>CondExpr</code>\nAn archived <code>Constructor</code>\nAn archived <code>ContinueStmt</code>\nAn archived <code>DebuggerStmt</code>\nAn archived <code>Decl</code>\nAn archived <code>Decorator</code>\nAn archived <code>DefaultDecl</code>\nAn archived <code>DoWhileStmt</code>\nAn archived <code>EmptyStmt</code>\nAn archived <code>ExportAll</code>\nAn archived <code>ExportDecl</code>\nAn archived <code>ExportDefaultDecl</code>\nAn archived <code>ExportDefaultExpr</code>\nAn archived <code>ExportDefaultSpecifier</code>\nAn archived <code>ExportNamedSpecifier</code>\nAn archived <code>ExportNamespaceSpecifier</code>\nAn archived <code>ExportSpecifier</code>\nAn archived <code>Expr</code>\nAn archived <code>ExprOrSpread</code>\nAn archived <code>ExprStmt</code>\nAn archived <code>FnDecl</code>\nAn archived <code>FnExpr</code>\nAn archived <code>ForHead</code>\nAn archived <code>ForInStmt</code>\nAn archived <code>ForOfStmt</code>\nAn archived <code>ForStmt</code>\nAn archived <code>Function</code>\nAn archived <code>GetterProp</code>\nAn archived <code>Ident</code>\nAn archived <code>IfStmt</code>\nAn archived <code>Import</code>\nAn archived <code>ImportDecl</code>\nAn archived <code>ImportDefaultSpecifier</code>\nAn archived <code>ImportNamedSpecifier</code>\nAn archived <code>ImportSpecifier</code>\nAn archived <code>ImportStarAsSpecifier</code>\nAn archived <code>Invalid</code>\nAn archived <code>JSXAttr</code>\nAn archived <code>JSXAttrName</code>\nAn archived <code>JSXAttrOrSpread</code>\nAn archived <code>JSXAttrValue</code>\nAn archived <code>JSXClosingElement</code>\nAn archived <code>JSXClosingFragment</code>\nAn archived <code>JSXElement</code>\nAn archived <code>JSXElementChild</code>\nAn archived <code>JSXElementName</code>\nAn archived <code>JSXEmptyExpr</code>\nAn archived <code>JSXExpr</code>\nAn archived <code>JSXExprContainer</code>\nAn archived <code>JSXFragment</code>\nAn archived <code>JSXMemberExpr</code>\nAn archived <code>JSXNamespacedName</code>\nAn archived <code>JSXObject</code>\nAn archived <code>JSXOpeningElement</code>\nAn archived <code>JSXOpeningFragment</code>\nAn archived <code>JSXSpreadChild</code>\nAn archived <code>JSXText</code>\nAn archived <code>Key</code>\nAn archived <code>KeyValuePatProp</code>\nAn archived <code>KeyValueProp</code>\nAn archived <code>LabeledStmt</code>\nAn archived <code>Lit</code>\nAn archived <code>MemberExpr</code>\nAn archived <code>MemberProp</code>\nAn archived <code>MetaPropExpr</code>\nAn archived <code>MetaPropKind</code>\nAn archived <code>MethodKind</code>\nAn archived <code>MethodProp</code>\nAn archived <code>Module</code>\nAn archived <code>ModuleDecl</code>\nAn archived <code>ModuleExportName</code>\nAn archived <code>ModuleItem</code>\nAn archived <code>NamedExport</code>\nAn archived <code>NewExpr</code>\nAn archived <code>Null</code>\nAn archived <code>Number</code>\nAn archived <code>ObjectLit</code>\nAn archived <code>ObjectPat</code>\nAn archived <code>ObjectPatProp</code>\nAn archived <code>OptCall</code>\nAn archived <code>OptChainBase</code>\nAn archived <code>OptChainExpr</code>\nAn archived <code>Param</code>\nAn archived <code>ParamOrTsParamProp</code>\nAn archived <code>ParenExpr</code>\nAn archived <code>Pat</code>\nAn archived <code>PrivateMethod</code>\nAn archived <code>PrivateName</code>\nAn archived <code>PrivateProp</code>\nAn archived <code>Program</code>\nAn archived <code>Prop</code>\nAn archived <code>PropName</code>\nAn archived <code>PropOrSpread</code>\nAn archived <code>Regex</code>\nAn archived <code>ReservedUnused</code>\nAn archived <code>RestPat</code>\nAn archived <code>ReturnStmt</code>\nAn archived <code>Script</code>\nAn archived <code>SeqExpr</code>\nAn archived <code>SetterProp</code>\nAn archived <code>SimpleAssignTarget</code>\nAn archived <code>SpreadElement</code>\nAn archived <code>StaticBlock</code>\nAn archived <code>Stmt</code>\nAn archived <code>Str</code>\nAn archived <code>Super</code>\nAn archived <code>SuperProp</code>\nAn archived <code>SuperPropExpr</code>\nAn archived <code>SwitchCase</code>\nAn archived <code>SwitchStmt</code>\nAn archived <code>TaggedTpl</code>\nAn archived <code>ThisExpr</code>\nAn archived <code>ThrowStmt</code>\nAn archived <code>Tpl</code>\nAn archived <code>TplElement</code>\nAn archived <code>TruePlusMinus</code>\nAn archived <code>TryStmt</code>\nAn archived <code>TsArrayType</code>\nAn archived <code>TsAsExpr</code>\nAn archived <code>TsCallSignatureDecl</code>\nAn archived <code>TsConditionalType</code>\nAn archived <code>TsConstAssertion</code>\nAn archived <code>TsConstructSignatureDecl</code>\nAn archived <code>TsConstructorType</code>\nAn archived <code>TsEntityName</code>\nAn archived <code>TsEnumDecl</code>\nAn archived <code>TsEnumMember</code>\nAn archived <code>TsEnumMemberId</code>\nAn archived <code>TsExportAssignment</code>\nAn archived <code>TsExprWithTypeArgs</code>\nAn archived <code>TsExternalModuleRef</code>\nAn archived <code>TsFnOrConstructorType</code>\nAn archived <code>TsFnParam</code>\nAn archived <code>TsFnType</code>\nAn archived <code>TsGetterSignature</code>\nAn archived <code>TsImportEqualsDecl</code>\nAn archived <code>TsImportType</code>\nAn archived <code>TsIndexSignature</code>\nAn archived <code>TsIndexedAccessType</code>\nAn archived <code>TsInferType</code>\nAn archived <code>TsInstantiation</code>\nAn archived <code>TsInterfaceBody</code>\nAn archived <code>TsInterfaceDecl</code>\nAn archived <code>TsIntersectionType</code>\nAn archived <code>TsKeywordType</code>\nAn archived <code>TsKeywordTypeKind</code>\nAn archived <code>TsLit</code>\nAn archived <code>TsLitType</code>\nAn archived <code>TsMappedType</code>\nAn archived <code>TsMethodSignature</code>\nAn archived <code>TsModuleBlock</code>\nAn archived <code>TsModuleDecl</code>\nAn archived <code>TsModuleName</code>\nAn archived <code>TsModuleRef</code>\nAn archived <code>TsNamespaceBody</code>\nAn archived <code>TsNamespaceDecl</code>\nAn archived <code>TsNamespaceExportDecl</code>\nAn archived <code>TsNonNullExpr</code>\nAn archived <code>TsOptionalType</code>\nAn archived <code>TsParamProp</code>\nAn archived <code>TsParamPropParam</code>\nAn archived <code>TsParenthesizedType</code>\nAn archived <code>TsPropertySignature</code>\nAn archived <code>TsQualifiedName</code>\nAn archived <code>TsRestType</code>\nAn archived <code>TsSatisfiesExpr</code>\nAn archived <code>TsSetterSignature</code>\nAn archived <code>TsThisType</code>\nAn archived <code>TsThisTypeOrIdent</code>\nAn archived <code>TsTplLitType</code>\nAn archived <code>TsTupleElement</code>\nAn archived <code>TsTupleType</code>\nAn archived <code>TsType</code>\nAn archived <code>TsTypeAliasDecl</code>\nAn archived <code>TsTypeAnn</code>\nAn archived <code>TsTypeAssertion</code>\nAn archived <code>TsTypeElement</code>\nAn archived <code>TsTypeLit</code>\nAn archived <code>TsTypeOperator</code>\nAn archived <code>TsTypeOperatorOp</code>\nAn archived <code>TsTypeParam</code>\nAn archived <code>TsTypeParamDecl</code>\nAn archived <code>TsTypeParamInstantiation</code>\nAn archived <code>TsTypePredicate</code>\nAn archived <code>TsTypeQuery</code>\nAn archived <code>TsTypeQueryExpr</code>\nAn archived <code>TsTypeRef</code>\nAn archived <code>TsUnionOrIntersectionType</code>\nAn archived <code>TsUnionType</code>\nAn archived <code>UnaryExpr</code>\nAn archived <code>UnaryOp</code>\nAn archived <code>UpdateExpr</code>\nAn archived <code>UpdateOp</code>\nAn archived <code>UsingDecl</code>\nAn archived <code>VarDecl</code>\nAn archived <code>VarDeclKind</code>\nAn archived <code>VarDeclOrExpr</code>\nAn archived <code>VarDeclarator</code>\nAn archived <code>WhileStmt</code>\nAn archived <code>WithStmt</code>\nAn archived <code>YieldExpr</code>\nThe resolver for <code>Expr::Array</code>\nThe archived counterpart of <code>Expr::Array</code>\nThe resolver for <code>AssignTargetPat::Array</code>\nThe archived counterpart of <code>AssignTargetPat::Array</code>\nThe archived counterpart of <code>Pat::Array</code>\nThe archived counterpart of <code>TsFnParam::Array</code>\nArray literal.\nThe resolver for an archived <code>ArrayLit</code>\nThe resolver for <code>Expr::Arrow</code>\nThe archived counterpart of <code>Expr::Arrow</code>\nThe resolver for an archived <code>ArrowExpr</code>\nThe resolver for <code>Expr::Assign</code>\nThe archived counterpart of <code>Expr::Assign</code>\nThe archived counterpart of <code>AssignOp::Assign</code>\n<code>=</code>\nThe archived counterpart of <code>Pat::Assign</code>\nThe archived counterpart of <code>ObjectPatProp::Assign</code>\nThe archived counterpart of <code>Prop::Assign</code>\nThis is <strong>invalid</strong> for object literal.\nThe archived counterpart of <code>TsParamPropParam::Assign</code>\nThe resolver for an archived <code>AssignExpr</code>\n<code>{key}</code> or <code>{key = value}</code>\nThe resolver for an archived <code>AssignTargetPat</code>\nThe resolver for an archived <code>AssignTarget</code>\nThe archived counterpart of <code>ClassMember::AutoAccessor</code>\nStage 3\nThe resolver for <code>Expr::Await</code>\nThe archived counterpart of <code>Expr::Await</code>\nThe resolver for an archived <code>AwaitExpr</code>\nThe archived counterpart of <code>UnaryOp::Bang</code>\n<code>!</code>\nThe archived counterpart of <code>Lit::BigInt</code>\nThe archived counterpart of <code>PropName::BigInt</code>\nThe archived counterpart of <code>TsLit::BigInt</code>\nThe resolver for <code>Expr::Bin</code>\nThe archived counterpart of <code>Expr::Bin</code>\nThe resolver for an archived <code>BinExpr</code>\nIdentifier used as a pattern.\nThe archived counterpart of <code>BinaryOp::BitAnd</code>\n<code>&amp;</code>\nThe archived counterpart of <code>AssignOp::BitAndAssign</code>\n<code>&amp;=</code>\nThe archived counterpart of <code>BinaryOp::BitOr</code>\n<code>|</code>\nThe archived counterpart of <code>AssignOp::BitOrAssign</code>\n<code>|=</code>\nThe archived counterpart of <code>BinaryOp::BitXor</code>\n<code>^</code>\nThe archived counterpart of <code>AssignOp::BitXorAssign</code>\n<code>^=</code>\nThe archived counterpart of <code>Stmt::Block</code>\nUse when only block statements are allowed.\nThe resolver for <code>BlockStmtOrExpr::BlockStmt</code>\nThe archived counterpart of <code>BlockStmtOrExpr::BlockStmt</code>\nThe resolver for an archived <code>BlockStmtOrExpr</code>\nA boolean literal.\nThe archived counterpart of <code>Lit::Bool</code>\nThe archived counterpart of <code>TsLit::Bool</code>\nThe archived counterpart of <code>Stmt::Break</code>\nThe resolver for <code>Expr::Call</code>\nThe archived counterpart of <code>Expr::Call</code>\nThe resolver for <code>OptChainBase::Call</code>\nThe archived counterpart of <code>OptChainBase::Call</code>\nThe resolver for an archived <code>CallExpr</code>\nThe resolver for an archived <code>Callee</code>\nThe archived counterpart of <code>Decl::Class</code>\nThe resolver for <code>Expr::Class</code>\nThe archived counterpart of <code>Expr::Class</code>\nThe archived counterpart of <code>DefaultDecl::Class</code>\nClass expression.\nThe resolver for an archived <code>ClassExpr</code>\nThe archived counterpart of <code>ClassMember::ClassProp</code>\nstage 0 / Typescript\nThe resolver for <code>MemberProp::Computed</code>\nThe archived counterpart of <code>MemberProp::Computed</code>\nThe resolver for <code>SuperProp::Computed</code>\nThe archived counterpart of <code>SuperProp::Computed</code>\nThe archived counterpart of <code>PropName::Computed</code>\nThe resolver for <code>Expr::Cond</code>\nThe archived counterpart of <code>Expr::Cond</code>\ntrue ? ‘a’ : ‘b’\nThe resolver for an archived <code>CondExpr</code>\nThe archived counterpart of <code>VarDeclKind::Const</code>\n<code>const</code>\nThe archived counterpart of <code>ClassMember::Constructor</code>\nThe archived counterpart of <code>Stmt::Continue</code>\nThe archived counterpart of <code>Stmt::Debugger</code>\nThe archived counterpart of <code>Stmt::Decl</code>\nThe archived counterpart of <code>ImportSpecifier::Default</code>\nThe archived counterpart of <code>ExportSpecifier::Default</code>\nThe archived counterpart of <code>UnaryOp::Delete</code>\n<code>delete</code>\nThe archived counterpart of <code>BinaryOp::Div</code>\n<code>/</code>\nThe archived counterpart of <code>AssignOp::DivAssign</code>\n<code>/=</code>\nThe archived counterpart of <code>Stmt::DoWhile</code>\nThe archived counterpart of <code>ClassMember::Empty</code>\nThe archived counterpart of <code>Stmt::Empty</code>\nThe archived counterpart of <code>BinaryOp::EqEq</code>\n<code>==</code>\nThe archived counterpart of <code>BinaryOp::EqEqEq</code>\n<code>===</code>\nNote: This type implements <code>Serailize</code> and <code>Deserialize</code> if …\nThe archived counterpart of <code>BinaryOp::Exp</code>\n<code>**</code>\nThe archived counterpart of <code>AssignOp::ExpAssign</code>\n<code>**=</code>\n<code>export * from &#39;mod&#39;</code>\nThe archived counterpart of <code>ModuleDecl::ExportAll</code>\nThe archived counterpart of <code>ModuleDecl::ExportDecl</code>\nThe archived counterpart of <code>ModuleDecl::ExportDefaultDecl</code>\nDefault exports other than <strong>direct</strong> function expression or …\nThe archived counterpart of <code>ModuleDecl::ExportDefaultExpr</code>\nThe archived counterpart of <code>ModuleDecl::ExportNamed</code>\n<code>export * as foo from &#39;src&#39;;</code>\nThe resolver for <code>Callee::Expr</code>\nThe archived counterpart of <code>Callee::Expr</code>\nThe resolver for <code>BlockStmtOrExpr::Expr</code>\nThe archived counterpart of <code>BlockStmtOrExpr::Expr</code>\nThe archived counterpart of <code>JSXExpr::Expr</code>\nThe archived counterpart of <code>Pat::Expr</code>\nOnly for for-in / for-of loops. This is <em>syntactically</em> …\nThe archived counterpart of <code>Stmt::Expr</code>\nThe archived counterpart of <code>VarDeclOrExpr::Expr</code>\nThe resolver for an archived <code>ExprOrSpread</code>\nThe resolver for an archived <code>Expr</code>\nThe archived counterpart of <code>Decl::Fn</code>\nThe resolver for <code>Expr::Fn</code>\nThe archived counterpart of <code>Expr::Fn</code>\nThe archived counterpart of <code>DefaultDecl::Fn</code>\nFunction expression.\nThe resolver for an archived <code>FnExpr</code>\nThe archived counterpart of <code>Stmt::For</code>\nA head for for-in and for-of loop.\nThe archived counterpart of <code>Stmt::ForIn</code>\nThe archived counterpart of <code>Stmt::ForOf</code>\nCommon parts of function and method.\nThe archived counterpart of <code>MethodKind::Getter</code>\nThe archived counterpart of <code>Prop::Getter</code>\nThe archived counterpart of <code>BinaryOp::Gt</code>\n<code>&gt;</code>\nThe archived counterpart of <code>BinaryOp::GtEq</code>\n<code>&gt;=</code>\nSee Ident for documentation.\nA complete identifier with span.\nThe resolver for <code>Expr::Ident</code>\nThe archived counterpart of <code>Expr::Ident</code>\nThe resolver for <code>MemberProp::Ident</code>\nThe archived counterpart of <code>MemberProp::Ident</code>\nThe resolver for <code>SuperProp::Ident</code>\nThe archived counterpart of <code>SuperProp::Ident</code>\nThe resolver for <code>SimpleAssignTarget::Ident</code>\nThe archived counterpart of <code>SimpleAssignTarget::Ident</code>\nNote: This type is to help implementing visitor and the …\nThe archived counterpart of <code>JSXObject::Ident</code>\nThe archived counterpart of <code>JSXElementName::Ident</code>\nThe archived counterpart of <code>JSXAttrName::Ident</code>\nThe archived counterpart of <code>ModuleExportName::Ident</code>\nThe archived counterpart of <code>Pat::Ident</code>\nThe archived counterpart of <code>PropName::Ident</code>\nThe archived counterpart of <code>TsParamPropParam::Ident</code>\nThe archived counterpart of <code>TsEntityName::Ident</code>\nThe archived counterpart of <code>TsFnParam::Ident</code>\nThe archived counterpart of <code>TsThisTypeOrIdent::Ident</code>\nThe archived counterpart of <code>TsEnumMemberId::Ident</code>\nThe archived counterpart of <code>TsModuleName::Ident</code>\nThe archived counterpart of <code>Stmt::If</code>\nThe resolver for <code>Callee::Import</code>\nThe archived counterpart of <code>Callee::Import</code>\nThe archived counterpart of <code>ModuleDecl::Import</code>\nThe archived counterpart of <code>TsTypeQueryExpr::Import</code>\ne.g. <code>import foo from &#39;mod.js&#39;</code>\nThe resolver for <code>MetaPropKind::ImportMeta</code>\nThe archived counterpart of <code>MetaPropKind::ImportMeta</code>\n<code>import.meta</code>\ne.g. local = foo, imported = None …\nThe resolver for an archived <code>Import</code>\ne.g. <code>import * as foo from &#39;mod.js&#39;</code>.\nAccording to the current spec <code>with</code> of crate::ImportDecl …\nThe archived counterpart of <code>BinaryOp::In</code>\n<code>in</code>\nThe archived counterpart of <code>BinaryOp::InstanceOf</code>\n<code>instanceof</code>\nRepresents a invalid node.\nThe resolver for <code>Expr::Invalid</code>\nThe archived counterpart of <code>Expr::Invalid</code>\nThe resolver for <code>AssignTargetPat::Invalid</code>\nThe archived counterpart of <code>AssignTargetPat::Invalid</code>\nThe resolver for <code>SimpleAssignTarget::Invalid</code>\nThe archived counterpart of <code>SimpleAssignTarget::Invalid</code>\nThe archived counterpart of <code>Pat::Invalid</code>\nThe resolver for an archived <code>Invalid</code>\nThe archived counterpart of <code>JSXAttrOrSpread::JSXAttr</code>\nThe resolver for <code>Expr::JSXElement</code>\nThe archived counterpart of <code>Expr::JSXElement</code>\nThe archived counterpart of <code>JSXAttrValue::JSXElement</code>\nThe archived counterpart of <code>JSXElementChild::JSXElement</code>\nThe resolver for <code>Expr::JSXEmpty</code>\nThe archived counterpart of <code>Expr::JSXEmpty</code>\nThe archived counterpart of <code>JSXExpr::JSXEmptyExpr</code>\nThe archived counterpart of <code>JSXAttrValue::JSXExprContainer</code>\nThe archived counterpart of …\nThe resolver for <code>Expr::JSXFragment</code>\nThe archived counterpart of <code>Expr::JSXFragment</code>\nThe archived counterpart of <code>JSXAttrValue::JSXFragment</code>\nThe archived counterpart of <code>JSXElementChild::JSXFragment</code>\nThe resolver for <code>Expr::JSXMember</code>\nThe archived counterpart of <code>Expr::JSXMember</code>\nThe archived counterpart of <code>JSXObject::JSXMemberExpr</code>\nThe archived counterpart of <code>JSXElementName::JSXMemberExpr</code>\nXML-based namespace syntax:\nThe resolver for <code>Expr::JSXNamespacedName</code>\nThe archived counterpart of <code>Expr::JSXNamespacedName</code>\nThe archived counterpart of …\nThe archived counterpart of <code>JSXAttrName::JSXNamespacedName</code>\nUsed for <code>obj</code> property of <code>JSXMemberExpr</code>.\nThe archived counterpart of <code>JSXElementChild::JSXSpreadChild</code>\nThe archived counterpart of <code>JSXElementChild::JSXText</code>\nThe archived counterpart of <code>Lit::JSXText</code>\nEither a private name or a public name.\nThe archived counterpart of <code>TsTypeOperatorOp::KeyOf</code>\n<code>keyof</code>\nThe archived counterpart of <code>ObjectPatProp::KeyValue</code>\nThe archived counterpart of <code>Prop::KeyValue</code>\n<code>key: value</code> in <code>{ key: value, }</code>\n<code>{key: value}</code>\nThe archived counterpart of <code>BinaryOp::LShift</code>\n<code>&lt;&lt;</code>\nThe archived counterpart of <code>AssignOp::LShiftAssign</code>\n<code>&lt;&lt;=</code>\nThe archived counterpart of <code>Stmt::Labeled</code>\nThe archived counterpart of <code>VarDeclKind::Let</code>\n<code>let</code>\nRepresents the formatting rule for a list of nodes.\nThe resolver for <code>Expr::Lit</code>\nThe archived counterpart of <code>Expr::Lit</code>\nThe archived counterpart of <code>JSXAttrValue::Lit</code>\nThe archived counterpart of <code>BinaryOp::LogicalAnd</code>\n<code>&amp;&amp;</code>\nThe archived counterpart of <code>BinaryOp::LogicalOr</code>\n<code>||</code>\nThe archived counterpart of <code>BinaryOp::Lt</code>\n<code>&lt;</code>\nThe archived counterpart of <code>BinaryOp::LtEq</code>\n<code>&lt;=</code>\nThe resolver for <code>Expr::Member</code>\nThe archived counterpart of <code>Expr::Member</code>\nA member expression. If computed is true, the node …\nThe resolver for <code>SimpleAssignTarget::Member</code>\nThe archived counterpart of <code>SimpleAssignTarget::Member</code>\nThe resolver for <code>OptChainBase::Member</code>\nThe archived counterpart of <code>OptChainBase::Member</code>\nThe resolver for an archived <code>MemberExpr</code>\nThe resolver for an archived <code>MemberProp</code>\nThe resolver for <code>Expr::MetaProp</code>\nThe archived counterpart of <code>Expr::MetaProp</code>\nThe resolver for an archived <code>MetaPropExpr</code>\nThe resolver for an archived <code>MetaPropKind</code>\nThe archived counterpart of <code>ClassMember::Method</code>\n<code>es2015</code>\nThe archived counterpart of <code>MethodKind::Method</code>\nThe archived counterpart of <code>Prop::Method</code>\nThe archived counterpart of <code>UnaryOp::Minus</code>\n<code>-</code>\nThe archived counterpart of <code>TruePlusMinus::Minus</code>\nThe archived counterpart of <code>UpdateOp::MinusMinus</code>\n<code>--</code>\nThe archived counterpart of <code>BinaryOp::Mod</code>\n<code>%</code>\nThe archived counterpart of <code>AssignOp::ModAssign</code>\n<code>%=</code>\nThe archived counterpart of <code>Program::Module</code>\nThe archived counterpart of <code>ModuleItem::ModuleDecl</code>\nThe archived counterpart of <code>BinaryOp::Mul</code>\n<code>*</code>\nThe archived counterpart of <code>AssignOp::MulAssign</code>\n<code>*=</code>\nThe archived counterpart of <code>ImportSpecifier::Named</code>\nThe archived counterpart of <code>ExportSpecifier::Named</code>\n<code>export { foo } from &#39;mod&#39;</code> <code>export { foo as bar } from &#39;mod&#39;</code>\nThe archived counterpart of <code>ImportSpecifier::Namespace</code>\nThe archived counterpart of <code>ExportSpecifier::Namespace</code>\nThe resolver for <code>Expr::New</code>\nThe archived counterpart of <code>Expr::New</code>\n<code>new Cat()</code>\nThe resolver for an archived <code>NewExpr</code>\nThe resolver for <code>MetaPropKind::NewTarget</code>\nThe archived counterpart of <code>MetaPropKind::NewTarget</code>\n<code>new.target</code>\nThe archived counterpart of <code>BinaryOp::NotEq</code>\n<code>!=</code>\nThe archived counterpart of <code>BinaryOp::NotEqEq</code>\n<code>!==</code>\nThe archived counterpart of <code>Lit::Null</code>\nThe archived counterpart of <code>AssignOp::NullishAssign</code>\n<code>??=</code>\nThe archived counterpart of <code>BinaryOp::NullishCoalescing</code>\n<code>??</code>\nThe archived counterpart of <code>Lit::Num</code>\nThe archived counterpart of <code>PropName::Num</code>\nNumeric literal.\nA numeric literal.\nThe archived counterpart of <code>TsLit::Number</code>\nThe resolver for <code>Expr::Object</code>\nThe archived counterpart of <code>Expr::Object</code>\nThe resolver for <code>AssignTargetPat::Object</code>\nThe archived counterpart of <code>AssignTargetPat::Object</code>\nThe archived counterpart of <code>Pat::Object</code>\nThe archived counterpart of <code>TsFnParam::Object</code>\nObject literal.\nThe resolver for an archived <code>ObjectLit</code>\nThe resolver for an archived <code>OptCall</code>\nThe resolver for <code>Expr::OptChain</code>\nThe archived counterpart of <code>Expr::OptChain</code>\nThe resolver for <code>SimpleAssignTarget::OptChain</code>\nThe archived counterpart of <code>SimpleAssignTarget::OptChain</code>\nThe resolver for an archived <code>OptChainBase</code>\nThe resolver for an archived <code>OptChainExpr</code>\nThe archived counterpart of <code>AssignOp::OrAssign</code>\n<code>||=</code>\nThe archived counterpart of <code>ParamOrTsParamProp::Param</code>\nThe resolver for <code>Expr::Paren</code>\nThe archived counterpart of <code>Expr::Paren</code>\nThe resolver for <code>SimpleAssignTarget::Paren</code>\nThe archived counterpart of <code>SimpleAssignTarget::Paren</code>\nThe resolver for an archived <code>ParenExpr</code>\nThe resolver for <code>AssignTarget::Pat</code>\nThe archived counterpart of <code>AssignTarget::Pat</code>\nThe archived counterpart of <code>ForHead::Pat</code>\nThe archived counterpart of <code>UnaryOp::Plus</code>\n<code>+</code>\nThe archived counterpart of <code>TruePlusMinus::Plus</code>\nThe archived counterpart of <code>UpdateOp::PlusPlus</code>\n<code>++</code>\nThe archived counterpart of <code>Key::Private</code>\nThe archived counterpart of <code>Accessibility::Private</code>\nThe archived counterpart of <code>ClassMember::PrivateMethod</code>\nThe resolver for <code>Expr::PrivateName</code>\nThe archived counterpart of <code>Expr::PrivateName</code>\nThe resolver for <code>MemberProp::PrivateName</code>\nThe archived counterpart of <code>MemberProp::PrivateName</code>\nThe archived counterpart of <code>ClassMember::PrivateProp</code>\nThe resolver for <code>PropOrSpread::Prop</code>\nThe archived counterpart of <code>PropOrSpread::Prop</code>\nThe resolver for an archived <code>PropOrSpread</code>\nThe archived counterpart of <code>Accessibility::Protected</code>\nThe archived counterpart of <code>Key::Public</code>\nThe archived counterpart of <code>Accessibility::Public</code>\nThe archived counterpart of <code>BinaryOp::RShift</code>\n<code>&gt;&gt;</code>\nThe archived counterpart of <code>AssignOp::RShiftAssign</code>\n<code>&gt;&gt;=</code>\nThe archived counterpart of <code>TsTypeOperatorOp::ReadOnly</code>\n<code>readonly</code>\nThe archived counterpart of <code>Lit::Regex</code>\nThe archived counterpart of <code>Pat::Rest</code>\nThe archived counterpart of <code>ObjectPatProp::Rest</code>\nThe archived counterpart of <code>TsFnParam::Rest</code>\nEsTree <code>RestElement</code>\nThe archived counterpart of <code>Stmt::Return</code>\nThe archived counterpart of <code>Program::Script</code>\nThe resolver for <code>Expr::Seq</code>\nThe archived counterpart of <code>Expr::Seq</code>\nThe resolver for an archived <code>SeqExpr</code>\nThe archived counterpart of <code>MethodKind::Setter</code>\nThe archived counterpart of <code>Prop::Setter</code>\nThe archived counterpart of <code>Prop::Shorthand</code>\n<code>a</code> in <code>{ a, }</code>\nThe resolver for <code>AssignTarget::Simple</code>\nThe archived counterpart of <code>AssignTarget::Simple</code>\nThe resolver for an archived <code>SimpleAssignTarget</code>\nThe resolver for <code>PropOrSpread::Spread</code>\nThe archived counterpart of <code>PropOrSpread::Spread</code>\nSpread properties, e.g., <code>{a: 1, ...obj, b: 2}</code>.\nThe archived counterpart of <code>JSXAttrOrSpread::SpreadElement</code>\nThe resolver for an archived <code>SpreadElement</code>\nThe archived counterpart of <code>ClassMember::StaticBlock</code>\nStage 3\nThe archived counterpart of <code>ModuleItem::Stmt</code>\nA string literal.\nThe archived counterpart of <code>Lit::Str</code>\nThe archived counterpart of <code>ModuleExportName::Str</code>\nThe archived counterpart of <code>PropName::Str</code>\nString literal.\nThe archived counterpart of <code>TsLit::Str</code>\nThe archived counterpart of <code>TsEnumMemberId::Str</code>\nThe archived counterpart of <code>TsModuleName::Str</code>\nThe archived counterpart of <code>BinaryOp::Sub</code>\n<code>-</code>\nThe archived counterpart of <code>AssignOp::SubAssign</code>\n<code>-=</code>\nThe resolver for <code>Callee::Super</code>\nThe archived counterpart of <code>Callee::Super</code>\nThe resolver for <code>Expr::SuperProp</code>\nThe archived counterpart of <code>Expr::SuperProp</code>\nThe resolver for <code>SimpleAssignTarget::SuperProp</code>\nThe archived counterpart of <code>SimpleAssignTarget::SuperProp</code>\nThe resolver for an archived <code>SuperPropExpr</code>\nThe resolver for an archived <code>SuperProp</code>\nThe resolver for an archived <code>Super</code>\nThe archived counterpart of <code>Stmt::Switch</code>\nThe resolver for <code>Expr::TaggedTpl</code>\nThe archived counterpart of <code>Expr::TaggedTpl</code>\nThe resolver for an archived <code>TaggedTpl</code>\nThe resolver for <code>Expr::This</code>\nThe archived counterpart of <code>Expr::This</code>\nThe resolver for an archived <code>ThisExpr</code>\nThe archived counterpart of <code>Stmt::Throw</code>\nThe archived counterpart of <code>UnaryOp::Tilde</code>\n<code>~</code>\nThe resolver for <code>Expr::Tpl</code>\nThe archived counterpart of <code>Expr::Tpl</code>\nThe archived counterpart of <code>TsLit::Tpl</code>\nThe resolver for an archived <code>TplElement</code>\nThe resolver for an archived <code>Tpl</code>\nThe archived counterpart of <code>TruePlusMinus::True</code>\nThe archived counterpart of <code>Stmt::Try</code>\nA try statement. If handler is null then finalizer must be …\nThe archived counterpart of <code>TsKeywordTypeKind::TsAnyKeyword</code>\nThe archived counterpart of <code>TsType::TsArrayType</code>\nThe resolver for <code>Expr::TsAs</code>\nThe archived counterpart of <code>Expr::TsAs</code>\nThe resolver for <code>SimpleAssignTarget::TsAs</code>\nThe archived counterpart of <code>SimpleAssignTarget::TsAs</code>\nThe archived counterpart of …\nThe archived counterpart of …\nThe archived counterpart of …\nThe archived counterpart of <code>TsType::TsConditionalType</code>\nThe resolver for <code>Expr::TsConstAssertion</code>\nThe archived counterpart of <code>Expr::TsConstAssertion</code>\nThe archived counterpart of …\nThe archived counterpart of …\nThe archived counterpart of <code>TsTypeQueryExpr::TsEntityName</code>\nThe archived counterpart of <code>TsModuleRef::TsEntityName</code>\nThe archived counterpart of <code>Decl::TsEnum</code>\nInvalid: Ident with empty symbol.\nTypeScript’s own parser uses ExportAssignment for both …\nThe archived counterpart of <code>ModuleDecl::TsExportAssignment</code>\nThe archived counterpart of …\nThe archived counterpart of <code>TsType::TsFnOrConstructorType</code>\nThe archived counterpart of <code>TsFnOrConstructorType::TsFnType</code>\nThe archived counterpart of …\nThe archived counterpart of <code>ModuleDecl::TsImportEquals</code>\nThe archived counterpart of <code>TsType::TsImportType</code>\nThe archived counterpart of <code>ClassMember::TsIndexSignature</code>\nThe archived counterpart of <code>TsTypeElement::TsIndexSignature</code>\nThe archived counterpart of <code>TsType::TsIndexedAccessType</code>\nThe archived counterpart of <code>TsType::TsInferType</code>\nThe resolver for <code>Expr::TsInstantiation</code>\nThe archived counterpart of <code>Expr::TsInstantiation</code>\nThe resolver for <code>SimpleAssignTarget::TsInstantiation</code>\nThe archived counterpart of …\nThe archived counterpart of <code>Decl::TsInterface</code>\nThe archived counterpart of <code>DefaultDecl::TsInterfaceDecl</code>\nThe archived counterpart of …\nThe archived counterpart of …\nThe archived counterpart of <code>TsType::TsKeywordType</code>\nThe archived counterpart of <code>TsType::TsLitType</code>\nThe archived counterpart of <code>TsType::TsMappedType</code>\nThe archived counterpart of …\nThe archived counterpart of <code>Decl::TsModule</code>\nThe archived counterpart of <code>TsNamespaceBody::TsModuleBlock</code>\n<code>namespace A.B { }</code> is a namespace named <code>A</code> with another …\nThe archived counterpart of …\nThe archived counterpart of <code>ModuleDecl::TsNamespaceExport</code>\nThe archived counterpart of …\nThe resolver for <code>Expr::TsNonNull</code>\nThe archived counterpart of <code>Expr::TsNonNull</code>\nThe resolver for <code>SimpleAssignTarget::TsNonNull</code>\nThe archived counterpart of <code>SimpleAssignTarget::TsNonNull</code>\nThe archived counterpart of …\nThe archived counterpart of …\nThe archived counterpart of …\nThe archived counterpart of <code>TsType::TsOptionalType</code>\nThe archived counterpart of <code>ParamOrTsParamProp::TsParamProp</code>\nThe archived counterpart of <code>TsType::TsParenthesizedType</code>\nThe archived counterpart of …\nThe archived counterpart of <code>TsEntityName::TsQualifiedName</code>\nThe archived counterpart of <code>TsType::TsRestType</code>\nThe resolver for <code>Expr::TsSatisfies</code>\nThe archived counterpart of <code>Expr::TsSatisfies</code>\nThe resolver for <code>SimpleAssignTarget::TsSatisfies</code>\nThe archived counterpart of <code>SimpleAssignTarget::TsSatisfies</code>\nThe archived counterpart of …\nThe archived counterpart of …\nThe archived counterpart of …\nThe archived counterpart of <code>TsType::TsThisType</code>\nThe archived counterpart of <code>TsThisTypeOrIdent::TsThisType</code>\nThe archived counterpart of <code>TsType::TsTupleType</code>\nThe archived counterpart of <code>Decl::TsTypeAlias</code>\nThe resolver for <code>Expr::TsTypeAssertion</code>\nThe archived counterpart of <code>Expr::TsTypeAssertion</code>\nThe resolver for <code>SimpleAssignTarget::TsTypeAssertion</code>\nThe archived counterpart of …\nThe archived counterpart of <code>TsType::TsTypeLit</code>\nThe archived counterpart of <code>TsType::TsTypeOperator</code>\nThe archived counterpart of <code>TsType::TsTypePredicate</code>\n<code>typeof</code> operator\nThe archived counterpart of <code>TsType::TsTypeQuery</code>\nThe archived counterpart of <code>TsType::TsTypeRef</code>\nThe archived counterpart of …\nThe archived counterpart of …\nThe archived counterpart of …\nThe archived counterpart of …\nThe archived counterpart of …\nThe archived counterpart of <code>UnaryOp::TypeOf</code>\n<code>typeof</code>\nThe resolver for <code>Expr::Unary</code>\nThe archived counterpart of <code>Expr::Unary</code>\nThe resolver for an archived <code>UnaryExpr</code>\nThe archived counterpart of <code>TsTypeOperatorOp::Unique</code>\n<code>unique</code>\nThe resolver for <code>Expr::Update</code>\nThe archived counterpart of <code>Expr::Update</code>\n<code>++v</code>, <code>--v</code>, <code>v++</code>, <code>v--</code>\nThe resolver for an archived <code>UpdateExpr</code>\nThe archived counterpart of <code>Decl::Using</code>\nThe archived counterpart of <code>ForHead::UsingDecl</code>\nThe archived counterpart of <code>Decl::Var</code>\nThe archived counterpart of <code>VarDeclKind::Var</code>\n<code>var</code>\nThe archived counterpart of <code>ForHead::VarDecl</code>\nThe archived counterpart of <code>VarDeclOrExpr::VarDecl</code>\nThe archived counterpart of <code>UnaryOp::Void</code>\n<code>void</code>\nThe archived counterpart of <code>Stmt::While</code>\nThe archived counterpart of <code>Stmt::With</code>\nThe resolver for <code>Expr::Yield</code>\nThe archived counterpart of <code>Expr::Yield</code>\nThe resolver for an archived <code>YieldExpr</code>\nThe archived counterpart of <code>BinaryOp::ZeroFillRShift</code>\n<code>&gt;&gt;&gt;</code>\nThe archived counterpart of <code>AssignOp::ZeroFillRShiftAssign</code>\n<code>&gt;&gt;&gt;=</code>\nThe archived counterpart of <code>ClassProp::accessibility</code>\nTypescript extension.\nThe archived counterpart of <code>PrivateProp::accessibility</code>\nTypescript extension.\nThe archived counterpart of <code>ClassMethod::accessibility</code>\nTypescript extension.\nThe archived counterpart of <code>PrivateMethod::accessibility</code>\nTypescript extension.\nThe archived counterpart of <code>Constructor::accessibility</code>\nThe archived counterpart of <code>AutoAccessor::accessibility</code>\nTypescript extension.\nThe archived counterpart of <code>TsParamProp::accessibility</code>\nAt least one of <code>accessibility</code> or <code>readonly</code> must be set.\nThe archived counterpart of <code>CondExpr::alt</code>\nThe archived counterpart of <code>IfStmt::alt</code>\nThe archived counterpart of <code>UnaryExpr::arg</code>\nThe archived counterpart of <code>UpdateExpr::arg</code>\nThe archived counterpart of <code>YieldExpr::arg</code>\nThe archived counterpart of <code>AwaitExpr::arg</code>\nThe archived counterpart of <code>RestPat::arg</code>\nThe archived counterpart of <code>ReturnStmt::arg</code>\nThe archived counterpart of <code>ThrowStmt::arg</code>\nThe archived counterpart of <code>TsImportType::arg</code>\nThe archived counterpart of <code>CallExpr::args</code>\nThe archived counterpart of <code>NewExpr::args</code>\nThe archived counterpart of <code>OptCall::args</code>\nThe archived counterpart of <code>TsTypePredicate::asserts</code>\nThe archived counterpart of <code>JSXOpeningElement::attrs</code>\nThe archived counterpart of <code>OptChainExpr::base</code>\nThis is boxed to reduce the type size of Expr.\nThe archived counterpart of <code>TryStmt::block</code>\nThe archived counterpart of <code>Class::body</code>\nThe archived counterpart of <code>Constructor::body</code>\nThe archived counterpart of <code>StaticBlock::body</code>\nThe archived counterpart of <code>ArrowExpr::body</code>\nThis is boxed to reduce the type size of Expr.\nThe archived counterpart of <code>Function::body</code>\nThe archived counterpart of <code>ReservedUnused::body</code>\nThe archived counterpart of <code>Module::body</code>\nThe archived counterpart of <code>Script::body</code>\nThe archived counterpart of <code>GetterProp::body</code>\nThe archived counterpart of <code>SetterProp::body</code>\nThe archived counterpart of <code>WithStmt::body</code>\nThe archived counterpart of <code>LabeledStmt::body</code>\nThe archived counterpart of <code>WhileStmt::body</code>\nThe archived counterpart of <code>DoWhileStmt::body</code>\nThe archived counterpart of <code>ForStmt::body</code>\nThe archived counterpart of <code>ForInStmt::body</code>\nThe archived counterpart of <code>ForOfStmt::body</code>\nThe archived counterpart of <code>CatchClause::body</code>\nThe archived counterpart of <code>TsInterfaceDecl::body</code>\nThe archived counterpart of <code>TsInterfaceBody::body</code>\nThe archived counterpart of <code>TsModuleDecl::body</code>\nThe archived counterpart of <code>TsModuleBlock::body</code>\nThe archived counterpart of <code>TsNamespaceDecl::body</code>\nThe archived counterpart of <code>CallExpr::callee</code>\nThe archived counterpart of <code>NewExpr::callee</code>\nThe archived counterpart of <code>OptCall::callee</code>\nThe archived counterpart of <code>SwitchStmt::cases</code>\nThe archived counterpart of <code>TsConditionalType::check_type</code>\nThe archived counterpart of <code>JSXElement::children</code>\nThe archived counterpart of <code>JSXFragment::children</code>\nThe archived counterpart of <code>ClassDecl::class</code>\nThe archived counterpart of <code>ClassExpr::class</code>\nThe archived counterpart of <code>JSXElement::closing</code>\nThe archived counterpart of <code>JSXFragment::closing</code>\nGets a custom text range to use when emitting comments.\nThe archived counterpart of <code>TsPropertySignature::computed</code>\nThe archived counterpart of <code>TsGetterSignature::computed</code>\nThe archived counterpart of <code>TsSetterSignature::computed</code>\nThe archived counterpart of <code>TsMethodSignature::computed</code>\nThe archived counterpart of <code>CondExpr::cons</code>\nThe archived counterpart of <code>IfStmt::cons</code>\nThe archived counterpart of <code>SwitchCase::cons</code>\nThe archived counterpart of <code>TsTypeParam::constraint</code>\nThe archived counterpart of <code>TplElement::cooked</code>\nThis value is never used by <code>swc_ecma_codegen</code>, and this …\nThe archived counterpart of <code>ExportDecl::decl</code>\nThe archived counterpart of <code>ExportDefaultDecl::decl</code>\nThe archived counterpart of <code>ClassProp::declare</code>\nThe archived counterpart of <code>FnDecl::declare</code>\nThe archived counterpart of <code>ClassDecl::declare</code>\nThe archived counterpart of <code>VarDecl::declare</code>\nThe archived counterpart of <code>TsInterfaceDecl::declare</code>\nThe archived counterpart of <code>TsTypeAliasDecl::declare</code>\nThe archived counterpart of <code>TsEnumDecl::declare</code>\nThe archived counterpart of <code>TsModuleDecl::declare</code>\nThe archived counterpart of <code>TsNamespaceDecl::declare</code>\nThe archived counterpart of <code>VarDecl::decls</code>\nThe archived counterpart of <code>UsingDecl::decls</code>\nThe archived counterpart of <code>Class::decorators</code>\nThe archived counterpart of <code>ClassProp::decorators</code>\nThe archived counterpart of <code>PrivateProp::decorators</code>\nThe archived counterpart of <code>AutoAccessor::decorators</code>\nThe archived counterpart of <code>Function::decorators</code>\nThe archived counterpart of <code>Param::decorators</code>\nThe archived counterpart of <code>TsParamProp::decorators</code>\nThe archived counterpart of <code>TsTypeParam::default</code>\nThe archived counterpart of <code>ClassProp::definite</code>\nThe archived counterpart of <code>PrivateProp::definite</code>\nThe archived counterpart of <code>AutoAccessor::definite</code>\nThe archived counterpart of <code>VarDeclarator::definite</code>\nTypescript only\nThe archived counterpart of <code>YieldExpr::delegate</code>\nThe archived counterpart of <code>SwitchStmt::discriminant</code>\nThe archived counterpart of <code>SpreadElement::dot3_token</code>\nThe archived counterpart of <code>RestPat::dot3_token</code>\nThe archived counterpart of <code>TsArrayType::elem_type</code>\nThe archived counterpart of <code>TsTupleType::elem_types</code>\nThe archived counterpart of <code>ArrayLit::elems</code>\nThe archived counterpart of <code>ArrayPat::elems</code>\nThe archived counterpart of <code>Regex::exp</code>\nThe archived counterpart of …\nThe archived counterpart of <code>ExportNamedSpecifier::exported</code>\n<code>Some(bar)</code> in <code>export { foo as bar }</code>\nThe archived counterpart of <code>Decorator::expr</code>\nThe archived counterpart of <code>SpreadElement::expr</code>\nThe archived counterpart of <code>ParenExpr::expr</code>\nThe archived counterpart of <code>ExprOrSpread::expr</code>\nThe archived counterpart of <code>JSXExprContainer::expr</code>\nThe archived counterpart of <code>JSXSpreadChild::expr</code>\nThe archived counterpart of <code>ExportDefaultExpr::expr</code>\nThe archived counterpart of <code>ComputedPropName::expr</code>\nThe archived counterpart of <code>ExprStmt::expr</code>\nThe archived counterpart of <code>TsExprWithTypeArgs::expr</code>\nThe archived counterpart of <code>TsExternalModuleRef::expr</code>\nThe archived counterpart of <code>TsExportAssignment::expr</code>\nThe archived counterpart of <code>TsAsExpr::expr</code>\nThe archived counterpart of <code>TsTypeAssertion::expr</code>\nThe archived counterpart of <code>TsNonNullExpr::expr</code>\nThe archived counterpart of <code>TsSatisfiesExpr::expr</code>\nThe archived counterpart of <code>TsConstAssertion::expr</code>\nThe archived counterpart of <code>TsInstantiation::expr</code>\nThe archived counterpart of <code>TsTypeQuery::expr_name</code>\nThe archived counterpart of <code>SeqExpr::exprs</code>\nThe archived counterpart of <code>Tpl::exprs</code>\nThe archived counterpart of <code>TsInterfaceDecl::extends</code>\nThe archived counterpart of <code>TsConditionalType::extends_type</code>\nThe archived counterpart of <code>TsConditionalType::false_type</code>\nThe archived counterpart of <code>TryStmt::finalizer</code>\nThe archived counterpart of <code>Regex::flags</code>\nThe archived counterpart of <code>ClassMethod::function</code>\nThe archived counterpart of <code>PrivateMethod::function</code>\nThe archived counterpart of <code>FnDecl::function</code>\nThe archived counterpart of <code>FnExpr::function</code>\nThe archived counterpart of <code>MethodProp::function</code>\nThe archived counterpart of <code>TsModuleDecl::global</code>\nIn TypeScript, this is only available through<code>node.flags</code>.\nThe archived counterpart of <code>TsNamespaceDecl::global</code>\nIn TypeScript, this is only available through<code>node.flags</code>.\nThe archived counterpart of <code>TryStmt::handler</code>\nThe archived counterpart of <code>BindingIdent::id</code>\nThe archived counterpart of <code>PrivateName::id</code>\nThe archived counterpart of <code>TsInterfaceDecl::id</code>\nThe archived counterpart of <code>TsTypeAliasDecl::id</code>\nThe archived counterpart of <code>TsEnumDecl::id</code>\nThe archived counterpart of <code>TsEnumMember::id</code>\nThe archived counterpart of <code>TsModuleDecl::id</code>\nThe archived counterpart of <code>TsNamespaceDecl::id</code>\nThe archived counterpart of <code>TsImportEqualsDecl::id</code>\nThe archived counterpart of <code>TsNamespaceExportDecl::id</code>\nThe archived counterpart of <code>FnDecl::ident</code>\nThe archived counterpart of <code>ClassDecl::ident</code>\nThe archived counterpart of <code>FnExpr::ident</code>\nThe archived counterpart of <code>ClassExpr::ident</code>\nThe archived counterpart of <code>Class::implements</code>\nTypescript extension.\nThe archived counterpart of <code>ImportNamedSpecifier::imported</code>\nThe archived counterpart of <code>TsIndexedAccessType::index_type</code>\nThe archived counterpart of <code>VarDeclarator::init</code>\nInitialization expression.\nThe archived counterpart of <code>ForStmt::init</code>\nThe archived counterpart of <code>TsEnumMember::init</code>\nThe archived counterpart of <code>Class::is_abstract</code>\nThe archived counterpart of <code>ClassProp::is_abstract</code>\nTypescript extension.\nThe archived counterpart of <code>ClassMethod::is_abstract</code>\nTypescript extension.\nThe archived counterpart of <code>PrivateMethod::is_abstract</code>\nTypescript extension.\nThe archived counterpart of <code>AutoAccessor::is_abstract</code>\nThe archived counterpart of <code>TsConstructorType::is_abstract</code>\nThe archived counterpart of <code>ArrowExpr::is_async</code>\nThe archived counterpart of <code>Function::is_async</code>\nif it’s an async function.\nThe archived counterpart of <code>UsingDecl::is_await</code>\nThe archived counterpart of <code>ForOfStmt::is_await</code>\nSpan of the await token.\nThe archived counterpart of <code>TsTypeParam::is_const</code>\nThe archived counterpart of <code>TsEnumDecl::is_const</code>\nThe archived counterpart of <code>TsImportEqualsDecl::is_export</code>\nThe archived counterpart of <code>ArrowExpr::is_generator</code>\nThe archived counterpart of <code>Function::is_generator</code>\nif it’s a generator.\nThe archived counterpart of <code>TsTypeParam::is_in</code>\nThe archived counterpart of <code>ClassProp::is_optional</code>\nThe archived counterpart of <code>PrivateProp::is_optional</code>\nThe archived counterpart of <code>ClassMethod::is_optional</code>\nThe archived counterpart of <code>PrivateMethod::is_optional</code>\nThe archived counterpart of <code>Constructor::is_optional</code>\nThe archived counterpart of <code>TsTypeParam::is_out</code>\nThe archived counterpart of <code>ClassProp::is_override</code>\nThe archived counterpart of <code>PrivateProp::is_override</code>\nThe archived counterpart of <code>ClassMethod::is_override</code>\nThe archived counterpart of <code>PrivateMethod::is_override</code>\nThe archived counterpart of <code>AutoAccessor::is_override</code>\nThe archived counterpart of <code>TsParamProp::is_override</code>\nThe archived counterpart of <code>ClassProp::is_static</code>\nThe archived counterpart of <code>PrivateProp::is_static</code>\nThe archived counterpart of <code>ClassMethod::is_static</code>\nThe archived counterpart of <code>PrivateMethod::is_static</code>\nThe archived counterpart of <code>AutoAccessor::is_static</code>\nThe archived counterpart of <code>TsIndexSignature::is_static</code>\nThe archived counterpart of …\nThe archived counterpart of …\n<code>type</code> in <code>export { type foo as bar }</code>\nThe archived counterpart of …\nThe archived counterpart of <code>ClassProp::key</code>\nThe archived counterpart of <code>PrivateProp::key</code>\nThe archived counterpart of <code>ClassMethod::key</code>\nThe archived counterpart of <code>PrivateMethod::key</code>\nThe archived counterpart of <code>Constructor::key</code>\nThe archived counterpart of <code>AutoAccessor::key</code>\nThe archived counterpart of <code>KeyValuePatProp::key</code>\nThe archived counterpart of <code>AssignPatProp::key</code>\nNote: This type is to help implementing visitor and the …\nThe archived counterpart of <code>KeyValueProp::key</code>\nThe archived counterpart of <code>AssignProp::key</code>\nThe archived counterpart of <code>GetterProp::key</code>\nThe archived counterpart of <code>SetterProp::key</code>\nThe archived counterpart of <code>MethodProp::key</code>\nThe archived counterpart of <code>TsPropertySignature::key</code>\nThe archived counterpart of <code>TsGetterSignature::key</code>\nThe archived counterpart of <code>TsSetterSignature::key</code>\nThe archived counterpart of <code>TsMethodSignature::key</code>\nThe archived counterpart of <code>ClassMethod::kind</code>\nThe archived counterpart of <code>PrivateMethod::kind</code>\nThe archived counterpart of <code>VarDecl::kind</code>\nThe archived counterpart of <code>MetaPropExpr::kind</code>\nThe archived counterpart of <code>TsKeywordType::kind</code>\nThe archived counterpart of <code>LabeledStmt::label</code>\nThe archived counterpart of <code>BreakStmt::label</code>\nThe archived counterpart of <code>ContinueStmt::label</code>\nThe archived counterpart of <code>TsTupleElement::label</code>\n<code>Ident</code> or <code>RestPat { arg: Ident }</code>\nThe archived counterpart of <code>BinExpr::left</code>\nThe archived counterpart of <code>AssignExpr::left</code>\nThe archived counterpart of <code>AssignPat::left</code>\nThe archived counterpart of <code>ForInStmt::left</code>\nThe archived counterpart of <code>ForOfStmt::left</code>\nThe archived counterpart of <code>TsQualifiedName::left</code>\nThe archived counterpart of <code>TsLitType::lit</code>\nThe archived counterpart of <code>ImportDefaultSpecifier::local</code>\nThe archived counterpart of <code>ImportStarAsSpecifier::local</code>\nThe archived counterpart of <code>ImportNamedSpecifier::local</code>\nThe archived counterpart of <code>TsTypeLit::members</code>\nThe archived counterpart of <code>TsEnumDecl::members</code>\nThe archived counterpart of <code>TsImportEqualsDecl::module_ref</code>\nThe archived counterpart of <code>VarDeclarator::name</code>\nThe archived counterpart of <code>JSXNamespacedName::name</code>\nThe archived counterpart of <code>JSXOpeningElement::name</code>\nThe archived counterpart of <code>JSXClosingElement::name</code>\nThe archived counterpart of <code>JSXAttr::name</code>\nThe archived counterpart of <code>ExportNamespaceSpecifier::name</code>\nThe archived counterpart of <code>TsTypeParam::name</code>\nThe archived counterpart of <code>TsMappedType::name_type</code>\nThe archived counterpart of <code>JSXNamespacedName::ns</code>\nThe archived counterpart of <code>MemberExpr::obj</code>\nThe archived counterpart of <code>SuperPropExpr::obj</code>\nThe archived counterpart of <code>JSXMemberExpr::obj</code>\nThe archived counterpart of <code>WithStmt::obj</code>\nThe archived counterpart of <code>TsIndexedAccessType::obj_type</code>\nThe archived counterpart of <code>UnaryExpr::op</code>\nThe archived counterpart of <code>UpdateExpr::op</code>\nThe archived counterpart of <code>BinExpr::op</code>\nThe archived counterpart of <code>AssignExpr::op</code>\nThe archived counterpart of <code>TsTypeOperator::op</code>\nCreates a corresponding operator. This macro is used to …\nThe archived counterpart of <code>JSXElement::opening</code>\nThe archived counterpart of <code>JSXFragment::opening</code>\nThe archived counterpart of <code>OptChainExpr::optional</code>\nThe archived counterpart of <code>Ident::optional</code>\nTypeScript only. Used in case of an optional parameter.\nThe archived counterpart of <code>ArrayPat::optional</code>\nOnly in an ambient context\nThe archived counterpart of <code>ObjectPat::optional</code>\nOnly in an ambient context\nThe archived counterpart of <code>TsPropertySignature::optional</code>\nThe archived counterpart of <code>TsMethodSignature::optional</code>\nThe archived counterpart of <code>TsMappedType::optional</code>\nThe archived counterpart of <code>ExportNamedSpecifier::orig</code>\n<code>foo</code> in <code>export { foo as bar }</code>\nThe archived counterpart of <code>SetterProp::param</code>\nThe archived counterpart of <code>CatchClause::param</code>\nes2019\nThe archived counterpart of <code>TsParamProp::param</code>\nThe archived counterpart of <code>TsSetterSignature::param</code>\nThe archived counterpart of <code>TsTypePredicate::param_name</code>\nThe archived counterpart of <code>Constructor::params</code>\nThe archived counterpart of <code>ArrowExpr::params</code>\nThe archived counterpart of <code>Function::params</code>\nThe archived counterpart of <code>TsTypeParamDecl::params</code>\nThe archived counterpart of …\nThe archived counterpart of <code>TsCallSignatureDecl::params</code>\nThe archived counterpart of …\nThe archived counterpart of <code>TsMethodSignature::params</code>\nThe archived counterpart of <code>TsIndexSignature::params</code>\nThe archived counterpart of <code>TsFnType::params</code>\nThe archived counterpart of <code>TsConstructorType::params</code>\nThe archived counterpart of <code>Param::pat</code>\nThe archived counterpart of <code>Import::phase</code>\nThe archived counterpart of <code>ImportDecl::phase</code>\nThe archived counterpart of <code>UpdateExpr::prefix</code>\nThe archived counterpart of <code>MemberExpr::prop</code>\nThe archived counterpart of <code>SuperPropExpr::prop</code>\nThe archived counterpart of <code>JSXMemberExpr::prop</code>\nThe archived counterpart of <code>ObjectLit::props</code>\nThe archived counterpart of <code>ObjectPat::props</code>\nThe archived counterpart of <code>TsImportType::qualifier</code>\nThe archived counterpart of <code>Tpl::quasis</code>\nThe archived counterpart of <code>TsTplLitType::quasis</code>\nThe archived counterpart of <code>TplElement::raw</code>\nYou may need to perform. …\nThe archived counterpart of <code>JSXText::raw</code>\nThe archived counterpart of <code>BigInt::raw</code>\nUse <code>None</code> value only for transformations to avoid …\nThe archived counterpart of <code>Str::raw</code>\nUse <code>None</code> value only for transformations to avoid …\nThe archived counterpart of <code>Number::raw</code>\nUse <code>None</code> value only for transformations to avoid …\nThe archived counterpart of <code>ClassProp::readonly</code>\nThe archived counterpart of <code>PrivateProp::readonly</code>\nThe archived counterpart of <code>TsParamProp::readonly</code>\nThe archived counterpart of <code>TsPropertySignature::readonly</code>\nThe archived counterpart of <code>TsIndexSignature::readonly</code>\nThe archived counterpart of <code>TsIndexedAccessType::readonly</code>\nThe archived counterpart of <code>TsMappedType::readonly</code>\nThe archived counterpart of <code>ArrowExpr::return_type</code>\nThe archived counterpart of <code>Function::return_type</code>\nThe archived counterpart of <code>BinExpr::right</code>\nThe archived counterpart of <code>AssignExpr::right</code>\nThe archived counterpart of <code>AssignPat::right</code>\nThe archived counterpart of <code>ForInStmt::right</code>\nThe archived counterpart of <code>ForOfStmt::right</code>\nThe archived counterpart of <code>TsQualifiedName::right</code>\nThe archived counterpart of <code>JSXOpeningElement::self_closing</code>\nThe archived counterpart of <code>Module::shebang</code>\nThe archived counterpart of <code>Script::shebang</code>\nThe archived counterpart of <code>Class::span</code>\nThe archived counterpart of <code>ClassProp::span</code>\nThe archived counterpart of <code>PrivateProp::span</code>\nThe archived counterpart of <code>ClassMethod::span</code>\nThe archived counterpart of <code>PrivateMethod::span</code>\nThe archived counterpart of <code>Constructor::span</code>\nThe archived counterpart of <code>Decorator::span</code>\nThe archived counterpart of <code>StaticBlock::span</code>\nThe archived counterpart of <code>AutoAccessor::span</code>\nThe archived counterpart of <code>VarDecl::span</code>\nThe archived counterpart of <code>VarDeclarator::span</code>\nThe archived counterpart of <code>UsingDecl::span</code>\nThe archived counterpart of <code>ThisExpr::span</code>\nThe archived counterpart of <code>ArrayLit::span</code>\nThe archived counterpart of <code>ObjectLit::span</code>\nThe archived counterpart of <code>UnaryExpr::span</code>\nThe archived counterpart of <code>UpdateExpr::span</code>\nThe archived counterpart of <code>BinExpr::span</code>\nThe archived counterpart of <code>AssignExpr::span</code>\nThe archived counterpart of <code>MemberExpr::span</code>\nThe archived counterpart of <code>SuperPropExpr::span</code>\nThe archived counterpart of <code>CondExpr::span</code>\nThe archived counterpart of <code>CallExpr::span</code>\nThe archived counterpart of <code>NewExpr::span</code>\nThe archived counterpart of <code>SeqExpr::span</code>\nThe archived counterpart of <code>ArrowExpr::span</code>\nThe archived counterpart of <code>YieldExpr::span</code>\nThe archived counterpart of <code>MetaPropExpr::span</code>\nThe archived counterpart of <code>AwaitExpr::span</code>\nThe archived counterpart of <code>Tpl::span</code>\nThe archived counterpart of <code>TaggedTpl::span</code>\nThe archived counterpart of <code>TplElement::span</code>\nThe archived counterpart of <code>ParenExpr::span</code>\nThe archived counterpart of <code>Super::span</code>\nThe archived counterpart of <code>Import::span</code>\nThe archived counterpart of <code>OptChainExpr::span</code>\nThe archived counterpart of <code>OptCall::span</code>\nThe archived counterpart of <code>Function::span</code>\nThe archived counterpart of <code>Param::span</code>\nThe archived counterpart of <code>Ident::span</code>\nThe archived counterpart of <code>PrivateName::span</code>\nThe archived counterpart of <code>JSXEmptyExpr::span</code>\nThe archived counterpart of <code>JSXExprContainer::span</code>\nThe archived counterpart of <code>JSXSpreadChild::span</code>\nThe archived counterpart of <code>JSXOpeningElement::span</code>\nThe archived counterpart of <code>JSXClosingElement::span</code>\nThe archived counterpart of <code>JSXAttr::span</code>\nThe archived counterpart of <code>JSXText::span</code>\nThe archived counterpart of <code>JSXElement::span</code>\nThe archived counterpart of <code>JSXFragment::span</code>\nThe archived counterpart of <code>JSXOpeningFragment::span</code>\nThe archived counterpart of <code>JSXClosingFragment::span</code>\nThe archived counterpart of <code>BigInt::span</code>\nThe archived counterpart of <code>Str::span</code>\nThe archived counterpart of <code>Bool::span</code>\nThe archived counterpart of <code>Null::span</code>\nThe archived counterpart of <code>Regex::span</code>\nThe archived counterpart of <code>Number::span</code>\nThe archived counterpart of <code>ReservedUnused::span</code>\nThe archived counterpart of <code>Module::span</code>\nThe archived counterpart of <code>Script::span</code>\nThe archived counterpart of <code>ExportDefaultExpr::span</code>\nThe archived counterpart of <code>ExportDecl::span</code>\nThe archived counterpart of <code>ImportDecl::span</code>\nThe archived counterpart of <code>ExportAll::span</code>\nThe archived counterpart of <code>NamedExport::span</code>\nThe archived counterpart of <code>ExportDefaultDecl::span</code>\nThe archived counterpart of <code>ImportDefaultSpecifier::span</code>\nThe archived counterpart of <code>ImportStarAsSpecifier::span</code>\nThe archived counterpart of <code>ImportNamedSpecifier::span</code>\nThe archived counterpart of <code>ExportNamespaceSpecifier::span</code>\nThe archived counterpart of <code>ExportNamedSpecifier::span</code>\nThe archived counterpart of <code>ArrayPat::span</code>\nThe archived counterpart of <code>ObjectPat::span</code>\nThe archived counterpart of <code>AssignPat::span</code>\nThe archived counterpart of <code>RestPat::span</code>\nThe archived counterpart of <code>AssignPatProp::span</code>\nThe archived counterpart of <code>GetterProp::span</code>\nThe archived counterpart of <code>SetterProp::span</code>\nThe archived counterpart of <code>ComputedPropName::span</code>\nSpan including <code>[</code> and <code>]</code>.\nThe archived counterpart of <code>BlockStmt::span</code>\nSpan including the braces.\nThe archived counterpart of <code>ExprStmt::span</code>\nThe archived counterpart of <code>EmptyStmt::span</code>\nSpan of semicolon.\nThe archived counterpart of <code>DebuggerStmt::span</code>\nThe archived counterpart of <code>WithStmt::span</code>\nThe archived counterpart of <code>ReturnStmt::span</code>\nThe archived counterpart of <code>LabeledStmt::span</code>\nThe archived counterpart of <code>BreakStmt::span</code>\nThe archived counterpart of <code>ContinueStmt::span</code>\nThe archived counterpart of <code>IfStmt::span</code>\nThe archived counterpart of <code>SwitchStmt::span</code>\nThe archived counterpart of <code>ThrowStmt::span</code>\nThe archived counterpart of <code>TryStmt::span</code>\nThe archived counterpart of <code>WhileStmt::span</code>\nThe archived counterpart of <code>DoWhileStmt::span</code>\nThe archived counterpart of <code>ForStmt::span</code>\nThe archived counterpart of <code>ForInStmt::span</code>\nThe archived counterpart of <code>ForOfStmt::span</code>\nThe archived counterpart of <code>SwitchCase::span</code>\nThe archived counterpart of <code>CatchClause::span</code>\nThe archived counterpart of <code>TsTypeAnn::span</code>\nThe archived counterpart of <code>TsTypeParamDecl::span</code>\nThe archived counterpart of <code>TsTypeParam::span</code>\nThe archived counterpart of <code>TsTypeParamInstantiation::span</code>\nThe archived counterpart of <code>TsParamProp::span</code>\nThe archived counterpart of <code>TsCallSignatureDecl::span</code>\nThe archived counterpart of <code>TsConstructSignatureDecl::span</code>\nThe archived counterpart of <code>TsPropertySignature::span</code>\nThe archived counterpart of <code>TsGetterSignature::span</code>\nThe archived counterpart of <code>TsSetterSignature::span</code>\nThe archived counterpart of <code>TsMethodSignature::span</code>\nThe archived counterpart of <code>TsIndexSignature::span</code>\nThe archived counterpart of <code>TsKeywordType::span</code>\nThe archived counterpart of <code>TsThisType::span</code>\nThe archived counterpart of <code>TsFnType::span</code>\nThe archived counterpart of <code>TsConstructorType::span</code>\nThe archived counterpart of <code>TsTypeRef::span</code>\nThe archived counterpart of <code>TsTypePredicate::span</code>\nThe archived counterpart of <code>TsTypeQuery::span</code>\nThe archived counterpart of <code>TsImportType::span</code>\nThe archived counterpart of <code>TsTypeLit::span</code>\nThe archived counterpart of <code>TsArrayType::span</code>\nThe archived counterpart of <code>TsTupleType::span</code>\nThe archived counterpart of <code>TsTupleElement::span</code>\nThe archived counterpart of <code>TsOptionalType::span</code>\nThe archived counterpart of <code>TsRestType::span</code>\nThe archived counterpart of <code>TsUnionType::span</code>\nThe archived counterpart of <code>TsIntersectionType::span</code>\nThe archived counterpart of <code>TsConditionalType::span</code>\nThe archived counterpart of <code>TsInferType::span</code>\nThe archived counterpart of <code>TsParenthesizedType::span</code>\nThe archived counterpart of <code>TsTypeOperator::span</code>\nThe archived counterpart of <code>TsIndexedAccessType::span</code>\nThe archived counterpart of <code>TsMappedType::span</code>\nThe archived counterpart of <code>TsLitType::span</code>\nThe archived counterpart of <code>TsTplLitType::span</code>\nThe archived counterpart of <code>TsInterfaceDecl::span</code>\nThe archived counterpart of <code>TsInterfaceBody::span</code>\nThe archived counterpart of <code>TsExprWithTypeArgs::span</code>\nThe archived counterpart of <code>TsTypeAliasDecl::span</code>\nThe archived counterpart of <code>TsEnumDecl::span</code>\nThe archived counterpart of <code>TsEnumMember::span</code>\nThe archived counterpart of <code>TsModuleDecl::span</code>\nThe archived counterpart of <code>TsModuleBlock::span</code>\nThe archived counterpart of <code>TsNamespaceDecl::span</code>\nThe archived counterpart of <code>TsImportEqualsDecl::span</code>\nThe archived counterpart of <code>TsExternalModuleRef::span</code>\nThe archived counterpart of <code>TsExportAssignment::span</code>\nThe archived counterpart of <code>TsNamespaceExportDecl::span</code>\nThe archived counterpart of <code>TsAsExpr::span</code>\nThe archived counterpart of <code>TsTypeAssertion::span</code>\nThe archived counterpart of <code>TsNonNullExpr::span</code>\nThe archived counterpart of <code>TsSatisfiesExpr::span</code>\nThe archived counterpart of <code>TsConstAssertion::span</code>\nThe archived counterpart of <code>TsInstantiation::span</code>\nThe archived counterpart of <code>Invalid::span</code>\nThe archived counterpart of <code>ImportDecl::specifiers</code>\nThe archived counterpart of <code>NamedExport::specifiers</code>\nThe archived counterpart of <code>ExprOrSpread::spread</code>\nThe archived counterpart of <code>ImportDecl::src</code>\nThe archived counterpart of <code>ExportAll::src</code>\nThe archived counterpart of <code>NamedExport::src</code>\nThe archived counterpart of <code>BlockStmt::stmts</code>\nThe archived counterpart of <code>Class::super_class</code>\nThe archived counterpart of <code>Class::super_type_params</code>\nThe archived counterpart of <code>Ident::sym</code>\nThe archived counterpart of <code>TaggedTpl::tag</code>\nThe archived counterpart of <code>TplElement::tail</code>\nThe archived counterpart of <code>CondExpr::test</code>\nThe archived counterpart of <code>IfStmt::test</code>\nThe archived counterpart of <code>WhileStmt::test</code>\nThe archived counterpart of <code>DoWhileStmt::test</code>\nThe archived counterpart of <code>ForStmt::test</code>\nThe archived counterpart of <code>SwitchCase::test</code>\nNone for <code>default:</code>\nThe archived counterpart of <code>SetterProp::this_param</code>\nThe archived counterpart of <code>TaggedTpl::tpl</code>\nThis is boxed to reduce the type size of Expr.\nThe archived counterpart of <code>TsConditionalType::true_type</code>\nThe archived counterpart of <code>TsTupleElement::ty</code>\nThe archived counterpart of <code>ClassProp::type_ann</code>\nThe archived counterpart of <code>PrivateProp::type_ann</code>\nThe archived counterpart of <code>AutoAccessor::type_ann</code>\nThe archived counterpart of <code>BindingIdent::type_ann</code>\nThe archived counterpart of <code>ArrayPat::type_ann</code>\nThe archived counterpart of <code>ObjectPat::type_ann</code>\nThe archived counterpart of <code>RestPat::type_ann</code>\nThe archived counterpart of <code>GetterProp::type_ann</code>\nThe archived counterpart of <code>TsTypeAnn::type_ann</code>\nThe archived counterpart of <code>TsCallSignatureDecl::type_ann</code>\nThe archived counterpart of …\nThe archived counterpart of <code>TsPropertySignature::type_ann</code>\nThe archived counterpart of <code>TsGetterSignature::type_ann</code>\nThe archived counterpart of <code>TsMethodSignature::type_ann</code>\nThe archived counterpart of <code>TsIndexSignature::type_ann</code>\nThe archived counterpart of <code>TsFnType::type_ann</code>\nThe archived counterpart of <code>TsConstructorType::type_ann</code>\nThe archived counterpart of <code>TsTypePredicate::type_ann</code>\nThe archived counterpart of <code>TsOptionalType::type_ann</code>\nThe archived counterpart of <code>TsRestType::type_ann</code>\nThe archived counterpart of <code>TsParenthesizedType::type_ann</code>\nThe archived counterpart of <code>TsTypeOperator::type_ann</code>\nThe archived counterpart of <code>TsMappedType::type_ann</code>\nThe archived counterpart of <code>TsTypeAliasDecl::type_ann</code>\nThe archived counterpart of <code>TsAsExpr::type_ann</code>\nThe archived counterpart of <code>TsTypeAssertion::type_ann</code>\nThe archived counterpart of <code>TsSatisfiesExpr::type_ann</code>\nThe archived counterpart of <code>CallExpr::type_args</code>\nThe archived counterpart of <code>NewExpr::type_args</code>\nThe archived counterpart of <code>OptCall::type_args</code>\nThe archived counterpart of <code>JSXOpeningElement::type_args</code>\nNote: This field’s name is different from one from babel …\nThe archived counterpart of <code>TsTypeQuery::type_args</code>\nThe archived counterpart of <code>TsImportType::type_args</code>\nThe archived counterpart of <code>TsExprWithTypeArgs::type_args</code>\nThe archived counterpart of <code>TsInstantiation::type_args</code>\nThe archived counterpart of <code>TsTypeRef::type_name</code>\nThe archived counterpart of <code>ImportDecl::type_only</code>\nThe archived counterpart of <code>ExportAll::type_only</code>\nThe archived counterpart of <code>NamedExport::type_only</code>\nThe archived counterpart of <code>TsInferType::type_param</code>\nThe archived counterpart of <code>TsMappedType::type_param</code>\nThe archived counterpart of <code>Class::type_params</code>\nThe archived counterpart of <code>ArrowExpr::type_params</code>\nThe archived counterpart of <code>TaggedTpl::type_params</code>\nThe archived counterpart of <code>Function::type_params</code>\nThe archived counterpart of …\nThe archived counterpart of …\nThe archived counterpart of <code>TsMethodSignature::type_params</code>\nThe archived counterpart of <code>TsFnType::type_params</code>\nThe archived counterpart of <code>TsConstructorType::type_params</code>\nThe archived counterpart of <code>TsTypeRef::type_params</code>\nThe archived counterpart of <code>TsInterfaceDecl::type_params</code>\nThe archived counterpart of <code>TsTypeAliasDecl::type_params</code>\nThe archived counterpart of <code>TsUnionType::types</code>\nThe archived counterpart of <code>TsIntersectionType::types</code>\nThe archived counterpart of <code>TsTplLitType::types</code>\nThe archived counterpart of <code>ForStmt::update</code>\nThe archived counterpart of <code>ClassProp::value</code>\nThe archived counterpart of <code>PrivateProp::value</code>\nThe archived counterpart of <code>AutoAccessor::value</code>\nThe archived counterpart of <code>JSXAttr::value</code>\nBabel uses Expr instead of JSXAttrValue\nThe archived counterpart of <code>JSXText::value</code>\nThe archived counterpart of <code>BigInt::value</code>\nThe archived counterpart of <code>Str::value</code>\nThe archived counterpart of <code>Bool::value</code>\nThe archived counterpart of <code>Number::value</code>\n<strong>Note</strong>: This should not be <code>NaN</code>. Use crate::Ident to …\nThe archived counterpart of <code>KeyValuePatProp::value</code>\nThe archived counterpart of <code>AssignPatProp::value</code>\nThe archived counterpart of <code>KeyValueProp::value</code>\nThe archived counterpart of <code>AssignProp::value</code>\nThe archived counterpart of <code>ImportDecl::with</code>\nThe archived counterpart of <code>ExportAll::with</code>\nThe archived counterpart of <code>NamedExport::with</code>\nGlobal HANDLER implementation for the plugin for error …\nPlugin’s environment metadata context.\nProxy to the host’s data not attached to the AST, like …\nUsed for error reporting in transform.\nIndexable key to the metadata context for a transform …\nAn arbitary metadata for given Program to run transform in …\nProxy to the comments for the Program passed into plugin. …\nProxy to the sourceMap for the Program passed into plugin. …\nA struct to exchange allocated data between memory spaces.\nA struct implements <code>swc_common::comments::Comments</code> for the …\nAn arbitary metadata for given Program to run transform in …\nProxy to the comments for the Program passed into plugin. …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns metadata value for given key.\nReturns an experimental metadata value if exists. Returned …\nReturns experimental metadata context, but returns whole …\nReturns current plugin’s configuration as a JSON string. …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nProxy to the sourceMap for the Program passed into plugin. …\nNoop\nUtility proc macro to add …")