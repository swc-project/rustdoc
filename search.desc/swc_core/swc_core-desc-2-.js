searchState.loadedDescShard("swc_core", 2, "Returns <code>Some</code> if <code>self</code> is of variant <code>Assign</code>, and <code>None</code> …\nGet the atom of the export name.\nThe archived counterpart of <code>JSXOpeningElement::attrs</code>\nReturns <code>Some</code> if <code>self</code> is of variant <code>AutoAccessor</code>, and <code>None</code> …\nReturns <code>Some</code> if <code>self</code> is of variant <code>Await</code>, and <code>None</code> …\nThe archived counterpart of <code>OptChainExpr::base</code>\nThis is boxed to reduce the type size of Expr.\nReturns <code>Some</code> if <code>self</code> is of variant <code>BigInt</code>, and <code>None</code> …\nReturns <code>Some</code> if <code>self</code> is of variant <code>BigInt</code>, and <code>None</code> …\nReturns <code>Some</code> if <code>self</code> is of variant <code>Bin</code>, and <code>None</code> otherwise.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nGet the underlying bits value.\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nReturns <code>Some</code> if <code>self</code> is of variant <code>Block</code>, and <code>None</code> …\nThe archived counterpart of <code>TryStmt::block</code>\nReturns <code>Some</code> if <code>self</code> is of variant <code>BlockStmt</code>, and <code>None</code> …\nThe archived counterpart of <code>Class::body</code>\nThe archived counterpart of <code>Constructor::body</code>\nThe archived counterpart of <code>StaticBlock::body</code>\nThe archived counterpart of <code>ArrowExpr::body</code>\nThis is boxed to reduce the type size of Expr.\nThe archived counterpart of <code>Function::body</code>\nThe archived counterpart of <code>ReservedUnused::body</code>\nThe archived counterpart of <code>Module::body</code>\nThe archived counterpart of <code>Script::body</code>\nThe archived counterpart of <code>GetterProp::body</code>\nThe archived counterpart of <code>SetterProp::body</code>\nThe archived counterpart of <code>WithStmt::body</code>\nThe archived counterpart of <code>LabeledStmt::body</code>\nThe archived counterpart of <code>WhileStmt::body</code>\nThe archived counterpart of <code>DoWhileStmt::body</code>\nThe archived counterpart of <code>ForStmt::body</code>\nThe archived counterpart of <code>ForInStmt::body</code>\nThe archived counterpart of <code>ForOfStmt::body</code>\nThe archived counterpart of <code>CatchClause::body</code>\nThe archived counterpart of <code>TsInterfaceDecl::body</code>\nThe archived counterpart of <code>TsInterfaceBody::body</code>\nThe archived counterpart of <code>TsModuleDecl::body</code>\nThe archived counterpart of <code>TsModuleBlock::body</code>\nThe archived counterpart of <code>TsNamespaceDecl::body</code>\nReturns <code>Some</code> if <code>self</code> is of variant <code>Bool</code>, and <code>None</code> …\nReturns <code>Some</code> if <code>self</code> is of variant <code>Break</code>, and <code>None</code> …\nReturns <code>Some</code> if <code>self</code> is of variant <code>Call</code>, and <code>None</code> …\nReturns <code>Some</code> if <code>self</code> is of variant <code>Call</code>, and <code>None</code> …\nThe archived counterpart of <code>CallExpr::callee</code>\nThe archived counterpart of <code>NewExpr::callee</code>\nThe archived counterpart of <code>OptCall::callee</code>\nReturns true if the statement does not prevent the …\nThe archived counterpart of <code>SwitchStmt::cases</code>\nThe archived counterpart of <code>TsConditionalType::check_type</code>\nThe archived counterpart of <code>JSXElement::children</code>\nThe archived counterpart of <code>JSXFragment::children</code>\nReturns <code>Some</code> if <code>self</code> is of variant <code>Class</code>, and <code>None</code> …\nReturns <code>Some</code> if <code>self</code> is of variant <code>Class</code>, and <code>None</code> …\nReturns <code>Some</code> if <code>self</code> is of variant <code>Class</code>, and <code>None</code> …\nThe archived counterpart of <code>ClassDecl::class</code>\nThe archived counterpart of <code>ClassExpr::class</code>\nReturns <code>Some</code> if <code>self</code> is of variant <code>ClassProp</code>, and <code>None</code> …\nThe archived counterpart of <code>JSXElement::closing</code>\nThe archived counterpart of <code>JSXFragment::closing</code>\nGets a custom text range to use when emitting comments.\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nReturns <code>Some</code> if <code>self</code> is of variant <code>Computed</code>, and <code>None</code> …\nReturns <code>Some</code> if <code>self</code> is of variant <code>Computed</code>, and <code>None</code> …\nReturns <code>Some</code> if <code>self</code> is of variant <code>Computed</code>, and <code>None</code> …\nThe archived counterpart of <code>TsPropertySignature::computed</code>\nThe archived counterpart of <code>TsGetterSignature::computed</code>\nThe archived counterpart of <code>TsSetterSignature::computed</code>\nThe archived counterpart of <code>TsMethodSignature::computed</code>\nReturns <code>Some</code> if <code>self</code> is of variant <code>Cond</code>, and <code>None</code> …\nThe archived counterpart of <code>CondExpr::cons</code>\nThe archived counterpart of <code>IfStmt::cons</code>\nThe archived counterpart of <code>SwitchCase::cons</code>\nThe archived counterpart of <code>TsTypeParam::constraint</code>\nReturns <code>Some</code> if <code>self</code> is of variant <code>Constructor</code>, and <code>None</code> …\nWhether all set bits in a source flags value are also set …\nReturns <code>Some</code> if <code>self</code> is of variant <code>Continue</code>, and <code>None</code> …\nThe archived counterpart of <code>TplElement::cooked</code>\nThis value is never used by <code>swc_ecma_codegen</code>, and this …\nReturns <code>Some</code> if <code>self</code> is of variant <code>Debugger</code>, and <code>None</code> …\nReturns <code>Some</code> if <code>self</code> is of variant <code>Decl</code>, and <code>None</code> …\nThe archived counterpart of <code>ExportDecl::decl</code>\nThe archived counterpart of <code>ExportDefaultDecl::decl</code>\nThe archived counterpart of <code>ClassProp::declare</code>\nThe archived counterpart of <code>FnDecl::declare</code>\nThe archived counterpart of <code>ClassDecl::declare</code>\nThe archived counterpart of <code>VarDecl::declare</code>\nThe archived counterpart of <code>TsInterfaceDecl::declare</code>\nThe archived counterpart of <code>TsTypeAliasDecl::declare</code>\nThe archived counterpart of <code>TsEnumDecl::declare</code>\nThe archived counterpart of <code>TsModuleDecl::declare</code>\nThe archived counterpart of <code>TsNamespaceDecl::declare</code>\nThe archived counterpart of <code>VarDecl::decls</code>\nThe archived counterpart of <code>UsingDecl::decls</code>\nThe archived counterpart of <code>Class::decorators</code>\nThe archived counterpart of <code>ClassProp::decorators</code>\nThe archived counterpart of <code>PrivateProp::decorators</code>\nThe archived counterpart of <code>AutoAccessor::decorators</code>\nThe archived counterpart of <code>Function::decorators</code>\nThe archived counterpart of <code>Param::decorators</code>\nThe archived counterpart of <code>TsParamProp::decorators</code>\nReturns <code>Some</code> if <code>self</code> is of variant <code>Default</code>, and <code>None</code> …\nReturns <code>Some</code> if <code>self</code> is of variant <code>Default</code>, and <code>None</code> …\nThe archived counterpart of <code>TsTypeParam::default</code>\nThe archived counterpart of <code>ClassProp::definite</code>\nThe archived counterpart of <code>PrivateProp::definite</code>\nThe archived counterpart of <code>AutoAccessor::definite</code>\nThe archived counterpart of <code>VarDeclarator::definite</code>\nTypescript only\nThe archived counterpart of <code>YieldExpr::delegate</code>\nThe intersection of a source flags value with the …\nReturns true for <code>eval</code> and member expressions.\nThe archived counterpart of <code>SwitchStmt::discriminant</code>\nReturns <code>Some</code> if <code>self</code> is of variant <code>DoWhile</code>, and <code>None</code> …\nThe archived counterpart of <code>SpreadElement::dot3_token</code>\nThe archived counterpart of <code>RestPat::dot3_token</code>\nThe archived counterpart of <code>TsArrayType::elem_type</code>\nThe archived counterpart of <code>TsTupleType::elem_types</code>\nThe archived counterpart of <code>ArrayLit::elems</code>\nThe archived counterpart of <code>ArrayPat::elems</code>\nReturns <code>Some</code> if <code>self</code> is of variant <code>Empty</code>, and <code>None</code> …\nGet a flags value with all bits unset.\nReturns <code>Some</code> if <code>self</code> is of variant <code>Empty</code>, and <code>None</code> …\nThe archived counterpart of <code>Regex::exp</code>\nUnwraps the value, yielding the content of <code>Array</code>.\nUnwraps the value, yielding the content of <code>Array</code>.\nUnwraps the value, yielding the content of <code>Array</code>.\nUnwraps the value, yielding the content of <code>Array</code>.\nUnwraps the value, yielding the content of <code>Arrow</code>.\nUnwraps the value, yielding the content of <code>Assign</code>.\nUnwraps the value, yielding the content of <code>Assign</code>.\nUnwraps the value, yielding the content of <code>Assign</code>.\nUnwraps the value, yielding the content of <code>Assign</code>.\nUnwraps the value, yielding the content of <code>Assign</code>.\nUnwraps the value, yielding the content of <code>AutoAccessor</code>.\nUnwraps the value, yielding the content of <code>Await</code>.\nUnwraps the value, yielding the content of <code>BigInt</code>.\nUnwraps the value, yielding the content of <code>BigInt</code>.\nUnwraps the value, yielding the content of <code>Bin</code>.\nUnwraps the value, yielding the content of <code>Block</code>.\nUnwraps the value, yielding the content of <code>BlockStmt</code>.\nUnwraps the value, yielding the content of <code>Bool</code>.\nUnwraps the value, yielding the content of <code>Break</code>.\nUnwraps the value, yielding the content of <code>Call</code>.\nUnwraps the value, yielding the content of <code>Call</code>.\nUnwraps the value, yielding the content of <code>Class</code>.\nUnwraps the value, yielding the content of <code>Class</code>.\nUnwraps the value, yielding the content of <code>Class</code>.\nUnwraps the value, yielding the content of <code>ClassProp</code>.\nUnwraps the value, yielding the content of <code>Computed</code>.\nUnwraps the value, yielding the content of <code>Computed</code>.\nUnwraps the value, yielding the content of <code>Computed</code>.\nUnwraps the value, yielding the content of <code>Cond</code>.\nUnwraps the value, yielding the content of <code>Constructor</code>.\nUnwraps the value, yielding the content of <code>Continue</code>.\nUnwraps the value, yielding the content of <code>Debugger</code>.\nUnwraps the value, yielding the content of <code>Decl</code>.\nUnwraps the value, yielding the content of <code>Default</code>.\nUnwraps the value, yielding the content of <code>Default</code>.\nUnwraps the value, yielding the content of <code>DoWhile</code>.\nUnwraps the value, yielding the content of <code>Empty</code>.\nUnwraps the value, yielding the content of <code>Empty</code>.\nUnwraps the value, yielding the content of <code>ExportAll</code>.\nUnwraps the value, yielding the content of <code>ExportDecl</code>.\nUnwraps the value, yielding the content of …\nUnwraps the value, yielding the content of …\nUnwraps the value, yielding the content of <code>ExportNamed</code>.\nUnwraps the value, yielding the content of <code>Expr</code>.\nUnwraps the value, yielding the content of <code>Expr</code>.\nUnwraps the value, yielding the content of <code>Expr</code>.\nUnwraps the value, yielding the content of <code>Expr</code>.\nUnwraps the value, yielding the content of <code>Expr</code>.\nUnwraps the value, yielding the content of <code>Fn</code>.\nUnwraps the value, yielding the content of <code>Fn</code>.\nUnwraps the value, yielding the content of <code>Fn</code>.\nUnwraps the value, yielding the content of <code>ForIn</code>.\nUnwraps the value, yielding the content of <code>ForOf</code>.\nUnwraps the value, yielding the content of <code>For</code>.\nUnwraps the value, yielding the content of <code>Getter</code>.\nUnwraps the value, yielding the content of <code>Ident</code>.\nUnwraps the value, yielding the content of <code>Ident</code>.\nUnwraps the value, yielding the content of <code>Ident</code>.\nUnwraps the value, yielding the content of <code>Ident</code>.\nUnwraps the value, yielding the content of <code>Ident</code>.\nUnwraps the value, yielding the content of <code>Ident</code>.\nUnwraps the value, yielding the content of <code>Ident</code>.\nUnwraps the value, yielding the content of <code>Ident</code>.\nUnwraps the value, yielding the content of <code>Ident</code>.\nUnwraps the value, yielding the content of <code>Ident</code>.\nUnwraps the value, yielding the content of <code>Ident</code>.\nUnwraps the value, yielding the content of <code>Ident</code>.\nUnwraps the value, yielding the content of <code>Ident</code>.\nUnwraps the value, yielding the content of <code>If</code>.\nUnwraps the value, yielding the content of <code>Import</code>.\nUnwraps the value, yielding the content of <code>Import</code>.\nUnwraps the value, yielding the content of <code>Import</code>.\nUnwraps the value, yielding the content of <code>Invalid</code>.\nUnwraps the value, yielding the content of <code>Invalid</code>.\nUnwraps the value, yielding the content of <code>Invalid</code>.\nUnwraps the value, yielding the content of <code>Invalid</code>.\nUnwraps the value, yielding the content of <code>JSXElement</code>.\nUnwraps the value, yielding the content of <code>JSXEmpty</code>.\nUnwraps the value, yielding the content of <code>JSXFragment</code>.\nUnwraps the value, yielding the content of <code>JSXMember</code>.\nUnwraps the value, yielding the content of <code>JSXMemberExpr</code>.\nUnwraps the value, yielding the content of …\nUnwraps the value, yielding the content of <code>KeyValue</code>.\nUnwraps the value, yielding the content of <code>KeyValue</code>.\nUnwraps the value, yielding the content of <code>Labeled</code>.\nUnwraps the value, yielding the content of <code>Lit</code>.\nUnwraps the value, yielding the content of <code>Member</code>.\nUnwraps the value, yielding the content of <code>Member</code>.\nUnwraps the value, yielding the content of <code>Member</code>.\nUnwraps the value, yielding the content of <code>MetaProp</code>.\nUnwraps the value, yielding the content of <code>Method</code>.\nUnwraps the value, yielding the content of <code>Method</code>.\nUnwraps the value, yielding the content of <code>Module</code>.\nUnwraps the value, yielding the content of <code>ModuleDecl</code>.\nUnwraps the value, yielding the content of <code>Named</code>.\nUnwraps the value, yielding the content of <code>Named</code>.\nUnwraps the value, yielding the content of <code>Namespace</code>.\nUnwraps the value, yielding the content of <code>Namespace</code>.\nUnwraps the value, yielding the content of <code>New</code>.\nUnwraps the value, yielding the content of <code>Num</code>.\nUnwraps the value, yielding the content of <code>Number</code>.\nUnwraps the value, yielding the content of <code>Object</code>.\nUnwraps the value, yielding the content of <code>Object</code>.\nUnwraps the value, yielding the content of <code>Object</code>.\nUnwraps the value, yielding the content of <code>Object</code>.\nUnwraps the value, yielding the content of <code>OptChain</code>.\nUnwraps the value, yielding the content of <code>OptChain</code>.\nUnwraps the value, yielding the content of <code>Param</code>.\nUnwraps the value, yielding the content of <code>Paren</code>.\nUnwraps the value, yielding the content of <code>Paren</code>.\nUnwraps the value, yielding the content of <code>Pat</code>.\nUnwraps the value, yielding the content of <code>Pat</code>.\nUnwraps the value, yielding the content of <code>Private</code>.\nUnwraps the value, yielding the content of <code>PrivateMethod</code>.\nUnwraps the value, yielding the content of <code>PrivateName</code>.\nUnwraps the value, yielding the content of <code>PrivateName</code>.\nUnwraps the value, yielding the content of <code>PrivateProp</code>.\nUnwraps the value, yielding the content of <code>Prop</code>.\nUnwraps the value, yielding the content of <code>Public</code>.\nUnwraps the value, yielding the content of <code>Rest</code>.\nUnwraps the value, yielding the content of <code>Rest</code>.\nUnwraps the value, yielding the content of <code>Rest</code>.\nUnwraps the value, yielding the content of <code>Return</code>.\nUnwraps the value, yielding the content of <code>Script</code>.\nUnwraps the value, yielding the content of <code>Seq</code>.\nUnwraps the value, yielding the content of <code>Setter</code>.\nUnwraps the value, yielding the content of <code>Shorthand</code>.\nUnwraps the value, yielding the content of <code>Simple</code>.\nUnwraps the value, yielding the content of <code>Spread</code>.\nUnwraps the value, yielding the content of <code>StaticBlock</code>.\nUnwraps the value, yielding the content of <code>Stmt</code>.\nUnwraps the value, yielding the content of <code>Str</code>.\nUnwraps the value, yielding the content of <code>Str</code>.\nUnwraps the value, yielding the content of <code>Str</code>.\nUnwraps the value, yielding the content of <code>Str</code>.\nUnwraps the value, yielding the content of <code>Super</code>.\nUnwraps the value, yielding the content of <code>SuperProp</code>.\nUnwraps the value, yielding the content of <code>SuperProp</code>.\nUnwraps the value, yielding the content of <code>Switch</code>.\nUnwraps the value, yielding the content of <code>TaggedTpl</code>.\nUnwraps the value, yielding the content of <code>This</code>.\nUnwraps the value, yielding the content of <code>Throw</code>.\nUnwraps the value, yielding the content of <code>Tpl</code>.\nUnwraps the value, yielding the content of <code>Tpl</code>.\nUnwraps the value, yielding the content of <code>Try</code>.\nUnwraps the value, yielding the content of <code>TsArrayType</code>.\nUnwraps the value, yielding the content of <code>TsAs</code>.\nUnwraps the value, yielding the content of <code>TsAs</code>.\nUnwraps the value, yielding the content of …\nUnwraps the value, yielding the content of …\nUnwraps the value, yielding the content of <code>TsConstAssertion</code>…\nUnwraps the value, yielding the content of …\nUnwraps the value, yielding the content of …\nUnwraps the value, yielding the content of <code>TsEntityName</code>.\nUnwraps the value, yielding the content of <code>TsEntityName</code>.\nUnwraps the value, yielding the content of <code>TsEnum</code>.\nUnwraps the value, yielding the content of …\nUnwraps the value, yielding the content of …\nUnwraps the value, yielding the content of …\nUnwraps the value, yielding the content of <code>TsFnType</code>.\nUnwraps the value, yielding the content of …\nUnwraps the value, yielding the content of <code>TsImportEquals</code>.\nUnwraps the value, yielding the content of <code>TsImportType</code>.\nUnwraps the value, yielding the content of <code>TsIndexSignature</code>…\nUnwraps the value, yielding the content of <code>TsIndexSignature</code>…\nUnwraps the value, yielding the content of …\nUnwraps the value, yielding the content of <code>TsInferType</code>.\nUnwraps the value, yielding the content of <code>TsInstantiation</code>.\nUnwraps the value, yielding the content of <code>TsInstantiation</code>.\nUnwraps the value, yielding the content of <code>TsInterface</code>.\nUnwraps the value, yielding the content of <code>TsInterfaceDecl</code>.\nUnwraps the value, yielding the content of …\nUnwraps the value, yielding the content of <code>TsKeywordType</code>.\nUnwraps the value, yielding the content of <code>TsLitType</code>.\nUnwraps the value, yielding the content of <code>TsMappedType</code>.\nUnwraps the value, yielding the content of …\nUnwraps the value, yielding the content of <code>TsModule</code>.\nUnwraps the value, yielding the content of <code>TsModuleBlock</code>.\nUnwraps the value, yielding the content of <code>TsNamespaceDecl</code>.\nUnwraps the value, yielding the content of …\nUnwraps the value, yielding the content of <code>TsNonNull</code>.\nUnwraps the value, yielding the content of <code>TsNonNull</code>.\nUnwraps the value, yielding the content of <code>TsOptionalType</code>.\nUnwraps the value, yielding the content of <code>TsParamProp</code>.\nUnwraps the value, yielding the content of …\nUnwraps the value, yielding the content of …\nUnwraps the value, yielding the content of <code>TsQualifiedName</code>.\nUnwraps the value, yielding the content of <code>TsRestType</code>.\nUnwraps the value, yielding the content of <code>TsSatisfies</code>.\nUnwraps the value, yielding the content of <code>TsSatisfies</code>.\nUnwraps the value, yielding the content of …\nUnwraps the value, yielding the content of <code>TsThisType</code>.\nUnwraps the value, yielding the content of <code>TsThisType</code>.\nUnwraps the value, yielding the content of <code>TsTupleType</code>.\nUnwraps the value, yielding the content of <code>TsTypeAlias</code>.\nUnwraps the value, yielding the content of <code>TsTypeAssertion</code>.\nUnwraps the value, yielding the content of <code>TsTypeAssertion</code>.\nUnwraps the value, yielding the content of <code>TsTypeLit</code>.\nUnwraps the value, yielding the content of <code>TsTypeOperator</code>.\nUnwraps the value, yielding the content of <code>TsTypePredicate</code>.\nUnwraps the value, yielding the content of <code>TsTypeQuery</code>.\nUnwraps the value, yielding the content of <code>TsTypeRef</code>.\nUnwraps the value, yielding the content of …\nUnwraps the value, yielding the content of <code>TsUnionType</code>.\nUnwraps the value, yielding the content of <code>Unary</code>.\nUnwraps the value, yielding the content of <code>Update</code>.\nUnwraps the value, yielding the content of <code>Using</code>.\nUnwraps the value, yielding the content of <code>UsingDecl</code>.\nUnwraps the value, yielding the content of <code>Var</code>.\nUnwraps the value, yielding the content of <code>VarDecl</code>.\nUnwraps the value, yielding the content of <code>VarDecl</code>.\nUnwraps the value, yielding the content of <code>While</code>.\nUnwraps the value, yielding the content of <code>With</code>.\nUnwraps the value, yielding the content of <code>Yield</code>.\nReturns <code>Some</code> if <code>self</code> is of variant <code>ExportAll</code>, and <code>None</code> …\nReturns <code>Some</code> if <code>self</code> is of variant <code>ExportDecl</code>, and <code>None</code> …\nReturns <code>Some</code> if <code>self</code> is of variant <code>ExportDefaultDecl</code>, and …\nReturns <code>Some</code> if <code>self</code> is of variant <code>ExportDefaultExpr</code>, and …\nReturns <code>Some</code> if <code>self</code> is of variant <code>ExportNamed</code>, and <code>None</code> …\nThe archived counterpart of …\nThe archived counterpart of <code>ExportNamedSpecifier::exported</code>\n<code>Some(bar)</code> in <code>export { foo as bar }</code>\nReturns <code>Some</code> if <code>self</code> is of variant <code>Expr</code>, and <code>None</code> …\nReturns <code>Some</code> if <code>self</code> is of variant <code>Expr</code>, and <code>None</code> …\nReturns <code>Some</code> if <code>self</code> is of variant <code>Expr</code>, and <code>None</code> …\nReturns <code>Some</code> if <code>self</code> is of variant <code>Expr</code>, and <code>None</code> …\nReturns <code>Some</code> if <code>self</code> is of variant <code>Expr</code>, and <code>None</code> …\nThe archived counterpart of <code>Decorator::expr</code>\nThe archived counterpart of <code>SpreadElement::expr</code>\nThe archived counterpart of <code>ParenExpr::expr</code>\nThe archived counterpart of <code>ExprOrSpread::expr</code>\nThe archived counterpart of <code>JSXExprContainer::expr</code>\nThe archived counterpart of <code>JSXSpreadChild::expr</code>\nThe archived counterpart of <code>ExportDefaultExpr::expr</code>\nThe archived counterpart of <code>ComputedPropName::expr</code>\nThe archived counterpart of <code>ExprStmt::expr</code>\nThe archived counterpart of <code>TsExprWithTypeArgs::expr</code>\nThe archived counterpart of <code>TsExternalModuleRef::expr</code>\nThe archived counterpart of <code>TsExportAssignment::expr</code>\nThe archived counterpart of <code>TsAsExpr::expr</code>\nThe archived counterpart of <code>TsTypeAssertion::expr</code>\nThe archived counterpart of <code>TsNonNullExpr::expr</code>\nThe archived counterpart of <code>TsSatisfiesExpr::expr</code>\nThe archived counterpart of <code>TsConstAssertion::expr</code>\nThe archived counterpart of <code>TsInstantiation::expr</code>\nThe archived counterpart of <code>TsTypeQuery::expr_name</code>\nThe archived counterpart of <code>SeqExpr::exprs</code>\nThe archived counterpart of <code>Tpl::exprs</code>\nThe bitwise or (<code>|</code>) of the bits in each flags value.\nThe archived counterpart of <code>TsInterfaceDecl::extends</code>\nThe archived counterpart of <code>TsConditionalType::extends_type</code>\nThe archived counterpart of <code>TsConditionalType::false_type</code>\nThe archived counterpart of <code>TryStmt::finalizer</code>\nThe archived counterpart of <code>Regex::flags</code>\nReturns <code>Some</code> if <code>self</code> is of variant <code>Fn</code>, and <code>None</code> otherwise.\nReturns <code>Some</code> if <code>self</code> is of variant <code>Fn</code>, and <code>None</code> otherwise.\nReturns <code>Some</code> if <code>self</code> is of variant <code>Fn</code>, and <code>None</code> otherwise.\nReturns <code>Some</code> if <code>self</code> is of variant <code>ForIn</code>, and <code>None</code> …\nReturns <code>Some</code> if <code>self</code> is of variant <code>ForOf</code>, and <code>None</code> …\nReturns <code>Some</code> if <code>self</code> is of variant <code>For</code>, and <code>None</code> otherwise.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nConvert from a bits value.\nConvert from a bits value exactly.\nConvert from a bits value, unsetting any unknown bits.\nCreates an expression from <code>exprs</code>. This will return first …\nThe bitwise or (<code>|</code>) of the bits in each flags value.\nGet a flags value with the bits of a flag with the given …\nThe archived counterpart of <code>ClassMethod::function</code>\nThe archived counterpart of <code>PrivateMethod::function</code>\nThe archived counterpart of <code>FnDecl::function</code>\nThe archived counterpart of <code>FnExpr::function</code>\nThe archived counterpart of <code>MethodProp::function</code>\nReturns <code>Some</code> if <code>self</code> is of variant <code>Getter</code>, and <code>None</code> …\nThe archived counterpart of <code>TsModuleDecl::global</code>\nIn TypeScript, this is only available through<code>node.flags</code>.\nThe archived counterpart of <code>TsNamespaceDecl::global</code>\nIn TypeScript, this is only available through<code>node.flags</code>.\nThe archived counterpart of <code>TryStmt::handler</code>\nThe archived counterpart of <code>BindingIdent::id</code>\nThe archived counterpart of <code>PrivateName::id</code>\nThe archived counterpart of <code>TsInterfaceDecl::id</code>\nThe archived counterpart of <code>TsTypeAliasDecl::id</code>\nThe archived counterpart of <code>TsEnumDecl::id</code>\nThe archived counterpart of <code>TsEnumMember::id</code>\nThe archived counterpart of <code>TsModuleDecl::id</code>\nThe archived counterpart of <code>TsNamespaceDecl::id</code>\nThe archived counterpart of <code>TsImportEqualsDecl::id</code>\nThe archived counterpart of <code>TsNamespaceExportDecl::id</code>\nReturns <code>Some</code> if <code>self</code> is of variant <code>Ident</code>, and <code>None</code> …\nReturns <code>Some</code> if <code>self</code> is of variant <code>Ident</code>, and <code>None</code> …\nReturns <code>Some</code> if <code>self</code> is of variant <code>Ident</code>, and <code>None</code> …\nReturns <code>Some</code> if <code>self</code> is of variant <code>Ident</code>, and <code>None</code> …\nReturns <code>Some</code> if <code>self</code> is of variant <code>Ident</code>, and <code>None</code> …\nReturns <code>Some</code> if <code>self</code> is of variant <code>Ident</code>, and <code>None</code> …\nReturns <code>Some</code> if <code>self</code> is of variant <code>Ident</code>, and <code>None</code> …\nReturns <code>Some</code> if <code>self</code> is of variant <code>Ident</code>, and <code>None</code> …\nReturns <code>Some</code> if <code>self</code> is of variant <code>Ident</code>, and <code>None</code> …\nReturns <code>Some</code> if <code>self</code> is of variant <code>Ident</code>, and <code>None</code> …\nReturns <code>Some</code> if <code>self</code> is of variant <code>Ident</code>, and <code>None</code> …\nReturns <code>Some</code> if <code>self</code> is of variant <code>Ident</code>, and <code>None</code> …\nReturns <code>Some</code> if <code>self</code> is of variant <code>Ident</code>, and <code>None</code> …\nThe archived counterpart of <code>FnDecl::ident</code>\nThe archived counterpart of <code>ClassDecl::ident</code>\nThe archived counterpart of <code>FnExpr::ident</code>\nThe archived counterpart of <code>ClassExpr::ident</code>\nReturns <code>Some</code> if <code>self</code> is of variant <code>If</code>, and <code>None</code> otherwise.\nThe archived counterpart of <code>Class::implements</code>\nTypescript extension.\nReturns <code>Some</code> if <code>self</code> is of variant <code>Import</code>, and <code>None</code> …\nReturns <code>Some</code> if <code>self</code> is of variant <code>Import</code>, and <code>None</code> …\nReturns <code>Some</code> if <code>self</code> is of variant <code>Import</code>, and <code>None</code> …\nThe archived counterpart of <code>ImportNamedSpecifier::imported</code>\nThe archived counterpart of <code>TsIndexedAccessType::index_type</code>\nThe archived counterpart of <code>VarDeclarator::init</code>\nInitialization expression.\nThe archived counterpart of <code>ForStmt::init</code>\nThe archived counterpart of <code>TsEnumMember::init</code>\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nWhether any set bits in a source flags value are also set …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCreate a private identifier that is unique in the file, …\nReturns <code>Some</code> if <code>self</code> is of variant <code>Invalid</code>, and <code>None</code> …\nReturns <code>Some</code> if <code>self</code> is of variant <code>Invalid</code>, and <code>None</code> …\nReturns <code>Some</code> if <code>self</code> is of variant <code>Invalid</code>, and <code>None</code> …\nReturns <code>Some</code> if <code>self</code> is of variant <code>Invalid</code>, and <code>None</code> …\nThe archived counterpart of <code>Class::is_abstract</code>\nThe archived counterpart of <code>ClassProp::is_abstract</code>\nTypescript extension.\nThe archived counterpart of <code>ClassMethod::is_abstract</code>\nTypescript extension.\nThe archived counterpart of <code>PrivateMethod::is_abstract</code>\nTypescript extension.\nThe archived counterpart of <code>AutoAccessor::is_abstract</code>\nThe archived counterpart of <code>TsConstructorType::is_abstract</code>\nWhether all known bits in this flags value are set.\nReturns <code>true</code> if <code>self</code> is of variant <code>Array</code>.\nReturns <code>true</code> if <code>self</code> is of variant <code>Array</code>.\nReturns <code>true</code> if <code>self</code> is of variant <code>Array</code>.\nReturns <code>true</code> if <code>self</code> is of variant <code>Array</code>.\nReturns <code>true</code> if <code>self</code> is of variant <code>Arrow</code>.\nReturns <code>true</code> if <code>self</code> is of variant <code>Assign</code>.\nReturns <code>true</code> if <code>self</code> is of variant <code>Assign</code>.\nReturns <code>true</code> if <code>self</code> is of variant <code>Assign</code>.\nReturns <code>true</code> if <code>self</code> is of variant <code>Assign</code>.\nReturns <code>true</code> if <code>self</code> is of variant <code>Assign</code>.\nThe archived counterpart of <code>ArrowExpr::is_async</code>\nThe archived counterpart of <code>Function::is_async</code>\nif it’s an async function.\nReturns <code>true</code> if <code>self</code> is of variant <code>AutoAccessor</code>.\nThe archived counterpart of <code>UsingDecl::is_await</code>\nThe archived counterpart of <code>ForOfStmt::is_await</code>\nSpan of the await token.\nReturns <code>true</code> if <code>self</code> is of variant <code>Await</code>.\nReturns <code>true</code> if <code>self</code> is of variant <code>BigInt</code>.\nReturns <code>true</code> if <code>self</code> is of variant <code>BigInt</code>.\nReturns <code>true</code> if <code>self</code> is of variant <code>Bin</code>.\nReturns <code>true</code> if <code>self</code> is of variant <code>Block</code>.\nReturns <code>true</code> if <code>self</code> is of variant <code>BlockStmt</code>.\nReturns <code>true</code> if <code>self</code> is of variant <code>Bool</code>.\nReturns <code>true</code> if <code>self</code> is of variant <code>Break</code>.\nReturns <code>true</code> if <code>self</code> is of variant <code>Call</code>.\nReturns <code>true</code> if <code>self</code> is of variant <code>Call</code>.\nReturns <code>true</code> if <code>self</code> is of variant <code>Class</code>.\nReturns <code>true</code> if <code>self</code> is of variant <code>Class</code>.\nReturns <code>true</code> if <code>self</code> is of variant <code>Class</code>.\nReturns <code>true</code> if <code>self</code> is of variant <code>ClassProp</code>.\nReturns <code>true</code> if <code>self</code> is of variant <code>Computed</code>.\nReturns <code>true</code> if <code>self</code> is of variant <code>Computed</code>.\nReturns <code>true</code> if <code>self</code> is of variant <code>Computed</code>.\nReturns <code>true</code> if <code>self</code> is of variant <code>Cond</code>.\nThe archived counterpart of <code>TsTypeParam::is_const</code>\nThe archived counterpart of <code>TsEnumDecl::is_const</code>\nReturns <code>true</code> if <code>self</code> is of variant <code>Constructor</code>.\nReturns <code>true</code> if <code>self</code> is of variant <code>Continue</code>.\nReturns <code>true</code> if <code>self</code> is of variant <code>Debugger</code>.\nReturns <code>true</code> if <code>self</code> is of variant <code>Decl</code>.\nReturns <code>true</code> if <code>self</code> is of variant <code>Default</code>.\nReturns <code>true</code> if <code>self</code> is of variant <code>Default</code>.\nReturns <code>true</code> if <code>self</code> is of variant <code>DoWhile</code>.\nReturns <code>true</code> if <code>self</code> is of variant <code>Empty</code>.\nWhether all bits in this flags value are unset.\nReturns <code>true</code> if <code>self</code> is of variant <code>Empty</code>.\nThe archived counterpart of <code>TsImportEqualsDecl::is_export</code>\nReturns <code>true</code> if <code>self</code> is of variant <code>ExportAll</code>.\nReturns <code>true</code> if <code>self</code> is of variant <code>ExportDecl</code>.\nReturns <code>true</code> if <code>self</code> is of variant <code>ExportDefaultDecl</code>.\nReturns <code>true</code> if <code>self</code> is of variant <code>ExportDefaultExpr</code>.\nReturns <code>true</code> if <code>self</code> is of variant <code>ExportNamed</code>.\nReturns <code>true</code> if <code>self</code> is of variant <code>Expr</code>.\nReturns <code>true</code> if <code>self</code> is of variant <code>Expr</code>.\nReturns <code>true</code> if <code>self</code> is of variant <code>Expr</code>.\nReturns <code>true</code> if <code>self</code> is of variant <code>Expr</code>.\nReturns <code>true</code> if <code>self</code> is of variant <code>Expr</code>.\nReturns <code>true</code> if <code>self</code> is of variant <code>Fn</code>.\nReturns <code>true</code> if <code>self</code> is of variant <code>Fn</code>.\nReturns <code>true</code> if <code>self</code> is of variant <code>Fn</code>.\nReturns <code>true</code> if <code>self</code> is of variant <code>ForIn</code>.\nReturns <code>true</code> if <code>self</code> is of variant <code>ForOf</code>.\nReturns <code>true</code> if <code>self</code> is of variant <code>For</code>.\nThe archived counterpart of <code>ArrowExpr::is_generator</code>\nThe archived counterpart of <code>Function::is_generator</code>\nif it’s a generator.\nReturns <code>true</code> if <code>self</code> is of variant <code>Getter</code>.\nReturns <code>true</code> if <code>self</code> is of variant <code>Ident</code>.\nReturns <code>true</code> if <code>self</code> is of variant <code>Ident</code>.\nReturns <code>true</code> if <code>self</code> is of variant <code>Ident</code>.\nReturns <code>true</code> if <code>self</code> is of variant <code>Ident</code>.\nReturns <code>true</code> if <code>self</code> is of variant <code>Ident</code>.\nReturns <code>true</code> if <code>self</code> is of variant <code>Ident</code>.\nReturns <code>true</code> if <code>self</code> is of variant <code>Ident</code>.\nReturns <code>true</code> if <code>self</code> is of variant <code>Ident</code>.\nReturns <code>true</code> if <code>self</code> is of variant <code>Ident</code>.\nReturns <code>true</code> if <code>self</code> is of variant <code>Ident</code>.\nReturns <code>true</code> if <code>self</code> is of variant <code>Ident</code>.\nReturns <code>true</code> if <code>self</code> is of variant <code>Ident</code>.\nReturns <code>true</code> if <code>self</code> is of variant <code>Ident</code>.\nReturns <code>true</code> if <code>self</code> is of variant <code>If</code>.\nReturns <code>true</code> if <code>self</code> is of variant <code>Import</code>.\nReturns <code>true</code> if <code>self</code> is of variant <code>Import</code>.\nReturns <code>true</code> if <code>self</code> is of variant <code>Import</code>.\nThe archived counterpart of <code>TsTypeParam::is_in</code>\nReturns <code>true</code> if <code>self</code> is of variant <code>Invalid</code>.\nReturns <code>true</code> if <code>self</code> is of variant <code>Invalid</code>.\nReturns <code>true</code> if <code>self</code> is of variant <code>Invalid</code>.\nReturns <code>true</code> if <code>self</code> is of variant <code>Invalid</code>.\nReturns <code>true</code> if <code>self</code> is of variant <code>JSXElement</code>.\nReturns <code>true</code> if <code>self</code> is of variant <code>JSXEmpty</code>.\nReturns <code>true</code> if <code>self</code> is of variant <code>JSXFragment</code>.\nReturns <code>true</code> if <code>self</code> is of variant <code>JSXMember</code>.\nReturns <code>true</code> if <code>self</code> is of variant <code>JSXMemberExpr</code>.\nReturns <code>true</code> if <code>self</code> is of variant <code>JSXNamespacedName</code>.\nReturns <code>true</code> if <code>self</code> is of variant <code>KeyValue</code>.\nReturns <code>true</code> if <code>self</code> is of variant <code>KeyValue</code>.\nReturns <code>true</code> if <code>self</code> is of variant <code>Labeled</code>.\nReturns <code>true</code> if <code>self</code> is of variant <code>Lit</code>.\nReturns <code>true</code> if <code>self</code> is of variant <code>Member</code>.\nReturns <code>true</code> if <code>self</code> is of variant <code>Member</code>.\nReturns <code>true</code> if <code>self</code> is of variant <code>Member</code>.\nReturns <code>true</code> if <code>self</code> is of variant <code>MetaProp</code>.\nReturns <code>true</code> if <code>self</code> is of variant <code>Method</code>.\nReturns <code>true</code> if <code>self</code> is of variant <code>Method</code>.\nReturns <code>true</code> if <code>self</code> is of variant <code>Module</code>.\nReturns <code>true</code> if <code>self</code> is of variant <code>ModuleDecl</code>.\nReturns <code>true</code> if <code>self</code> is of variant <code>Named</code>.\nReturns <code>true</code> if <code>self</code> is of variant <code>Named</code>.\nReturns <code>true</code> if <code>self</code> is of variant <code>Namespace</code>.\nReturns <code>true</code> if <code>self</code> is of variant <code>Namespace</code>.\nReturns <code>true</code> if <code>self</code> is of variant <code>New</code>.\nReturns <code>true</code> if <code>self</code> is of variant <code>Num</code>.\nReturns <code>true</code> if <code>self</code> is of variant <code>Number</code>.\nReturns <code>true</code> if <code>self</code> is of variant <code>Object</code>.\nReturns <code>true</code> if <code>self</code> is of variant <code>Object</code>.\nReturns <code>true</code> if <code>self</code> is of variant <code>Object</code>.\nReturns <code>true</code> if <code>self</code> is of variant <code>Object</code>.\nReturns <code>true</code> if <code>self</code> is of variant <code>OptChain</code>.\nReturns <code>true</code> if <code>self</code> is of variant <code>OptChain</code>.\nThe archived counterpart of <code>ClassProp::is_optional</code>\nThe archived counterpart of <code>PrivateProp::is_optional</code>\nThe archived counterpart of <code>ClassMethod::is_optional</code>\nThe archived counterpart of <code>PrivateMethod::is_optional</code>\nThe archived counterpart of <code>Constructor::is_optional</code>\nThe archived counterpart of <code>TsTypeParam::is_out</code>\nThe archived counterpart of <code>ClassProp::is_override</code>\nThe archived counterpart of <code>PrivateProp::is_override</code>\nThe archived counterpart of <code>ClassMethod::is_override</code>\nThe archived counterpart of <code>PrivateMethod::is_override</code>\nThe archived counterpart of <code>AutoAccessor::is_override</code>\nThe archived counterpart of <code>TsParamProp::is_override</code>\nReturns <code>true</code> if <code>self</code> is of variant <code>Param</code>.\nReturns <code>true</code> if <code>self</code> is of variant <code>Paren</code>.\nReturns <code>true</code> if <code>self</code> is of variant <code>Paren</code>.\nReturns <code>true</code> if <code>self</code> is of variant <code>Pat</code>.\nReturns <code>true</code> if <code>self</code> is of variant <code>Pat</code>.\nReturns <code>true</code> if <code>self</code> is of variant <code>Private</code>.\nReturns <code>true</code> if <code>self</code> is of variant <code>PrivateMethod</code>.\nReturns <code>true</code> if <code>self</code> is of variant <code>PrivateName</code>.\nReturns <code>true</code> if <code>self</code> is of variant <code>PrivateName</code>.\nReturns <code>true</code> if <code>self</code> is of variant <code>PrivateProp</code>.\nReturns <code>true</code> if <code>self</code> is of variant <code>Prop</code>.\nReturns <code>true</code> if <code>self</code> is of variant <code>Public</code>.\nReturns <code>true</code> if <code>self</code> is of variant <code>Rest</code>.\nReturns <code>true</code> if <code>self</code> is of variant <code>Rest</code>.\nReturns <code>true</code> if <code>self</code> is of variant <code>Rest</code>.\nReturns <code>true</code> if <code>self</code> is of variant <code>Return</code>.\nReturns <code>true</code> if <code>self</code> is of variant <code>Script</code>.\nReturns <code>true</code> if <code>self</code> is of variant <code>Seq</code>.\nReturns <code>true</code> if <code>self</code> is of variant <code>Setter</code>.\nReturns <code>true</code> if <code>self</code> is of variant <code>Shorthand</code>.\nReturns <code>true</code> if <code>self</code> is of variant <code>Simple</code>.\nReturns <code>true</code> if <code>self</code> is of variant <code>Spread</code>.\nThe archived counterpart of <code>ClassProp::is_static</code>\nThe archived counterpart of <code>PrivateProp::is_static</code>\nThe archived counterpart of <code>ClassMethod::is_static</code>\nThe archived counterpart of <code>PrivateMethod::is_static</code>\nThe archived counterpart of <code>AutoAccessor::is_static</code>\nThe archived counterpart of <code>TsIndexSignature::is_static</code>\nReturns <code>true</code> if <code>self</code> is of variant <code>StaticBlock</code>.\nReturns <code>true</code> if <code>self</code> is of variant <code>Stmt</code>.\nReturns <code>true</code> if <code>self</code> is of variant <code>Str</code>.\nReturns <code>true</code> if <code>self</code> is of variant <code>Str</code>.\nReturns <code>true</code> if <code>self</code> is of variant <code>Str</code>.\nReturns <code>true</code> if <code>self</code> is of variant <code>Str</code>.\nReturns <code>true</code> if <code>self</code> is of variant <code>Super</code>.\nReturns <code>true</code> if <code>self</code> is of variant <code>SuperProp</code>.\nReturns <code>true</code> if <code>self</code> is of variant <code>SuperProp</code>.\nReturns <code>true</code> if <code>self</code> is of variant <code>Switch</code>.\nReturns <code>true</code> if <code>self</code> is of variant <code>TaggedTpl</code>.\nReturns <code>true</code> if <code>self</code> is of variant <code>This</code>.\nReturns <code>true</code> if <code>self</code> is of variant <code>Throw</code>.\nReturns <code>true</code> if <code>self</code> is of variant <code>Tpl</code>.\nReturns <code>true</code> if <code>self</code> is of variant <code>Tpl</code>.\nReturns <code>true</code> if <code>self</code> is of variant <code>Try</code>.\nReturns <code>true</code> if <code>self</code> is of variant <code>TsArrayType</code>.\nReturns <code>true</code> if <code>self</code> is of variant <code>TsAs</code>.\nReturns <code>true</code> if <code>self</code> is of variant <code>TsAs</code>.\nReturns <code>true</code> if <code>self</code> is of variant <code>TsCallSignatureDecl</code>.\nReturns <code>true</code> if <code>self</code> is of variant <code>TsConditionalType</code>.\nReturns <code>true</code> if <code>self</code> is of variant <code>TsConstAssertion</code>.\nReturns <code>true</code> if <code>self</code> is of variant <code>TsConstructSignatureDecl</code>…\nReturns <code>true</code> if <code>self</code> is of variant <code>TsConstructorType</code>.\nReturns <code>true</code> if <code>self</code> is of variant <code>TsEntityName</code>.\nReturns <code>true</code> if <code>self</code> is of variant <code>TsEntityName</code>.\nReturns <code>true</code> if <code>self</code> is of variant <code>TsEnum</code>.\nReturns <code>true</code> if <code>self</code> is of variant <code>TsExportAssignment</code>.\nReturns <code>true</code> if <code>self</code> is of variant <code>TsExternalModuleRef</code>.\nReturns <code>true</code> if <code>self</code> is of variant <code>TsFnOrConstructorType</code>.\nReturns <code>true</code> if <code>self</code> is of variant <code>TsFnType</code>.\nReturns <code>true</code> if <code>self</code> is of variant <code>TsGetterSignature</code>.\nReturns <code>true</code> if <code>self</code> is of variant <code>TsImportEquals</code>.\nReturns <code>true</code> if <code>self</code> is of variant <code>TsImportType</code>.\nReturns <code>true</code> if <code>self</code> is of variant <code>TsIndexSignature</code>.\nReturns <code>true</code> if <code>self</code> is of variant <code>TsIndexSignature</code>.\nReturns <code>true</code> if <code>self</code> is of variant <code>TsIndexedAccessType</code>.\nReturns <code>true</code> if <code>self</code> is of variant <code>TsInferType</code>.\nReturns <code>true</code> if <code>self</code> is of variant <code>TsInstantiation</code>.\nReturns <code>true</code> if <code>self</code> is of variant <code>TsInstantiation</code>.\nReturns <code>true</code> if <code>self</code> is of variant <code>TsInterface</code>.\nReturns <code>true</code> if <code>self</code> is of variant <code>TsInterfaceDecl</code>.\nReturns <code>true</code> if <code>self</code> is of variant <code>TsIntersectionType</code>.\nReturns <code>true</code> if <code>self</code> is of variant <code>TsKeywordType</code>.\nReturns <code>true</code> if <code>self</code> is of variant <code>TsLitType</code>.\nReturns <code>true</code> if <code>self</code> is of variant <code>TsMappedType</code>.\nReturns <code>true</code> if <code>self</code> is of variant <code>TsMethodSignature</code>.\nReturns <code>true</code> if <code>self</code> is of variant <code>TsModule</code>.\nReturns <code>true</code> if <code>self</code> is of variant <code>TsModuleBlock</code>.\nReturns <code>true</code> if <code>self</code> is of variant <code>TsNamespaceDecl</code>.\nReturns <code>true</code> if <code>self</code> is of variant <code>TsNamespaceExport</code>.\nReturns <code>true</code> if <code>self</code> is of variant <code>TsNonNull</code>.\nReturns <code>true</code> if <code>self</code> is of variant <code>TsNonNull</code>.\nReturns <code>true</code> if <code>self</code> is of variant <code>TsOptionalType</code>.\nReturns <code>true</code> if <code>self</code> is of variant <code>TsParamProp</code>.\nReturns <code>true</code> if <code>self</code> is of variant <code>TsParenthesizedType</code>.\nReturns <code>true</code> if <code>self</code> is of variant <code>TsPropertySignature</code>.\nReturns <code>true</code> if <code>self</code> is of variant <code>TsQualifiedName</code>.\nReturns <code>true</code> if <code>self</code> is of variant <code>TsRestType</code>.\nReturns <code>true</code> if <code>self</code> is of variant <code>TsSatisfies</code>.\nReturns <code>true</code> if <code>self</code> is of variant <code>TsSatisfies</code>.\nReturns <code>true</code> if <code>self</code> is of variant <code>TsSetterSignature</code>.\nReturns <code>true</code> if <code>self</code> is of variant <code>TsThisType</code>.\nReturns <code>true</code> if <code>self</code> is of variant <code>TsThisType</code>.\nReturns <code>true</code> if <code>self</code> is of variant <code>TsTupleType</code>.\nReturns <code>true</code> if <code>self</code> is of variant <code>TsTypeAlias</code>.\nReturns <code>true</code> if <code>self</code> is of variant <code>TsTypeAssertion</code>.\nReturns <code>true</code> if <code>self</code> is of variant <code>TsTypeAssertion</code>.\nReturns <code>true</code> if <code>self</code> is of variant <code>TsTypeLit</code>.\nReturns <code>true</code> if <code>self</code> is of variant <code>TsTypeOperator</code>.\nReturns <code>true</code> if <code>self</code> is of variant <code>TsTypePredicate</code>.\nReturns <code>true</code> if <code>self</code> is of variant <code>TsTypeQuery</code>.\nReturns <code>true</code> if <code>self</code> is of variant <code>TsTypeRef</code>.\nReturns <code>true</code> if <code>self</code> is of variant …\nReturns <code>true</code> if <code>self</code> is of variant <code>TsUnionType</code>.\nThe archived counterpart of …\nThe archived counterpart of …\n<code>type</code> in <code>export { type foo as bar }</code>\nThe archived counterpart of …\nReturns <code>true</code> if <code>self</code> is of variant <code>Unary</code>.\nReturns <code>true</code> if <code>self</code> is of variant <code>Update</code>.\nReturns <code>true</code> if <code>self</code> is of variant <code>Using</code>.\nReturns <code>true</code> if <code>self</code> is of variant <code>UsingDecl</code>.\nReturns true if <code>c</code> is a valid character for an identifier …\nReturns true if <code>c</code> is a valid character for an identifier …\nReturns <code>true</code> if <code>self</code> is of variant <code>Var</code>.\nReturns <code>true</code> if <code>self</code> is of variant <code>VarDecl</code>.\nReturns <code>true</code> if <code>self</code> is of variant <code>VarDecl</code>.\nReturns <code>true</code> if <code>self</code> is of variant <code>While</code>.\nReturns <code>true</code> if <code>self</code> is of variant <code>With</code>.\nReturns <code>true</code> if <code>self</code> is of variant <code>Yield</code>.\nYield a set of contained flags values.\nYield a set of contained named flags values.\nReturns <code>Some</code> if <code>self</code> is of variant <code>JSXElement</code>, and <code>None</code> …\nReturns <code>Some</code> if <code>self</code> is of variant <code>JSXEmpty</code>, and <code>None</code> …\nReturns <code>Some</code> if <code>self</code> is of variant <code>JSXFragment</code>, and <code>None</code> …\nReturns <code>Some</code> if <code>self</code> is of variant <code>JSXMember</code>, and <code>None</code> …\nReturns <code>Some</code> if <code>self</code> is of variant <code>JSXMemberExpr</code>, and <code>None</code> …\nReturns <code>Some</code> if <code>self</code> is of variant <code>JSXNamespacedName</code>, and …\nThe archived counterpart of <code>ClassProp::key</code>\nThe archived counterpart of <code>PrivateProp::key</code>\nThe archived counterpart of <code>ClassMethod::key</code>\nThe archived counterpart of <code>PrivateMethod::key</code>\nThe archived counterpart of <code>Constructor::key</code>\nThe archived counterpart of <code>AutoAccessor::key</code>\nThe archived counterpart of <code>KeyValuePatProp::key</code>\nThe archived counterpart of <code>AssignPatProp::key</code>\nNote: This type is to help implementing visitor and the …\nThe archived counterpart of <code>KeyValueProp::key</code>\nThe archived counterpart of <code>AssignProp::key</code>\nThe archived counterpart of <code>GetterProp::key</code>\nThe archived counterpart of <code>SetterProp::key</code>\nThe archived counterpart of <code>MethodProp::key</code>\nThe archived counterpart of <code>TsPropertySignature::key</code>\nThe archived counterpart of <code>TsGetterSignature::key</code>\nThe archived counterpart of <code>TsSetterSignature::key</code>\nThe archived counterpart of <code>TsMethodSignature::key</code>\nReturns <code>Some</code> if <code>self</code> is of variant <code>KeyValue</code>, and <code>None</code> …\nReturns <code>Some</code> if <code>self</code> is of variant <code>KeyValue</code>, and <code>None</code> …\nThe archived counterpart of <code>ClassMethod::kind</code>\nThe archived counterpart of <code>PrivateMethod::kind</code>\nThe archived counterpart of <code>VarDecl::kind</code>\nThe archived counterpart of <code>MetaPropExpr::kind</code>\nThe archived counterpart of <code>TsKeywordType::kind</code>\nThe archived counterpart of <code>LabeledStmt::label</code>\nThe archived counterpart of <code>BreakStmt::label</code>\nThe archived counterpart of <code>ContinueStmt::label</code>\nThe archived counterpart of <code>TsTupleElement::label</code>\n<code>Ident</code> or <code>RestPat { arg: Ident }</code>\nReturns <code>Some</code> if <code>self</code> is of variant <code>Labeled</code>, and <code>None</code> …\nThe archived counterpart of <code>BinExpr::left</code>\nThe archived counterpart of <code>AssignExpr::left</code>\nThe archived counterpart of <code>AssignPat::left</code>\nThe archived counterpart of <code>ForInStmt::left</code>\nThe archived counterpart of <code>ForOfStmt::left</code>\nThe archived counterpart of <code>TsQualifiedName::left</code>\nReturns <code>Some</code> if <code>self</code> is of variant <code>Lit</code>, and <code>None</code> otherwise.\nThe archived counterpart of <code>TsLitType::lit</code>\nThe archived counterpart of <code>ImportDefaultSpecifier::local</code>\nThe archived counterpart of <code>ImportStarAsSpecifier::local</code>\nThe archived counterpart of <code>ImportNamedSpecifier::local</code>\nReturns <code>Some</code> if <code>self</code> is of variant <code>Member</code>, and <code>None</code> …\nReturns <code>Some</code> if <code>self</code> is of variant <code>Member</code>, and <code>None</code> …\nReturns <code>Some</code> if <code>self</code> is of variant <code>Member</code>, and <code>None</code> …\nThe archived counterpart of <code>TsTypeLit::members</code>\nThe archived counterpart of <code>TsEnumDecl::members</code>\nReturns <code>Some</code> if <code>self</code> is of variant <code>MetaProp</code>, and <code>None</code> …\nReturns <code>Some</code> if <code>self</code> is of variant <code>Method</code>, and <code>None</code> …\nReturns <code>Some</code> if <code>self</code> is of variant <code>Method</code>, and <code>None</code> …\nReturns <code>Some</code> if <code>self</code> is of variant <code>Module</code>, and <code>None</code> …\nReturns <code>Some</code> if <code>self</code> is of variant <code>ModuleDecl</code>, and <code>None</code> …\nThe archived counterpart of <code>TsImportEqualsDecl::module_ref</code>\nThe archived counterpart of <code>VarDeclarator::name</code>\nThe archived counterpart of <code>JSXNamespacedName::name</code>\nThe archived counterpart of <code>JSXOpeningElement::name</code>\nThe archived counterpart of <code>JSXClosingElement::name</code>\nThe archived counterpart of <code>JSXAttr::name</code>\nThe archived counterpart of <code>ExportNamespaceSpecifier::name</code>\nThe archived counterpart of <code>TsTypeParam::name</code>\nThe archived counterpart of <code>TsMappedType::name_type</code>\nReturns <code>Some</code> if <code>self</code> is of variant <code>Named</code>, and <code>None</code> …\nReturns <code>Some</code> if <code>self</code> is of variant <code>Named</code>, and <code>None</code> …\nReturns <code>Some</code> if <code>self</code> is of variant <code>Namespace</code>, and <code>None</code> …\nReturns <code>Some</code> if <code>self</code> is of variant <code>Namespace</code>, and <code>None</code> …\nReturns <code>Some</code> if <code>self</code> is of variant <code>New</code>, and <code>None</code> otherwise.\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nThe archived counterpart of <code>JSXNamespacedName::ns</code>\nReturns <code>Some</code> if <code>self</code> is of variant <code>Num</code>, and <code>None</code> otherwise.\nReturns <code>Some</code> if <code>self</code> is of variant <code>Number</code>, and <code>None</code> …\nThe archived counterpart of <code>MemberExpr::obj</code>\nThe archived counterpart of <code>SuperPropExpr::obj</code>\nThe archived counterpart of <code>JSXMemberExpr::obj</code>\nThe archived counterpart of <code>WithStmt::obj</code>\nThe archived counterpart of <code>TsIndexedAccessType::obj_type</code>\nReturns <code>Some</code> if <code>self</code> is of variant <code>Object</code>, and <code>None</code> …\nReturns <code>Some</code> if <code>self</code> is of variant <code>Object</code>, and <code>None</code> …\nReturns <code>Some</code> if <code>self</code> is of variant <code>Object</code>, and <code>None</code> …\nReturns <code>Some</code> if <code>self</code> is of variant <code>Object</code>, and <code>None</code> …\nThe archived counterpart of <code>UnaryExpr::op</code>\nThe archived counterpart of <code>UpdateExpr::op</code>\nThe archived counterpart of <code>BinExpr::op</code>\nThe archived counterpart of <code>AssignExpr::op</code>\nThe archived counterpart of <code>TsTypeOperator::op</code>\nCreates a corresponding operator. This macro is used to …\nThe archived counterpart of <code>JSXElement::opening</code>\nThe archived counterpart of <code>JSXFragment::opening</code>\nReturns <code>Some</code> if <code>self</code> is of variant <code>OptChain</code>, and <code>None</code> …\nReturns <code>Some</code> if <code>self</code> is of variant <code>OptChain</code>, and <code>None</code> …\nThe archived counterpart of <code>OptChainExpr::optional</code>\nThe archived counterpart of <code>Ident::optional</code>\nTypeScript only. Used in case of an optional parameter.\nThe archived counterpart of <code>ArrayPat::optional</code>\nOnly in an ambient context\nThe archived counterpart of <code>ObjectPat::optional</code>\nOnly in an ambient context\nThe archived counterpart of <code>TsPropertySignature::optional</code>\nThe archived counterpart of <code>TsMethodSignature::optional</code>\nThe archived counterpart of <code>TsMappedType::optional</code>\nThe archived counterpart of <code>ExportNamedSpecifier::orig</code>\n<code>foo</code> in <code>export { foo as bar }</code>\nReturns <code>Some</code> if <code>self</code> is of variant <code>Param</code>, and <code>None</code> …\nThe archived counterpart of <code>SetterProp::param</code>\nThe archived counterpart of <code>CatchClause::param</code>\nes2019\nThe archived counterpart of <code>TsParamProp::param</code>\nThe archived counterpart of <code>TsSetterSignature::param</code>\nThe archived counterpart of <code>TsTypePredicate::param_name</code>\nThe archived counterpart of <code>Constructor::params</code>\nThe archived counterpart of <code>ArrowExpr::params</code>\nThe archived counterpart of <code>Function::params</code>\nThe archived counterpart of <code>TsTypeParamDecl::params</code>\nThe archived counterpart of …\nThe archived counterpart of <code>TsCallSignatureDecl::params</code>\nThe archived counterpart of …\nThe archived counterpart of <code>TsMethodSignature::params</code>\nThe archived counterpart of <code>TsIndexSignature::params</code>\nThe archived counterpart of <code>TsFnType::params</code>\nThe archived counterpart of <code>TsConstructorType::params</code>\nReturns <code>Some</code> if <code>self</code> is of variant <code>Paren</code>, and <code>None</code> …\nReturns <code>Some</code> if <code>self</code> is of variant <code>Paren</code>, and <code>None</code> …\nReturns <code>Some</code> if <code>self</code> is of variant <code>Pat</code>, and <code>None</code> otherwise.\nReturns <code>Some</code> if <code>self</code> is of variant <code>Pat</code>, and <code>None</code> otherwise.\nThe archived counterpart of <code>Param::pat</code>\nThe archived counterpart of <code>Import::phase</code>\nThe archived counterpart of <code>ImportDecl::phase</code>\nThe archived counterpart of <code>UpdateExpr::prefix</code>\nReturns <code>Some</code> if <code>self</code> is of variant <code>Private</code>, and <code>None</code> …\nReturns <code>Some</code> if <code>self</code> is of variant <code>PrivateMethod</code>, and <code>None</code> …\nReturns <code>Some</code> if <code>self</code> is of variant <code>PrivateName</code>, and <code>None</code> …\nReturns <code>Some</code> if <code>self</code> is of variant <code>PrivateName</code>, and <code>None</code> …\nReturns <code>Some</code> if <code>self</code> is of variant <code>PrivateProp</code>, and <code>None</code> …\nReturns <code>Some</code> if <code>self</code> is of variant <code>Prop</code>, and <code>None</code> …\nThe archived counterpart of <code>MemberExpr::prop</code>\nThe archived counterpart of <code>SuperPropExpr::prop</code>\nThe archived counterpart of <code>JSXMemberExpr::prop</code>\nThe archived counterpart of <code>ObjectLit::props</code>\nThe archived counterpart of <code>ObjectPat::props</code>\nReturns <code>Some</code> if <code>self</code> is of variant <code>Public</code>, and <code>None</code> …\nThe archived counterpart of <code>TsImportType::qualifier</code>\nThe archived counterpart of <code>Tpl::quasis</code>\nThe archived counterpart of <code>TsTplLitType::quasis</code>\nThe archived counterpart of <code>TplElement::raw</code>\nYou may need to perform. …\nThe archived counterpart of <code>JSXText::raw</code>\nThe archived counterpart of <code>BigInt::raw</code>\nUse <code>None</code> value only for transformations to avoid …\nThe archived counterpart of <code>Str::raw</code>\nUse <code>None</code> value only for transformations to avoid …\nThe archived counterpart of <code>Number::raw</code>\nUse <code>None</code> value only for transformations to avoid …\nThe archived counterpart of <code>ClassProp::readonly</code>\nThe archived counterpart of <code>PrivateProp::readonly</code>\nThe archived counterpart of <code>TsParamProp::readonly</code>\nThe archived counterpart of <code>TsPropertySignature::readonly</code>\nThe archived counterpart of <code>TsIndexSignature::readonly</code>\nThe archived counterpart of <code>TsIndexedAccessType::readonly</code>\nThe archived counterpart of <code>TsMappedType::readonly</code>\nThe intersection of a source flags value with the …\nReturns <code>Some</code> if <code>self</code> is of variant <code>Rest</code>, and <code>None</code> …\nReturns <code>Some</code> if <code>self</code> is of variant <code>Rest</code>, and <code>None</code> …\nReturns <code>Some</code> if <code>self</code> is of variant <code>Rest</code>, and <code>None</code> …\nReturns <code>Some</code> if <code>self</code> is of variant <code>Return</code>, and <code>None</code> …\nThe archived counterpart of <code>ArrowExpr::return_type</code>\nThe archived counterpart of <code>Function::return_type</code>\nThe archived counterpart of <code>BinExpr::right</code>\nThe archived counterpart of <code>AssignExpr::right</code>\nThe archived counterpart of <code>AssignPat::right</code>\nThe archived counterpart of <code>ForInStmt::right</code>\nThe archived counterpart of <code>ForOfStmt::right</code>\nThe archived counterpart of <code>TsQualifiedName::right</code>\nReturns <code>Some</code> if <code>self</code> is of variant <code>Script</code>, and <code>None</code> …\nThe archived counterpart of <code>JSXOpeningElement::self_closing</code>\nReturns <code>Some</code> if <code>self</code> is of variant <code>Seq</code>, and <code>None</code> otherwise.\nCall <code>insert</code> when <code>value</code> is <code>true</code> or <code>remove</code> when <code>value</code> is …\nNote\nReturns <code>Some</code> if <code>self</code> is of variant <code>Setter</code>, and <code>None</code> …\nThe archived counterpart of <code>Module::shebang</code>\nThe archived counterpart of <code>Script::shebang</code>\nReturns <code>Some</code> if <code>self</code> is of variant <code>Shorthand</code>, and <code>None</code> …\nReturns <code>Some</code> if <code>self</code> is of variant <code>Simple</code>, and <code>None</code> …\nThe archived counterpart of <code>Class::span</code>\nThe archived counterpart of <code>ClassProp::span</code>\nThe archived counterpart of <code>PrivateProp::span</code>\nThe archived counterpart of <code>ClassMethod::span</code>\nThe archived counterpart of <code>PrivateMethod::span</code>\nThe archived counterpart of <code>Constructor::span</code>\nThe archived counterpart of <code>Decorator::span</code>\nThe archived counterpart of <code>StaticBlock::span</code>\nThe archived counterpart of <code>AutoAccessor::span</code>\nThe archived counterpart of <code>VarDecl::span</code>\nThe archived counterpart of <code>VarDeclarator::span</code>\nThe archived counterpart of <code>UsingDecl::span</code>\nThe archived counterpart of <code>ThisExpr::span</code>\nThe archived counterpart of <code>ArrayLit::span</code>\nThe archived counterpart of <code>ObjectLit::span</code>\nThe archived counterpart of <code>UnaryExpr::span</code>\nThe archived counterpart of <code>UpdateExpr::span</code>\nThe archived counterpart of <code>BinExpr::span</code>\nThe archived counterpart of <code>AssignExpr::span</code>\nThe archived counterpart of <code>MemberExpr::span</code>\nThe archived counterpart of <code>SuperPropExpr::span</code>\nThe archived counterpart of <code>CondExpr::span</code>\nThe archived counterpart of <code>CallExpr::span</code>\nThe archived counterpart of <code>NewExpr::span</code>\nThe archived counterpart of <code>SeqExpr::span</code>\nThe archived counterpart of <code>ArrowExpr::span</code>\nThe archived counterpart of <code>YieldExpr::span</code>\nThe archived counterpart of <code>MetaPropExpr::span</code>\nThe archived counterpart of <code>AwaitExpr::span</code>\nThe archived counterpart of <code>Tpl::span</code>\nThe archived counterpart of <code>TaggedTpl::span</code>\nThe archived counterpart of <code>TplElement::span</code>\nThe archived counterpart of <code>ParenExpr::span</code>\nThe archived counterpart of <code>Super::span</code>\nThe archived counterpart of <code>Import::span</code>\nThe archived counterpart of <code>OptChainExpr::span</code>\nThe archived counterpart of <code>OptCall::span</code>\nThe archived counterpart of <code>Function::span</code>\nThe archived counterpart of <code>Param::span</code>\nThe archived counterpart of <code>Ident::span</code>\nThe archived counterpart of <code>PrivateName::span</code>\nThe archived counterpart of <code>JSXEmptyExpr::span</code>\nThe archived counterpart of <code>JSXExprContainer::span</code>\nThe archived counterpart of <code>JSXSpreadChild::span</code>\nThe archived counterpart of <code>JSXOpeningElement::span</code>\nThe archived counterpart of <code>JSXClosingElement::span</code>\nThe archived counterpart of <code>JSXAttr::span</code>\nThe archived counterpart of <code>JSXText::span</code>\nThe archived counterpart of <code>JSXElement::span</code>\nThe archived counterpart of <code>JSXFragment::span</code>\nThe archived counterpart of <code>JSXOpeningFragment::span</code>\nThe archived counterpart of <code>JSXClosingFragment::span</code>\nThe archived counterpart of <code>BigInt::span</code>\nThe archived counterpart of <code>Str::span</code>\nThe archived counterpart of <code>Bool::span</code>\nThe archived counterpart of <code>Null::span</code>\nThe archived counterpart of <code>Regex::span</code>\nThe archived counterpart of <code>Number::span</code>\nThe archived counterpart of <code>ReservedUnused::span</code>\nThe archived counterpart of <code>Module::span</code>\nThe archived counterpart of <code>Script::span</code>\nThe archived counterpart of <code>ExportDefaultExpr::span</code>\nThe archived counterpart of <code>ExportDecl::span</code>\nThe archived counterpart of <code>ImportDecl::span</code>\nThe archived counterpart of <code>ExportAll::span</code>\nThe archived counterpart of <code>NamedExport::span</code>\nThe archived counterpart of <code>ExportDefaultDecl::span</code>\nThe archived counterpart of <code>ImportDefaultSpecifier::span</code>\nThe archived counterpart of <code>ImportStarAsSpecifier::span</code>\nThe archived counterpart of <code>ImportNamedSpecifier::span</code>\nThe archived counterpart of <code>ExportNamespaceSpecifier::span</code>\nThe archived counterpart of <code>ExportNamedSpecifier::span</code>\nThe archived counterpart of <code>ArrayPat::span</code>\nThe archived counterpart of <code>ObjectPat::span</code>\nThe archived counterpart of <code>AssignPat::span</code>\nThe archived counterpart of <code>RestPat::span</code>\nThe archived counterpart of <code>AssignPatProp::span</code>\nThe archived counterpart of <code>GetterProp::span</code>\nThe archived counterpart of <code>SetterProp::span</code>\nThe archived counterpart of <code>ComputedPropName::span</code>\nSpan including <code>[</code> and <code>]</code>.\nThe archived counterpart of <code>BlockStmt::span</code>\nSpan including the braces.\nThe archived counterpart of <code>ExprStmt::span</code>\nThe archived counterpart of <code>EmptyStmt::span</code>\nSpan of semicolon.\nThe archived counterpart of <code>DebuggerStmt::span</code>\nThe archived counterpart of <code>WithStmt::span</code>\nThe archived counterpart of <code>ReturnStmt::span</code>\nThe archived counterpart of <code>LabeledStmt::span</code>\nThe archived counterpart of <code>BreakStmt::span</code>\nThe archived counterpart of <code>ContinueStmt::span</code>\nThe archived counterpart of <code>IfStmt::span</code>\nThe archived counterpart of <code>SwitchStmt::span</code>\nThe archived counterpart of <code>ThrowStmt::span</code>\nThe archived counterpart of <code>TryStmt::span</code>\nThe archived counterpart of <code>WhileStmt::span</code>\nThe archived counterpart of <code>DoWhileStmt::span</code>\nThe archived counterpart of <code>ForStmt::span</code>\nThe archived counterpart of <code>ForInStmt::span</code>\nThe archived counterpart of <code>ForOfStmt::span</code>\nThe archived counterpart of <code>SwitchCase::span</code>\nThe archived counterpart of <code>CatchClause::span</code>\nThe archived counterpart of <code>TsTypeAnn::span</code>\nThe archived counterpart of <code>TsTypeParamDecl::span</code>\nThe archived counterpart of <code>TsTypeParam::span</code>\nThe archived counterpart of <code>TsTypeParamInstantiation::span</code>\nThe archived counterpart of <code>TsParamProp::span</code>\nThe archived counterpart of <code>TsCallSignatureDecl::span</code>\nThe archived counterpart of <code>TsConstructSignatureDecl::span</code>\nThe archived counterpart of <code>TsPropertySignature::span</code>\nThe archived counterpart of <code>TsGetterSignature::span</code>\nThe archived counterpart of <code>TsSetterSignature::span</code>\nThe archived counterpart of <code>TsMethodSignature::span</code>\nThe archived counterpart of <code>TsIndexSignature::span</code>\nThe archived counterpart of <code>TsKeywordType::span</code>\nThe archived counterpart of <code>TsThisType::span</code>\nThe archived counterpart of <code>TsFnType::span</code>\nThe archived counterpart of <code>TsConstructorType::span</code>\nThe archived counterpart of <code>TsTypeRef::span</code>\nThe archived counterpart of <code>TsTypePredicate::span</code>\nThe archived counterpart of <code>TsTypeQuery::span</code>\nThe archived counterpart of <code>TsImportType::span</code>\nThe archived counterpart of <code>TsTypeLit::span</code>\nThe archived counterpart of <code>TsArrayType::span</code>\nThe archived counterpart of <code>TsTupleType::span</code>\nThe archived counterpart of <code>TsTupleElement::span</code>\nThe archived counterpart of <code>TsOptionalType::span</code>\nThe archived counterpart of <code>TsRestType::span</code>\nThe archived counterpart of <code>TsUnionType::span</code>\nThe archived counterpart of <code>TsIntersectionType::span</code>\nThe archived counterpart of <code>TsConditionalType::span</code>\nThe archived counterpart of <code>TsInferType::span</code>\nThe archived counterpart of <code>TsParenthesizedType::span</code>\nThe archived counterpart of <code>TsTypeOperator::span</code>\nThe archived counterpart of <code>TsIndexedAccessType::span</code>\nThe archived counterpart of <code>TsMappedType::span</code>\nThe archived counterpart of <code>TsLitType::span</code>\nThe archived counterpart of <code>TsTplLitType::span</code>\nThe archived counterpart of <code>TsInterfaceDecl::span</code>\nThe archived counterpart of <code>TsInterfaceBody::span</code>\nThe archived counterpart of <code>TsExprWithTypeArgs::span</code>\nThe archived counterpart of <code>TsTypeAliasDecl::span</code>\nThe archived counterpart of <code>TsEnumDecl::span</code>\nThe archived counterpart of <code>TsEnumMember::span</code>\nThe archived counterpart of <code>TsModuleDecl::span</code>\nThe archived counterpart of <code>TsModuleBlock::span</code>\nThe archived counterpart of <code>TsNamespaceDecl::span</code>\nThe archived counterpart of <code>TsImportEqualsDecl::span</code>\nThe archived counterpart of <code>TsExternalModuleRef::span</code>\nThe archived counterpart of <code>TsExportAssignment::span</code>\nThe archived counterpart of <code>TsNamespaceExportDecl::span</code>\nThe archived counterpart of <code>TsAsExpr::span</code>\nThe archived counterpart of <code>TsTypeAssertion::span</code>\nThe archived counterpart of <code>TsNonNullExpr::span</code>\nThe archived counterpart of <code>TsSatisfiesExpr::span</code>\nThe archived counterpart of <code>TsConstAssertion::span</code>\nThe archived counterpart of <code>TsInstantiation::span</code>\nThe archived counterpart of <code>Invalid::span</code>\nThe archived counterpart of <code>ImportDecl::specifiers</code>\nThe archived counterpart of <code>NamedExport::specifiers</code>\nReturns <code>Some</code> if <code>self</code> is of variant <code>Spread</code>, and <code>None</code> …\nThe archived counterpart of <code>ExprOrSpread::spread</code>\nThe archived counterpart of <code>ImportDecl::src</code>\nThe archived counterpart of <code>ExportAll::src</code>\nThe archived counterpart of <code>NamedExport::src</code>\nReturns <code>Some</code> if <code>self</code> is of variant <code>StaticBlock</code>, and <code>None</code> …\nReturns <code>Some</code> if <code>self</code> is of variant <code>Stmt</code>, and <code>None</code> …\nThe archived counterpart of <code>BlockStmt::stmts</code>\nReturns <code>Some</code> if <code>self</code> is of variant <code>Str</code>, and <code>None</code> otherwise.\nReturns <code>Some</code> if <code>self</code> is of variant <code>Str</code>, and <code>None</code> otherwise.\nReturns <code>Some</code> if <code>self</code> is of variant <code>Str</code>, and <code>None</code> otherwise.\nReturns <code>Some</code> if <code>self</code> is of variant <code>Str</code>, and <code>None</code> otherwise.\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nReturns <code>Some</code> if <code>self</code> is of variant <code>Super</code>, and <code>None</code> …\nThe archived counterpart of <code>Class::super_class</code>\nReturns <code>Some</code> if <code>self</code> is of variant <code>SuperProp</code>, and <code>None</code> …\nReturns <code>Some</code> if <code>self</code> is of variant <code>SuperProp</code>, and <code>None</code> …\nThe archived counterpart of <code>Class::super_type_params</code>\nReturns <code>Some</code> if <code>self</code> is of variant <code>Switch</code>, and <code>None</code> …\nThe archived counterpart of <code>Ident::sym</code>\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe archived counterpart of <code>TaggedTpl::tag</code>\nReturns <code>Some</code> if <code>self</code> is of variant <code>TaggedTpl</code>, and <code>None</code> …\nThe archived counterpart of <code>TplElement::tail</code>\nThe archived counterpart of <code>CondExpr::test</code>\nThe archived counterpart of <code>IfStmt::test</code>\nThe archived counterpart of <code>WhileStmt::test</code>\nThe archived counterpart of <code>DoWhileStmt::test</code>\nThe archived counterpart of <code>ForStmt::test</code>\nThe archived counterpart of <code>SwitchCase::test</code>\nNone for <code>default:</code>\nReturns <code>Some</code> if <code>self</code> is of variant <code>This</code>, and <code>None</code> …\nThe archived counterpart of <code>SetterProp::this_param</code>\nReturns <code>Some</code> if <code>self</code> is of variant <code>Throw</code>, and <code>None</code> …\nSee <code>Ident::to_id</code> for documentation.\nCreates <code>Id</code> using <code>Atom</code> and <code>SyntaxContext</code> of <code>self</code>.\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nReturns <code>Some</code> if <code>self</code> is of variant <code>Tpl</code>, and <code>None</code> otherwise.\nReturns <code>Some</code> if <code>self</code> is of variant <code>Tpl</code>, and <code>None</code> otherwise.\nThe archived counterpart of <code>TaggedTpl::tpl</code>\nThis is boxed to reduce the type size of Expr.\nThe archived counterpart of <code>TsConditionalType::true_type</code>\nReturns <code>Some</code> if <code>self</code> is of variant <code>Try</code>, and <code>None</code> otherwise.\nReturns <code>Some</code> if <code>self</code> is of variant <code>TsArrayType</code>, and <code>None</code> …\nReturns <code>Some</code> if <code>self</code> is of variant <code>TsAs</code>, and <code>None</code> …\nReturns <code>Some</code> if <code>self</code> is of variant <code>TsAs</code>, and <code>None</code> …\nReturns <code>Some</code> if <code>self</code> is of variant <code>TsCallSignatureDecl</code>, …\nReturns <code>Some</code> if <code>self</code> is of variant <code>TsConditionalType</code>, and …\nReturns <code>Some</code> if <code>self</code> is of variant <code>TsConstAssertion</code>, and …\nReturns <code>Some</code> if <code>self</code> is of variant <code>TsConstructSignatureDecl</code>…\nReturns <code>Some</code> if <code>self</code> is of variant <code>TsConstructorType</code>, and …\nReturns <code>Some</code> if <code>self</code> is of variant <code>TsEntityName</code>, and <code>None</code> …\nReturns <code>Some</code> if <code>self</code> is of variant <code>TsEntityName</code>, and <code>None</code> …\nReturns <code>Some</code> if <code>self</code> is of variant <code>TsEnum</code>, and <code>None</code> …\nReturns <code>Some</code> if <code>self</code> is of variant <code>TsExportAssignment</code>, and …\nReturns <code>Some</code> if <code>self</code> is of variant <code>TsExternalModuleRef</code>, …\nReturns <code>Some</code> if <code>self</code> is of variant <code>TsFnOrConstructorType</code>, …\nReturns <code>Some</code> if <code>self</code> is of variant <code>TsFnType</code>, and <code>None</code> …\nReturns <code>Some</code> if <code>self</code> is of variant <code>TsGetterSignature</code>, and …\nReturns <code>Some</code> if <code>self</code> is of variant <code>TsImportEquals</code>, and <code>None</code>…\nReturns <code>Some</code> if <code>self</code> is of variant <code>TsImportType</code>, and <code>None</code> …\nReturns <code>Some</code> if <code>self</code> is of variant <code>TsIndexSignature</code>, and …\nReturns <code>Some</code> if <code>self</code> is of variant <code>TsIndexSignature</code>, and …\nReturns <code>Some</code> if <code>self</code> is of variant <code>TsIndexedAccessType</code>, …\nReturns <code>Some</code> if <code>self</code> is of variant <code>TsInferType</code>, and <code>None</code> …\nReturns <code>Some</code> if <code>self</code> is of variant <code>TsInstantiation</code>, and …\nReturns <code>Some</code> if <code>self</code> is of variant <code>TsInstantiation</code>, and …\nReturns <code>Some</code> if <code>self</code> is of variant <code>TsInterface</code>, and <code>None</code> …\nReturns <code>Some</code> if <code>self</code> is of variant <code>TsInterfaceDecl</code>, and …\nReturns <code>Some</code> if <code>self</code> is of variant <code>TsIntersectionType</code>, and …\nReturns <code>Some</code> if <code>self</code> is of variant <code>TsKeywordType</code>, and <code>None</code> …\nReturns <code>Some</code> if <code>self</code> is of variant <code>TsLitType</code>, and <code>None</code> …\nReturns <code>Some</code> if <code>self</code> is of variant <code>TsMappedType</code>, and <code>None</code> …\nReturns <code>Some</code> if <code>self</code> is of variant <code>TsMethodSignature</code>, and …\nReturns <code>Some</code> if <code>self</code> is of variant <code>TsModule</code>, and <code>None</code> …\nReturns <code>Some</code> if <code>self</code> is of variant <code>TsModuleBlock</code>, and <code>None</code> …\nReturns <code>Some</code> if <code>self</code> is of variant <code>TsNamespaceDecl</code>, and …\nReturns <code>Some</code> if <code>self</code> is of variant <code>TsNamespaceExport</code>, and …\nReturns <code>Some</code> if <code>self</code> is of variant <code>TsNonNull</code>, and <code>None</code> …\nReturns <code>Some</code> if <code>self</code> is of variant <code>TsNonNull</code>, and <code>None</code> …\nReturns <code>Some</code> if <code>self</code> is of variant <code>TsOptionalType</code>, and <code>None</code>…\nReturns <code>Some</code> if <code>self</code> is of variant <code>TsParamProp</code>, and <code>None</code> …\nReturns <code>Some</code> if <code>self</code> is of variant <code>TsParenthesizedType</code>, …\nReturns <code>Some</code> if <code>self</code> is of variant <code>TsPropertySignature</code>, …\nReturns <code>Some</code> if <code>self</code> is of variant <code>TsQualifiedName</code>, and …\nReturns <code>Some</code> if <code>self</code> is of variant <code>TsRestType</code>, and <code>None</code> …\nReturns <code>Some</code> if <code>self</code> is of variant <code>TsSatisfies</code>, and <code>None</code> …\nReturns <code>Some</code> if <code>self</code> is of variant <code>TsSatisfies</code>, and <code>None</code> …\nReturns <code>Some</code> if <code>self</code> is of variant <code>TsSetterSignature</code>, and …\nReturns <code>Some</code> if <code>self</code> is of variant <code>TsThisType</code>, and <code>None</code> …\nReturns <code>Some</code> if <code>self</code> is of variant <code>TsThisType</code>, and <code>None</code> …\nReturns <code>Some</code> if <code>self</code> is of variant <code>TsTupleType</code>, and <code>None</code> …\nReturns <code>Some</code> if <code>self</code> is of variant <code>TsTypeAlias</code>, and <code>None</code> …\nReturns <code>Some</code> if <code>self</code> is of variant <code>TsTypeAssertion</code>, and …\nReturns <code>Some</code> if <code>self</code> is of variant <code>TsTypeAssertion</code>, and …\nReturns <code>Some</code> if <code>self</code> is of variant <code>TsTypeLit</code>, and <code>None</code> …\nReturns <code>Some</code> if <code>self</code> is of variant <code>TsTypeOperator</code>, and <code>None</code>…\nReturns <code>Some</code> if <code>self</code> is of variant <code>TsTypePredicate</code>, and …\nReturns <code>Some</code> if <code>self</code> is of variant <code>TsTypeQuery</code>, and <code>None</code> …\nReturns <code>Some</code> if <code>self</code> is of variant <code>TsTypeRef</code>, and <code>None</code> …\nReturns <code>Some</code> if <code>self</code> is of variant …\nReturns <code>Some</code> if <code>self</code> is of variant <code>TsUnionType</code>, and <code>None</code> …\nThe archived counterpart of <code>TsTupleElement::ty</code>\nThe archived counterpart of <code>ClassProp::type_ann</code>\nThe archived counterpart of <code>PrivateProp::type_ann</code>\nThe archived counterpart of <code>AutoAccessor::type_ann</code>\nThe archived counterpart of <code>BindingIdent::type_ann</code>\nThe archived counterpart of <code>ArrayPat::type_ann</code>\nThe archived counterpart of <code>ObjectPat::type_ann</code>\nThe archived counterpart of <code>RestPat::type_ann</code>\nThe archived counterpart of <code>GetterProp::type_ann</code>\nThe archived counterpart of <code>TsTypeAnn::type_ann</code>\nThe archived counterpart of <code>TsCallSignatureDecl::type_ann</code>\nThe archived counterpart of …\nThe archived counterpart of <code>TsPropertySignature::type_ann</code>\nThe archived counterpart of <code>TsGetterSignature::type_ann</code>\nThe archived counterpart of <code>TsMethodSignature::type_ann</code>\nThe archived counterpart of <code>TsIndexSignature::type_ann</code>\nThe archived counterpart of <code>TsFnType::type_ann</code>\nThe archived counterpart of <code>TsConstructorType::type_ann</code>\nThe archived counterpart of <code>TsTypePredicate::type_ann</code>\nThe archived counterpart of <code>TsOptionalType::type_ann</code>\nThe archived counterpart of <code>TsRestType::type_ann</code>\nThe archived counterpart of <code>TsParenthesizedType::type_ann</code>\nThe archived counterpart of <code>TsTypeOperator::type_ann</code>\nThe archived counterpart of <code>TsMappedType::type_ann</code>\nThe archived counterpart of <code>TsTypeAliasDecl::type_ann</code>\nThe archived counterpart of <code>TsAsExpr::type_ann</code>\nThe archived counterpart of <code>TsTypeAssertion::type_ann</code>\nThe archived counterpart of <code>TsSatisfiesExpr::type_ann</code>\nThe archived counterpart of <code>CallExpr::type_args</code>\nThe archived counterpart of <code>NewExpr::type_args</code>\nThe archived counterpart of <code>OptCall::type_args</code>\nThe archived counterpart of <code>JSXOpeningElement::type_args</code>\nNote: This field’s name is different from one from babel …\nThe archived counterpart of <code>TsTypeQuery::type_args</code>\nThe archived counterpart of <code>TsImportType::type_args</code>\nThe archived counterpart of <code>TsExprWithTypeArgs::type_args</code>\nThe archived counterpart of <code>TsInstantiation::type_args</code>\nThe archived counterpart of <code>TsTypeRef::type_name</code>\nThe archived counterpart of <code>ImportDecl::type_only</code>\nThe archived counterpart of <code>ExportAll::type_only</code>\nThe archived counterpart of <code>NamedExport::type_only</code>\nThe archived counterpart of <code>TsInferType::type_param</code>\nThe archived counterpart of <code>TsMappedType::type_param</code>\nThe archived counterpart of <code>Class::type_params</code>\nThe archived counterpart of <code>ArrowExpr::type_params</code>\nThe archived counterpart of <code>TaggedTpl::type_params</code>\nThe archived counterpart of <code>Function::type_params</code>\nThe archived counterpart of …\nThe archived counterpart of …\nThe archived counterpart of <code>TsMethodSignature::type_params</code>\nThe archived counterpart of <code>TsFnType::type_params</code>\nThe archived counterpart of <code>TsConstructorType::type_params</code>\nThe archived counterpart of <code>TsTypeRef::type_params</code>\nThe archived counterpart of <code>TsInterfaceDecl::type_params</code>\nThe archived counterpart of <code>TsTypeAliasDecl::type_params</code>\nThe archived counterpart of <code>TsUnionType::types</code>\nThe archived counterpart of <code>TsIntersectionType::types</code>\nThe archived counterpart of <code>TsTplLitType::types</code>\nReturns <code>Some</code> if <code>self</code> is of variant <code>Unary</code>, and <code>None</code> …\nCreates <code>void 0</code>.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nUnwraps an expression with a given function.\nNormalize parenthesized expressions.\nNormalize parenthesized expressions.\nNormalize sequences and parenthesized expressions.\nUnwraps an expression with a given function.\nReturns <code>Some</code> if <code>self</code> is of variant <code>Update</code>, and <code>None</code> …\nThe archived counterpart of <code>ForStmt::update</code>\nReturns <code>Some</code> if <code>self</code> is of variant <code>Using</code>, and <code>None</code> …\nReturns <code>Some</code> if <code>self</code> is of variant <code>UsingDecl</code>, and <code>None</code> …\nThe archived counterpart of <code>ClassProp::value</code>\nThe archived counterpart of <code>PrivateProp::value</code>\nThe archived counterpart of <code>AutoAccessor::value</code>\nThe archived counterpart of <code>JSXAttr::value</code>\nBabel uses Expr instead of JSXAttrValue\nThe archived counterpart of <code>JSXText::value</code>\nThe archived counterpart of <code>BigInt::value</code>\nThe archived counterpart of <code>Str::value</code>\nThe archived counterpart of <code>Bool::value</code>\nThe archived counterpart of <code>Number::value</code>\n<strong>Note</strong>: This should not be <code>NaN</code>. Use crate::Ident to …\nThe archived counterpart of <code>KeyValuePatProp::value</code>\nThe archived counterpart of <code>AssignPatProp::value</code>\nThe archived counterpart of <code>KeyValueProp::value</code>\nThe archived counterpart of <code>AssignProp::value</code>\nReturns <code>Some</code> if <code>self</code> is of variant <code>Var</code>, and <code>None</code> otherwise.\nReturns <code>Some</code> if <code>self</code> is of variant <code>VarDecl</code>, and <code>None</code> …\nReturns <code>Some</code> if <code>self</code> is of variant <code>VarDecl</code>, and <code>None</code> …\nAlternative for <code>toIdentifier</code> of babel.\nReturns <code>Some</code> if <code>self</code> is of variant <code>While</code>, and <code>None</code> …\nReturns <code>Some</code> if <code>self</code> is of variant <code>With</code>, and <code>None</code> …\nThe archived counterpart of <code>ImportDecl::with</code>\nThe archived counterpart of <code>ExportAll::with</code>\nThe archived counterpart of <code>NamedExport::with</code>\nCreate a new identifier with the given position.\nCreate a new identifier with the given prefix.\n#Note\nIn <code>op</code>, EqIgnoreSpan of Ident will ignore the syntax …\nPreserve syntax context while drop <code>span.lo</code> and <code>span.hi</code>.\nReturns <code>Some</code> if <code>self</code> is of variant <code>Yield</code>, and <code>None</code> …\nThis collects variables bindings while ignoring if it’s …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nVisit all children nodes. This converts <code>VisitAll</code> to <code>Visit</code>. …\nA utility trait implemented for ast nodes, and allow to …\nWrap a VisitMut as a Fold\nImplemented for passes which inject variables.\nA utility trait implemented for ast nodes, and allow to …\nA utility trait implemented for ast nodes, and allow to …\nA utility trait implemented for ast nodes, and allow to …\nThe returned folder only handles <code>fold_script</code> and …\nThis module contains enums representing fields of each …\nVisits children of the nodes with the given visitor.\nThis method can be overridden to customize the visitor …\nVisits children of the nodes with the given visitor.\nThis method can be overridden to customize the visitor …\nVisits children of the nodes with the given visitor.\nThis method can be overridden to customize the visitor …\nVisits children of the nodes with the given visitor.\nThis method can be overridden to customize the visitor …\nVisits children of the nodes with the given visitor.\nThis method can be overridden to customize the visitor …\nVisits children of the nodes with the given visitor.\nThis method can be overridden to customize the visitor …\nVisits children of the nodes with the given visitor.\nThis method can be overridden to customize the visitor …\nVisits children of the nodes with the given visitor.\nThis method can be overridden to customize the visitor …\nVisits children of the nodes with the given visitor.\nThis method can be overridden to customize the visitor …\nVisits children of the nodes with the given visitor.\nThis method can be overridden to customize the visitor …\nVisits children of the nodes with the given visitor.\nThis method can be overridden to customize the visitor …\nVisits children of the nodes with the given visitor.\nVisits children of the nodes with the given visitor.\nThis method can be overridden to customize the visitor …\nVisits children of the nodes with the given visitor.\nThis method can be overridden to customize the visitor …\nVisits children of the nodes with the given visitor.\nThis method can be overridden to customize the visitor …\nVisits children of the nodes with the given visitor.\nVisits children of the nodes with the given visitor.\nThis method can be overridden to customize the visitor …\nVisits children of the nodes with the given visitor.\nThis method can be overridden to customize the visitor …\nVisits children of the nodes with the given visitor.\nThis method can be overridden to customize the visitor …\nVisits children of the nodes with the given visitor.\nThis method can be overridden to customize the visitor …\nVisits children of the nodes with the given visitor.\nThis method can be overridden to customize the visitor …\nVisits children of the nodes with the given visitor.\nThis method can be overridden to customize the visitor …\nVisits children of the nodes with the given visitor.\nThis method can be overridden to customize the visitor …\nVisits children of the nodes with the given visitor.\nThis method can be overridden to customize the visitor …\nVisits children of the nodes with the given visitor.\nThis method can be overridden to customize the visitor …\nVisits children of the nodes with the given visitor.\nThis method can be overridden to customize the visitor …\nVisit children nodes of self with <code>v</code>\nVisits children of the nodes with the given visitor.\nThis method can be overridden to customize the visitor …\nVisits children of the nodes with the given visitor.\nThis method can be overridden to customize the visitor …\nVisits children of the nodes with the given visitor.\nThis method can be overridden to customize the visitor …\nVisits children of the nodes with the given visitor.\nThis method can be overridden to customize the visitor …\nVisits children of the nodes with the given visitor.\nVisits children of the nodes with the given visitor.\nThis method can be overridden to customize the visitor …\nVisits children of the nodes with the given visitor.\nThis method can be overridden to customize the visitor …\nVisits children of the nodes with the given visitor.\nThis method can be overridden to customize the visitor …\nVisits children of the nodes with the given visitor.\nThis method can be overridden to customize the visitor …\nVisits children of the nodes with the given visitor.\nThis method can be overridden to customize the visitor …\nVisits children of the nodes with the given visitor.\nThis method can be overridden to customize the visitor …\nVisits children of the nodes with the given visitor.\nThis method can be overridden to customize the visitor …\nVisits children of the nodes with the given visitor.\nThis method can be overridden to customize the visitor …\nVisits children of the nodes with the given visitor.\nThis method can be overridden to customize the visitor …\nVisits children of the nodes with the given visitor.\nVisits children of the nodes with the given visitor.\nThis method can be overridden to customize the visitor …\nVisits children of the nodes with the given visitor.\nThis method can be overridden to customize the visitor …\nVisits children of the nodes with the given visitor.\nThis method can be overridden to customize the visitor …\nVisits children of the nodes with the given visitor.\nThis method can be overridden to customize the visitor …\nVisits children of the nodes with the given visitor.\nThis method can be overridden to customize the visitor …\nVisits children of the nodes with the given visitor.\nThis method can be overridden to customize the visitor …\nVisits children of the nodes with the given visitor.\nThis method can be overridden to customize the visitor …\nVisits children of the nodes with the given visitor.\nThis method can be overridden to customize the visitor …\nVisits children of the nodes with the given visitor.\nThis method can be overridden to customize the visitor …\nVisits children of the nodes with the given visitor.")