searchState.loadedDescShard("swc_ecma_ast", 0, "<code>+</code>\n<code>+=</code>\nEach list item is space-and-ampersand (“ &amp;“) delimited.\n<code>&amp;&amp;=</code>\nThe list is surrounded by “&lt;” and “&gt;”.\nAn archived <code>ArrayLit</code>\nAn archived <code>ArrowExpr</code>\nAn archived <code>AssignExpr</code>\nAn archived <code>AssignTarget</code>\nAn archived <code>AssignTargetPat</code>\nAn archived <code>AwaitExpr</code>\nAn archived <code>BinExpr</code>\nAn archived <code>BlockStmtOrExpr</code>\nAn archived <code>CallExpr</code>\nAn archived <code>Callee</code>\nAn archived <code>ClassExpr</code>\nAn archived <code>CondExpr</code>\nAn archived <code>Expr</code>\nAn archived <code>ExprOrSpread</code>\nAn archived <code>FnExpr</code>\nAn archived <code>Import</code>\nAn archived <code>Invalid</code>\nAn archived <code>MemberExpr</code>\nAn archived <code>MemberProp</code>\nAn archived <code>MetaPropExpr</code>\nAn archived <code>MetaPropKind</code>\nAn archived <code>NewExpr</code>\nAn archived <code>ObjectLit</code>\nAn archived <code>OptCall</code>\nAn archived <code>OptChainBase</code>\nAn archived <code>OptChainExpr</code>\nAn archived <code>ParenExpr</code>\nAn archived <code>PropOrSpread</code>\nAn archived <code>SeqExpr</code>\nAn archived <code>SimpleAssignTarget</code>\nAn archived <code>SpreadElement</code>\nAn archived <code>Super</code>\nAn archived <code>SuperProp</code>\nAn archived <code>SuperPropExpr</code>\nAn archived <code>TaggedTpl</code>\nAn archived <code>ThisExpr</code>\nAn archived <code>Tpl</code>\nAn archived <code>TplElement</code>\nAn archived <code>UnaryExpr</code>\nAn archived <code>UpdateExpr</code>\nAn archived <code>YieldExpr</code>\nThe resolver for <code>Expr::Array</code>\nThe archived counterpart of <code>Expr::Array</code>\nThe resolver for <code>AssignTargetPat::Array</code>\nThe archived counterpart of <code>AssignTargetPat::Array</code>\nArray literal.\nThe resolver for an archived <code>ArrayLit</code>\nThe resolver for <code>Expr::Arrow</code>\nThe archived counterpart of <code>Expr::Arrow</code>\nThe resolver for an archived <code>ArrowExpr</code>\nThe resolver for <code>Expr::Assign</code>\nThe archived counterpart of <code>Expr::Assign</code>\n<code>=</code>\nThis is <strong>invalid</strong> for object literal.\nThe resolver for an archived <code>AssignExpr</code>\n<code>{key}</code> or <code>{key = value}</code>\nThe resolver for an archived <code>AssignTargetPat</code>\nThe resolver for an archived <code>AssignTarget</code>\nStage 3\nThe resolver for <code>Expr::Await</code>\nThe archived counterpart of <code>Expr::Await</code>\nThe resolver for an archived <code>AwaitExpr</code>\n<code>!</code>\nEach list item is space-and-bar (“ |“) delimited.\nThe resolver for <code>Expr::Bin</code>\nThe archived counterpart of <code>Expr::Bin</code>\nThe resolver for an archived <code>BinExpr</code>\nIdentifier used as a pattern.\n<code>&amp;</code>\n<code>&amp;=</code>\n<code>|</code>\n<code>|=</code>\n<code>^</code>\n<code>^=</code>\nUse when only block statements are allowed.\nThe resolver for <code>BlockStmtOrExpr::BlockStmt</code>\nThe archived counterpart of <code>BlockStmtOrExpr::BlockStmt</code>\nThe resolver for an archived <code>BlockStmtOrExpr</code>\nA boolean literal.\nThe list is surrounded by “{” and “}”.\nThe resolver for <code>Expr::Call</code>\nThe archived counterpart of <code>Expr::Call</code>\nThe resolver for <code>OptChainBase::Call</code>\nThe archived counterpart of <code>OptChainBase::Call</code>\nThe resolver for an archived <code>CallExpr</code>\nThe resolver for an archived <code>Callee</code>\nThe resolver for <code>Expr::Class</code>\nThe archived counterpart of <code>Expr::Class</code>\nClass expression.\nThe resolver for an archived <code>ClassExpr</code>\nstage 0 / Typescript\nEach list item is comma (“;”) delimited.\nThe resolver for <code>MemberProp::Computed</code>\nThe archived counterpart of <code>MemberProp::Computed</code>\nThe resolver for <code>SuperProp::Computed</code>\nThe archived counterpart of <code>SuperProp::Computed</code>\nThe resolver for <code>Expr::Cond</code>\nThe archived counterpart of <code>Expr::Cond</code>\ntrue ? ‘a’ : ‘b’\nThe resolver for an archived <code>CondExpr</code>\n<code>const</code>\n<code>delete</code>\n<code>/</code>\n<code>/=</code>\n<code>==</code>\n<code>===</code>\nNote: This type implements <code>Serailize</code> and <code>Deserialize</code> if …\n<code>**</code>\n<code>**=</code>\n<code>export * from &#39;mod&#39;</code>\nDefault exports other than <strong>direct</strong> function expression or …\n<code>export * as foo from &#39;src&#39;;</code>\nThe resolver for <code>Callee::Expr</code>\nThe archived counterpart of <code>Callee::Expr</code>\nThe resolver for <code>BlockStmtOrExpr::Expr</code>\nThe archived counterpart of <code>BlockStmtOrExpr::Expr</code>\nOnly for for-in / for-of loops. This is <em>syntactically</em> …\nThe resolver for an archived <code>ExprOrSpread</code>\nThe resolver for an archived <code>Expr</code>\nThe resolver for <code>Expr::Fn</code>\nThe archived counterpart of <code>Expr::Fn</code>\nFunction expression.\nThe resolver for an archived <code>FnExpr</code>\nA head for for-in and for-of loop.\nCommon parts of function and method.\n<code>&gt;</code>\n<code>&gt;=</code>\nSee Ident for documentation.\nA complete identifier with span.\nThe resolver for <code>Expr::Ident</code>\nThe archived counterpart of <code>Expr::Ident</code>\nThe resolver for <code>MemberProp::Ident</code>\nThe archived counterpart of <code>MemberProp::Ident</code>\nThe resolver for <code>SuperProp::Ident</code>\nThe archived counterpart of <code>SuperProp::Ident</code>\nThe resolver for <code>SimpleAssignTarget::Ident</code>\nThe archived counterpart of <code>SimpleAssignTarget::Ident</code>\nNote: This type is to help implementing visitor and the …\nThe resolver for <code>Callee::Import</code>\nThe archived counterpart of <code>Callee::Import</code>\ne.g. <code>import foo from &#39;mod.js&#39;</code>\nThe resolver for <code>MetaPropKind::ImportMeta</code>\nThe archived counterpart of <code>MetaPropKind::ImportMeta</code>\n<code>import.meta</code>\ne.g. local = foo, imported = None …\nThe resolver for an archived <code>Import</code>\ne.g. <code>import * as foo from &#39;mod.js&#39;</code>.\nAccording to the current spec <code>with</code> of crate::ImportDecl …\n<code>in</code>\nThe list should be indented.\n<code>instanceof</code>\nRepresents a invalid node.\nThe resolver for <code>Expr::Invalid</code>\nThe archived counterpart of <code>Expr::Invalid</code>\nThe resolver for <code>AssignTargetPat::Invalid</code>\nThe archived counterpart of <code>AssignTargetPat::Invalid</code>\nThe resolver for <code>SimpleAssignTarget::Invalid</code>\nThe archived counterpart of <code>SimpleAssignTarget::Invalid</code>\nThe resolver for an archived <code>Invalid</code>\nThe resolver for <code>Expr::JSXElement</code>\nThe archived counterpart of <code>Expr::JSXElement</code>\nThe resolver for <code>Expr::JSXEmpty</code>\nThe archived counterpart of <code>Expr::JSXEmpty</code>\nThe resolver for <code>Expr::JSXFragment</code>\nThe archived counterpart of <code>Expr::JSXFragment</code>\nThe resolver for <code>Expr::JSXMember</code>\nThe archived counterpart of <code>Expr::JSXMember</code>\nXML-based namespace syntax:\nThe resolver for <code>Expr::JSXNamespacedName</code>\nThe archived counterpart of <code>Expr::JSXNamespacedName</code>\nUsed for <code>obj</code> property of <code>JSXMemberExpr</code>.\nEither a private name or a public name.\n<code>keyof</code>\n<code>key: value</code> in <code>{ key: value, }</code>\n<code>{key: value}</code>\n<code>&lt;&lt;</code>\n<code>&lt;&lt;=</code>\n<code>let</code>\nRepresents the formatting rule for a list of nodes.\nThe resolver for <code>Expr::Lit</code>\nThe archived counterpart of <code>Expr::Lit</code>\n<code>&amp;&amp;</code>\n<code>||</code>\n<code>&lt;</code>\n<code>&lt;=</code>\nThe resolver for <code>Expr::Member</code>\nThe archived counterpart of <code>Expr::Member</code>\nA member expression. If computed is true, the node …\nThe resolver for <code>SimpleAssignTarget::Member</code>\nThe archived counterpart of <code>SimpleAssignTarget::Member</code>\nThe resolver for <code>OptChainBase::Member</code>\nThe archived counterpart of <code>OptChainBase::Member</code>\nThe resolver for an archived <code>MemberExpr</code>\nThe resolver for an archived <code>MemberProp</code>\nThe resolver for <code>Expr::MetaProp</code>\nThe archived counterpart of <code>Expr::MetaProp</code>\nThe resolver for an archived <code>MetaPropExpr</code>\nThe resolver for an archived <code>MetaPropKind</code>\n<code>es2015</code>\n<code>-</code>\n<code>--</code>\n<code>%</code>\n<code>%=</code>\n<code>*</code>\n<code>*=</code>\nPrints the list on multiple lines.\n<code>export { foo } from &#39;mod&#39;</code> <code>export { foo as bar } from &#39;mod&#39;</code>\nThe resolver for <code>Expr::New</code>\nThe archived counterpart of <code>Expr::New</code>\n<code>new Cat()</code>\nThe resolver for an archived <code>NewExpr</code>\nThe resolver for <code>MetaPropKind::NewTarget</code>\nThe archived counterpart of <code>MetaPropKind::NewTarget</code>\n<code>new.target</code>\nDo not emit comments between each node\nIf the literal is empty; do not add spaces between braces.\nDo not emit a trailing NewLine for a MultiLine list.\nDefault value.\nThere is no delimiter between list items (default).\n<code>!=</code>\n<code>!==</code>\n<code>??=</code>\n<code>??</code>\nNumeric literal.\nA numeric literal.\nThe resolver for <code>Expr::Object</code>\nThe archived counterpart of <code>Expr::Object</code>\nThe resolver for <code>AssignTargetPat::Object</code>\nThe archived counterpart of <code>AssignTargetPat::Object</code>\nObject literal.\nThe resolver for an archived <code>ObjectLit</code>\nThe resolver for an archived <code>OptCall</code>\nThe resolver for <code>Expr::OptChain</code>\nThe archived counterpart of <code>Expr::OptChain</code>\nThe resolver for <code>SimpleAssignTarget::OptChain</code>\nThe archived counterpart of <code>SimpleAssignTarget::OptChain</code>\nThe resolver for an archived <code>OptChainBase</code>\nThe resolver for an archived <code>OptChainExpr</code>\nDo not emit brackets if the list is empty.\nDo not emit brackets if the list is undefined.\n<code>||=</code>\nThe resolver for <code>Expr::Paren</code>\nThe archived counterpart of <code>Expr::Paren</code>\nThe resolver for <code>SimpleAssignTarget::Paren</code>\nThe archived counterpart of <code>SimpleAssignTarget::Paren</code>\nThe resolver for an archived <code>ParenExpr</code>\nThe list is surrounded by “(” and “)”.\nThe resolver for <code>AssignTarget::Pat</code>\nThe archived counterpart of <code>AssignTarget::Pat</code>\n<code>+</code>\n<code>++</code>\nPrefer adding a LineTerminator between synthesized nodes.\nPrints the list using line preservation if possible.\nThe resolver for <code>Expr::PrivateName</code>\nThe archived counterpart of <code>Expr::PrivateName</code>\nThe resolver for <code>MemberProp::PrivateName</code>\nThe archived counterpart of <code>MemberProp::PrivateName</code>\nThe resolver for <code>PropOrSpread::Prop</code>\nThe archived counterpart of <code>PropOrSpread::Prop</code>\nThe resolver for an archived <code>PropOrSpread</code>\n<code>&gt;&gt;</code>\n<code>&gt;&gt;=</code>\n<code>readonly</code>\nEsTree <code>RestElement</code>\nThe resolver for <code>Expr::Seq</code>\nThe archived counterpart of <code>Expr::Seq</code>\nThe resolver for an archived <code>SeqExpr</code>\n<code>a</code> in <code>{ a, }</code>\nThe resolver for <code>AssignTarget::Simple</code>\nThe archived counterpart of <code>AssignTarget::Simple</code>\nThe resolver for an archived <code>SimpleAssignTarget</code>\nPrints the list on a single line (default).\nInserts a space after the opening brace and before the …\nInserts a space between each sibling node.\nThe resolver for <code>PropOrSpread::Spread</code>\nThe archived counterpart of <code>PropOrSpread::Spread</code>\nSpread properties, e.g., <code>{a: 1, ...obj, b: 2}</code>.\nThe resolver for an archived <code>SpreadElement</code>\nThe list is surrounded by “[” and “]”.\nStage 3\nA string literal.\nString literal.\n<code>-</code>\n<code>-=</code>\nThe resolver for <code>Callee::Super</code>\nThe archived counterpart of <code>Callee::Super</code>\nThe resolver for <code>Expr::SuperProp</code>\nThe archived counterpart of <code>Expr::SuperProp</code>\nThe resolver for <code>SimpleAssignTarget::SuperProp</code>\nThe archived counterpart of <code>SimpleAssignTarget::SuperProp</code>\nThe resolver for an archived <code>SuperPropExpr</code>\nThe resolver for an archived <code>SuperProp</code>\nThe resolver for an archived <code>Super</code>\nThe resolver for <code>Expr::TaggedTpl</code>\nThe archived counterpart of <code>Expr::TaggedTpl</code>\nThe resolver for an archived <code>TaggedTpl</code>\nThe resolver for <code>Expr::This</code>\nThe archived counterpart of <code>Expr::This</code>\nThe resolver for an archived <code>ThisExpr</code>\n<code>~</code>\nThe resolver for <code>Expr::Tpl</code>\nThe archived counterpart of <code>Expr::Tpl</code>\nThe resolver for an archived <code>TplElement</code>\nThe resolver for an archived <code>Tpl</code>\nA try statement. If handler is null then finalizer must be …\nThe resolver for <code>Expr::TsAs</code>\nThe archived counterpart of <code>Expr::TsAs</code>\nThe resolver for <code>SimpleAssignTarget::TsAs</code>\nThe archived counterpart of <code>SimpleAssignTarget::TsAs</code>\nThe resolver for <code>Expr::TsConstAssertion</code>\nThe archived counterpart of <code>Expr::TsConstAssertion</code>\nInvalid: Ident with empty symbol.\nTypeScript’s own parser uses ExportAssignment for both …\nThe resolver for <code>Expr::TsInstantiation</code>\nThe archived counterpart of <code>Expr::TsInstantiation</code>\nThe resolver for <code>SimpleAssignTarget::TsInstantiation</code>\nThe archived counterpart of …\n<code>namespace A.B { }</code> is a namespace named <code>A</code> with another …\nThe resolver for <code>Expr::TsNonNull</code>\nThe archived counterpart of <code>Expr::TsNonNull</code>\nThe resolver for <code>SimpleAssignTarget::TsNonNull</code>\nThe archived counterpart of <code>SimpleAssignTarget::TsNonNull</code>\nThe resolver for <code>Expr::TsSatisfies</code>\nThe archived counterpart of <code>Expr::TsSatisfies</code>\nThe resolver for <code>SimpleAssignTarget::TsSatisfies</code>\nThe archived counterpart of <code>SimpleAssignTarget::TsSatisfies</code>\nThe resolver for <code>Expr::TsTypeAssertion</code>\nThe archived counterpart of <code>Expr::TsTypeAssertion</code>\nThe resolver for <code>SimpleAssignTarget::TsTypeAssertion</code>\nThe archived counterpart of …\n<code>typeof</code> operator\n<code>typeof</code>\nThe resolver for <code>Expr::Unary</code>\nThe archived counterpart of <code>Expr::Unary</code>\nThe resolver for an archived <code>UnaryExpr</code>\n<code>unique</code>\nThe resolver for <code>Expr::Update</code>\nThe archived counterpart of <code>Expr::Update</code>\n<code>++v</code>, <code>--v</code>, <code>v++</code>, <code>v--</code>\nThe resolver for an archived <code>UpdateExpr</code>\n<code>var</code>\n<code>void</code>\nThe resolver for <code>Expr::Yield</code>\nThe archived counterpart of <code>Expr::Yield</code>\nThe resolver for an archived <code>YieldExpr</code>\n<code>&gt;&gt;&gt;</code>\n<code>&gt;&gt;&gt;=</code>\nTypescript extension.\nTypescript extension.\nTypescript extension.\nTypescript extension.\nTypescript extension.\nAt least one of <code>accessibility</code> or <code>readonly</code> must be set.\nGet a flags value with all known bits set.\nThe archived counterpart of <code>CondExpr::alt</code>\nThe archived counterpart of <code>UnaryExpr::arg</code>\nThe archived counterpart of <code>UpdateExpr::arg</code>\nThe archived counterpart of <code>YieldExpr::arg</code>\nThe archived counterpart of <code>AwaitExpr::arg</code>\nThe archived counterpart of <code>CallExpr::args</code>\nThe archived counterpart of <code>NewExpr::args</code>\nThe archived counterpart of <code>OptCall::args</code>\nReturns <code>Some</code> if <code>self</code> is of variant <code>Array</code>, and <code>None</code> …\nReturns <code>Some</code> if <code>self</code> is of variant <code>Array</code>, and <code>None</code> …\nReturns <code>Some</code> if <code>self</code> is of variant <code>Array</code>, and <code>None</code> …\nReturns <code>Some</code> if <code>self</code> is of variant <code>Array</code>, and <code>None</code> …\nReturns <code>Some</code> if <code>self</code> is of variant <code>Arrow</code>, and <code>None</code> …\nReturns <code>Some</code> if <code>self</code> is a reference of variant <code>Array</code>, and …\nReturns <code>Some</code> if <code>self</code> is a reference of variant <code>Array</code>, and …\nReturns <code>Some</code> if <code>self</code> is a reference of variant <code>Array</code>, and …\nReturns <code>Some</code> if <code>self</code> is a reference of variant <code>Array</code>, and …\nReturns <code>Some</code> if <code>self</code> is a reference of variant <code>Arrow</code>, and …\nReturns <code>Some</code> if <code>self</code> is a reference of variant <code>Assign</code>, and …\nReturns <code>Some</code> if <code>self</code> is a reference of variant <code>Assign</code>, and …\nReturns <code>Some</code> if <code>self</code> is a reference of variant <code>Assign</code>, and …\nReturns <code>Some</code> if <code>self</code> is a reference of variant <code>Assign</code>, and …\nReturns <code>Some</code> if <code>self</code> is a reference of variant <code>Assign</code>, and …\nReturns <code>Some</code> if <code>self</code> is a reference of variant <code>AutoAccessor</code>…\nReturns <code>Some</code> if <code>self</code> is a reference of variant <code>Await</code>, and …\nReturns <code>Some</code> if <code>self</code> is a reference of variant <code>BigInt</code>, and …\nReturns <code>Some</code> if <code>self</code> is a reference of variant <code>BigInt</code>, and …\nReturns <code>Some</code> if <code>self</code> is a reference of variant <code>Bin</code>, and …\nReturns <code>Some</code> if <code>self</code> is a reference of variant <code>Block</code>, and …\nReturns <code>Some</code> if <code>self</code> is a reference of variant <code>BlockStmt</code>, …\nReturns <code>Some</code> if <code>self</code> is a reference of variant <code>Bool</code>, and …\nReturns <code>Some</code> if <code>self</code> is a reference of variant <code>Break</code>, and …\nReturns <code>Some</code> if <code>self</code> is a reference of variant <code>Call</code>, and …\nReturns <code>Some</code> if <code>self</code> is a reference of variant <code>Call</code>, and …\nReturns <code>Some</code> if <code>self</code> is a reference of variant <code>Class</code>, and …\nReturns <code>Some</code> if <code>self</code> is a reference of variant <code>Class</code>, and …\nReturns <code>Some</code> if <code>self</code> is a reference of variant <code>Class</code>, and …\nReturns <code>Some</code> if <code>self</code> is a reference of variant <code>ClassProp</code>, …\nReturns <code>Some</code> if <code>self</code> is a reference of variant <code>Computed</code>, …\nReturns <code>Some</code> if <code>self</code> is a reference of variant <code>Computed</code>, …\nReturns <code>Some</code> if <code>self</code> is a reference of variant <code>Computed</code>, …\nReturns <code>Some</code> if <code>self</code> is a reference of variant <code>Cond</code>, and …\nReturns <code>Some</code> if <code>self</code> is a reference of variant <code>Constructor</code>…\nReturns <code>Some</code> if <code>self</code> is a reference of variant <code>Continue</code>, …\nReturns <code>Some</code> if <code>self</code> is a reference of variant <code>Debugger</code>, …\nReturns <code>Some</code> if <code>self</code> is a reference of variant <code>Decl</code>, and …\nReturns <code>Some</code> if <code>self</code> is a reference of variant <code>Default</code>, …\nReturns <code>Some</code> if <code>self</code> is a reference of variant <code>Default</code>, …\nReturns <code>Some</code> if <code>self</code> is a reference of variant <code>DoWhile</code>, …\nReturns <code>Some</code> if <code>self</code> is a reference of variant <code>Empty</code>, and …\nReturns <code>Some</code> if <code>self</code> is a reference of variant <code>Empty</code>, and …\nReturns <code>Some</code> if <code>self</code> is a reference of variant <code>ExportAll</code>, …\nReturns <code>Some</code> if <code>self</code> is a reference of variant <code>ExportDecl</code>, …\nReturns <code>Some</code> if <code>self</code> is a reference of variant …\nReturns <code>Some</code> if <code>self</code> is a reference of variant …\nReturns <code>Some</code> if <code>self</code> is a reference of variant <code>ExportNamed</code>…\nReturns <code>Some</code> if <code>self</code> is a reference of variant <code>Expr</code>, and …\nReturns <code>Some</code> if <code>self</code> is a reference of variant <code>Expr</code>, and …\nReturns <code>Some</code> if <code>self</code> is a reference of variant <code>Expr</code>, and …\nReturns <code>Some</code> if <code>self</code> is a reference of variant <code>Expr</code>, and …\nReturns <code>Some</code> if <code>self</code> is a reference of variant <code>Expr</code>, and …\nReturns <code>Some</code> if <code>self</code> is a reference of variant <code>Fn</code>, and <code>None</code>…\nReturns <code>Some</code> if <code>self</code> is a reference of variant <code>Fn</code>, and <code>None</code>…\nReturns <code>Some</code> if <code>self</code> is a reference of variant <code>Fn</code>, and <code>None</code>…\nReturns <code>Some</code> if <code>self</code> is a reference of variant <code>ForIn</code>, and …\nReturns <code>Some</code> if <code>self</code> is a reference of variant <code>ForOf</code>, and …\nReturns <code>Some</code> if <code>self</code> is a reference of variant <code>For</code>, and …\nReturns <code>Some</code> if <code>self</code> is a reference of variant <code>Getter</code>, and …\nReturns <code>Some</code> if <code>self</code> is a reference of variant <code>Ident</code>, and …\nReturns <code>Some</code> if <code>self</code> is a reference of variant <code>Ident</code>, and …\nReturns <code>Some</code> if <code>self</code> is a reference of variant <code>Ident</code>, and …\nReturns <code>Some</code> if <code>self</code> is a reference of variant <code>Ident</code>, and …\nReturns <code>Some</code> if <code>self</code> is a reference of variant <code>Ident</code>, and …\nReturns <code>Some</code> if <code>self</code> is a reference of variant <code>Ident</code>, and …\nReturns <code>Some</code> if <code>self</code> is a reference of variant <code>Ident</code>, and …\nReturns <code>Some</code> if <code>self</code> is a reference of variant <code>Ident</code>, and …\nReturns <code>Some</code> if <code>self</code> is a reference of variant <code>Ident</code>, and …\nReturns <code>Some</code> if <code>self</code> is a reference of variant <code>Ident</code>, and …\nReturns <code>Some</code> if <code>self</code> is a reference of variant <code>Ident</code>, and …\nReturns <code>Some</code> if <code>self</code> is a reference of variant <code>Ident</code>, and …\nReturns <code>Some</code> if <code>self</code> is a reference of variant <code>Ident</code>, and …\nReturns <code>Some</code> if <code>self</code> is a reference of variant <code>If</code>, and <code>None</code>…\nReturns <code>Some</code> if <code>self</code> is a reference of variant <code>Import</code>, and …\nReturns <code>Some</code> if <code>self</code> is a reference of variant <code>Import</code>, and …\nReturns <code>Some</code> if <code>self</code> is a reference of variant <code>Import</code>, and …\nSee ImportWith for details.\nReturns <code>Some</code> if <code>self</code> is a reference of variant <code>Invalid</code>, …\nReturns <code>Some</code> if <code>self</code> is a reference of variant <code>Invalid</code>, …\nReturns <code>Some</code> if <code>self</code> is a reference of variant <code>Invalid</code>, …\nReturns <code>Some</code> if <code>self</code> is a reference of variant <code>Invalid</code>, …\nReturns <code>Some</code> if <code>self</code> is a reference of variant <code>JSXElement</code>, …\nReturns <code>Some</code> if <code>self</code> is a reference of variant <code>JSXEmpty</code>, …\nReturns <code>Some</code> if <code>self</code> is a reference of variant <code>JSXFragment</code>…\nReturns <code>Some</code> if <code>self</code> is a reference of variant <code>JSXMember</code>, …\nReturns <code>Some</code> if <code>self</code> is a reference of variant …\nReturns <code>Some</code> if <code>self</code> is a reference of variant …\nReturns <code>Some</code> if <code>self</code> is a reference of variant <code>KeyValue</code>, …\nReturns <code>Some</code> if <code>self</code> is a reference of variant <code>KeyValue</code>, …\nReturns <code>Some</code> if <code>self</code> is a reference of variant <code>Labeled</code>, …\nReturns <code>Some</code> if <code>self</code> is a reference of variant <code>Lit</code>, and …\nReturns <code>Some</code> if <code>self</code> is a reference of variant <code>Member</code>, and …\nReturns <code>Some</code> if <code>self</code> is a reference of variant <code>Member</code>, and …\nReturns <code>Some</code> if <code>self</code> is a reference of variant <code>Member</code>, and …\nReturns <code>Some</code> if <code>self</code> is a reference of variant <code>MetaProp</code>, …\nReturns <code>Some</code> if <code>self</code> is a reference of variant <code>Method</code>, and …\nReturns <code>Some</code> if <code>self</code> is a reference of variant <code>Method</code>, and …\nReturns <code>Some</code> if <code>self</code> is a reference of variant <code>Module</code>, and …\nReturns <code>Some</code> if <code>self</code> is a reference of variant <code>ModuleDecl</code>, …\nReturns <code>Some</code> if <code>self</code> is a mutable reference of variant …\nReturns <code>Some</code> if <code>self</code> is a mutable reference of variant …\nReturns <code>Some</code> if <code>self</code> is a mutable reference of variant …\nReturns <code>Some</code> if <code>self</code> is a mutable reference of variant …\nReturns <code>Some</code> if <code>self</code> is a mutable reference of variant …\nReturns <code>Some</code> if <code>self</code> is a mutable reference of variant …\nReturns <code>Some</code> if <code>self</code> is a mutable reference of variant …\nReturns <code>Some</code> if <code>self</code> is a mutable reference of variant …\nReturns <code>Some</code> if <code>self</code> is a mutable reference of variant …\nReturns <code>Some</code> if <code>self</code> is a mutable reference of variant …\nReturns <code>Some</code> if <code>self</code> is a mutable reference of variant …\nReturns <code>Some</code> if <code>self</code> is a mutable reference of variant …\nReturns <code>Some</code> if <code>self</code> is a mutable reference of variant …\nReturns <code>Some</code> if <code>self</code> is a mutable reference of variant …\nReturns <code>Some</code> if <code>self</code> is a mutable reference of variant <code>Bin</code>…\nReturns <code>Some</code> if <code>self</code> is a mutable reference of variant …\nReturns <code>Some</code> if <code>self</code> is a mutable reference of variant …\nReturns <code>Some</code> if <code>self</code> is a mutable reference of variant <code>Bool</code>…\nReturns <code>Some</code> if <code>self</code> is a mutable reference of variant …\nReturns <code>Some</code> if <code>self</code> is a mutable reference of variant <code>Call</code>…\nReturns <code>Some</code> if <code>self</code> is a mutable reference of variant <code>Call</code>…\nReturns <code>Some</code> if <code>self</code> is a mutable reference of variant …\nReturns <code>Some</code> if <code>self</code> is a mutable reference of variant …\nReturns <code>Some</code> if <code>self</code> is a mutable reference of variant …\nReturns <code>Some</code> if <code>self</code> is a mutable reference of variant …\nReturns <code>Some</code> if <code>self</code> is a mutable reference of variant …\nReturns <code>Some</code> if <code>self</code> is a mutable reference of variant …\nReturns <code>Some</code> if <code>self</code> is a mutable reference of variant …\nReturns <code>Some</code> if <code>self</code> is a mutable reference of variant <code>Cond</code>…\nReturns <code>Some</code> if <code>self</code> is a mutable reference of variant …\nReturns <code>Some</code> if <code>self</code> is a mutable reference of variant …\nReturns <code>Some</code> if <code>self</code> is a mutable reference of variant …\nReturns <code>Some</code> if <code>self</code> is a mutable reference of variant <code>Decl</code>…\nReturns <code>Some</code> if <code>self</code> is a mutable reference of variant …\nReturns <code>Some</code> if <code>self</code> is a mutable reference of variant …\nReturns <code>Some</code> if <code>self</code> is a mutable reference of variant …\nReturns <code>Some</code> if <code>self</code> is a mutable reference of variant …\nReturns <code>Some</code> if <code>self</code> is a mutable reference of variant …\nReturns <code>Some</code> if <code>self</code> is a mutable reference of variant …\nReturns <code>Some</code> if <code>self</code> is a mutable reference of variant …\nReturns <code>Some</code> if <code>self</code> is a mutable reference of variant …\nReturns <code>Some</code> if <code>self</code> is a mutable reference of variant …\nReturns <code>Some</code> if <code>self</code> is a mutable reference of variant …\nReturns <code>Some</code> if <code>self</code> is a mutable reference of variant <code>Expr</code>…\nReturns <code>Some</code> if <code>self</code> is a mutable reference of variant <code>Expr</code>…\nReturns <code>Some</code> if <code>self</code> is a mutable reference of variant <code>Expr</code>…\nReturns <code>Some</code> if <code>self</code> is a mutable reference of variant <code>Expr</code>…\nReturns <code>Some</code> if <code>self</code> is a mutable reference of variant <code>Expr</code>…\nReturns <code>Some</code> if <code>self</code> is a mutable reference of variant <code>Fn</code>, …\nReturns <code>Some</code> if <code>self</code> is a mutable reference of variant <code>Fn</code>, …\nReturns <code>Some</code> if <code>self</code> is a mutable reference of variant <code>Fn</code>, …\nReturns <code>Some</code> if <code>self</code> is a mutable reference of variant …\nReturns <code>Some</code> if <code>self</code> is a mutable reference of variant …\nReturns <code>Some</code> if <code>self</code> is a mutable reference of variant <code>For</code>…\nReturns <code>Some</code> if <code>self</code> is a mutable reference of variant …\nReturns <code>Some</code> if <code>self</code> is a mutable reference of variant …\nReturns <code>Some</code> if <code>self</code> is a mutable reference of variant …\nReturns <code>Some</code> if <code>self</code> is a mutable reference of variant …\nReturns <code>Some</code> if <code>self</code> is a mutable reference of variant …\nReturns <code>Some</code> if <code>self</code> is a mutable reference of variant …\nReturns <code>Some</code> if <code>self</code> is a mutable reference of variant …\nReturns <code>Some</code> if <code>self</code> is a mutable reference of variant …\nReturns <code>Some</code> if <code>self</code> is a mutable reference of variant …\nReturns <code>Some</code> if <code>self</code> is a mutable reference of variant …\nReturns <code>Some</code> if <code>self</code> is a mutable reference of variant …\nReturns <code>Some</code> if <code>self</code> is a mutable reference of variant …\nReturns <code>Some</code> if <code>self</code> is a mutable reference of variant …\nReturns <code>Some</code> if <code>self</code> is a mutable reference of variant …\nReturns <code>Some</code> if <code>self</code> is a mutable reference of variant <code>If</code>, …\nReturns <code>Some</code> if <code>self</code> is a mutable reference of variant …\nReturns <code>Some</code> if <code>self</code> is a mutable reference of variant …\nReturns <code>Some</code> if <code>self</code> is a mutable reference of variant …\nReturns <code>Some</code> if <code>self</code> is a mutable reference of variant …\nReturns <code>Some</code> if <code>self</code> is a mutable reference of variant …\nReturns <code>Some</code> if <code>self</code> is a mutable reference of variant …\nReturns <code>Some</code> if <code>self</code> is a mutable reference of variant …\nReturns <code>Some</code> if <code>self</code> is a mutable reference of variant …\nReturns <code>Some</code> if <code>self</code> is a mutable reference of variant …\nReturns <code>Some</code> if <code>self</code> is a mutable reference of variant …\nReturns <code>Some</code> if <code>self</code> is a mutable reference of variant …\nReturns <code>Some</code> if <code>self</code> is a mutable reference of variant …\nReturns <code>Some</code> if <code>self</code> is a mutable reference of variant …\nReturns <code>Some</code> if <code>self</code> is a mutable reference of variant …\nReturns <code>Some</code> if <code>self</code> is a mutable reference of variant …\nReturns <code>Some</code> if <code>self</code> is a mutable reference of variant …\nReturns <code>Some</code> if <code>self</code> is a mutable reference of variant <code>Lit</code>…\nReturns <code>Some</code> if <code>self</code> is a mutable reference of variant …\nReturns <code>Some</code> if <code>self</code> is a mutable reference of variant …\nReturns <code>Some</code> if <code>self</code> is a mutable reference of variant …\nReturns <code>Some</code> if <code>self</code> is a mutable reference of variant …\nReturns <code>Some</code> if <code>self</code> is a mutable reference of variant …\nReturns <code>Some</code> if <code>self</code> is a mutable reference of variant …\nReturns <code>Some</code> if <code>self</code> is a mutable reference of variant …\nReturns <code>Some</code> if <code>self</code> is a mutable reference of variant …\nReturns <code>Some</code> if <code>self</code> is a mutable reference of variant …\nReturns <code>Some</code> if <code>self</code> is a mutable reference of variant …\nReturns <code>Some</code> if <code>self</code> is a mutable reference of variant …\nReturns <code>Some</code> if <code>self</code> is a mutable reference of variant …\nReturns <code>Some</code> if <code>self</code> is a mutable reference of variant <code>New</code>…\nReturns <code>Some</code> if <code>self</code> is a mutable reference of variant <code>Num</code>…\nReturns <code>Some</code> if <code>self</code> is a mutable reference of variant …\nReturns <code>Some</code> if <code>self</code> is a mutable reference of variant …\nReturns <code>Some</code> if <code>self</code> is a mutable reference of variant …\nReturns <code>Some</code> if <code>self</code> is a mutable reference of variant …\nReturns <code>Some</code> if <code>self</code> is a mutable reference of variant …\nReturns <code>Some</code> if <code>self</code> is a mutable reference of variant …\nReturns <code>Some</code> if <code>self</code> is a mutable reference of variant …\nReturns <code>Some</code> if <code>self</code> is a mutable reference of variant …\nReturns <code>Some</code> if <code>self</code> is a mutable reference of variant …\nReturns <code>Some</code> if <code>self</code> is a mutable reference of variant …\nReturns <code>Some</code> if <code>self</code> is a mutable reference of variant <code>Pat</code>…\nReturns <code>Some</code> if <code>self</code> is a mutable reference of variant <code>Pat</code>…\nReturns <code>Some</code> if <code>self</code> is a mutable reference of variant …\nReturns <code>Some</code> if <code>self</code> is a mutable reference of variant …\nReturns <code>Some</code> if <code>self</code> is a mutable reference of variant …\nReturns <code>Some</code> if <code>self</code> is a mutable reference of variant …\nReturns <code>Some</code> if <code>self</code> is a mutable reference of variant …\nReturns <code>Some</code> if <code>self</code> is a mutable reference of variant <code>Prop</code>…\nReturns <code>Some</code> if <code>self</code> is a mutable reference of variant …\nReturns <code>Some</code> if <code>self</code> is a mutable reference of variant <code>Rest</code>…\nReturns <code>Some</code> if <code>self</code> is a mutable reference of variant <code>Rest</code>…\nReturns <code>Some</code> if <code>self</code> is a mutable reference of variant <code>Rest</code>…\nReturns <code>Some</code> if <code>self</code> is a mutable reference of variant …\nReturns <code>Some</code> if <code>self</code> is a mutable reference of variant …\nReturns <code>Some</code> if <code>self</code> is a mutable reference of variant <code>Seq</code>…\nReturns <code>Some</code> if <code>self</code> is a mutable reference of variant …\nReturns <code>Some</code> if <code>self</code> is a mutable reference of variant …\nReturns <code>Some</code> if <code>self</code> is a mutable reference of variant …\nReturns <code>Some</code> if <code>self</code> is a mutable reference of variant …\nReturns <code>Some</code> if <code>self</code> is a mutable reference of variant …\nReturns <code>Some</code> if <code>self</code> is a mutable reference of variant <code>Stmt</code>…\nReturns <code>Some</code> if <code>self</code> is a mutable reference of variant <code>Str</code>…\nReturns <code>Some</code> if <code>self</code> is a mutable reference of variant <code>Str</code>…\nReturns <code>Some</code> if <code>self</code> is a mutable reference of variant <code>Str</code>…\nReturns <code>Some</code> if <code>self</code> is a mutable reference of variant <code>Str</code>…\nReturns <code>Some</code> if <code>self</code> is a mutable reference of variant …\nReturns <code>Some</code> if <code>self</code> is a mutable reference of variant …\nReturns <code>Some</code> if <code>self</code> is a mutable reference of variant …\nReturns <code>Some</code> if <code>self</code> is a mutable reference of variant …\nReturns <code>Some</code> if <code>self</code> is a mutable reference of variant …\nReturns <code>Some</code> if <code>self</code> is a mutable reference of variant <code>This</code>…\nReturns <code>Some</code> if <code>self</code> is a mutable reference of variant …\nReturns <code>Some</code> if <code>self</code> is a mutable reference of variant <code>Tpl</code>…\nReturns <code>Some</code> if <code>self</code> is a mutable reference of variant <code>Tpl</code>…\nReturns <code>Some</code> if <code>self</code> is a mutable reference of variant <code>Try</code>…\nReturns <code>Some</code> if <code>self</code> is a mutable reference of variant …\nReturns <code>Some</code> if <code>self</code> is a mutable reference of variant <code>TsAs</code>…\nReturns <code>Some</code> if <code>self</code> is a mutable reference of variant <code>TsAs</code>…\nReturns <code>Some</code> if <code>self</code> is a mutable reference of variant …\nReturns <code>Some</code> if <code>self</code> is a mutable reference of variant …\nReturns <code>Some</code> if <code>self</code> is a mutable reference of variant …\nReturns <code>Some</code> if <code>self</code> is a mutable reference of variant …\nReturns <code>Some</code> if <code>self</code> is a mutable reference of variant …\nReturns <code>Some</code> if <code>self</code> is a mutable reference of variant …\nReturns <code>Some</code> if <code>self</code> is a mutable reference of variant …\nReturns <code>Some</code> if <code>self</code> is a mutable reference of variant …\nReturns <code>Some</code> if <code>self</code> is a mutable reference of variant …\nReturns <code>Some</code> if <code>self</code> is a mutable reference of variant …\nReturns <code>Some</code> if <code>self</code> is a mutable reference of variant …\nReturns <code>Some</code> if <code>self</code> is a mutable reference of variant …\nReturns <code>Some</code> if <code>self</code> is a mutable reference of variant …\nReturns <code>Some</code> if <code>self</code> is a mutable reference of variant …\nReturns <code>Some</code> if <code>self</code> is a mutable reference of variant …\nReturns <code>Some</code> if <code>self</code> is a mutable reference of variant …\nReturns <code>Some</code> if <code>self</code> is a mutable reference of variant …\nReturns <code>Some</code> if <code>self</code> is a mutable reference of variant …\nReturns <code>Some</code> if <code>self</code> is a mutable reference of variant …\nReturns <code>Some</code> if <code>self</code> is a mutable reference of variant …\nReturns <code>Some</code> if <code>self</code> is a mutable reference of variant …\nReturns <code>Some</code> if <code>self</code> is a mutable reference of variant …\nReturns <code>Some</code> if <code>self</code> is a mutable reference of variant …\nReturns <code>Some</code> if <code>self</code> is a mutable reference of variant …\nReturns <code>Some</code> if <code>self</code> is a mutable reference of variant …\nReturns <code>Some</code> if <code>self</code> is a mutable reference of variant …\nReturns <code>Some</code> if <code>self</code> is a mutable reference of variant …\nReturns <code>Some</code> if <code>self</code> is a mutable reference of variant …\nReturns <code>Some</code> if <code>self</code> is a mutable reference of variant …\nReturns <code>Some</code> if <code>self</code> is a mutable reference of variant …\nReturns <code>Some</code> if <code>self</code> is a mutable reference of variant …\nReturns <code>Some</code> if <code>self</code> is a mutable reference of variant …\nReturns <code>Some</code> if <code>self</code> is a mutable reference of variant …\nReturns <code>Some</code> if <code>self</code> is a mutable reference of variant …\nReturns <code>Some</code> if <code>self</code> is a mutable reference of variant …\nReturns <code>Some</code> if <code>self</code> is a mutable reference of variant …\nReturns <code>Some</code> if <code>self</code> is a mutable reference of variant …\nReturns <code>Some</code> if <code>self</code> is a mutable reference of variant …\nReturns <code>Some</code> if <code>self</code> is a mutable reference of variant …\nReturns <code>Some</code> if <code>self</code> is a mutable reference of variant …\nReturns <code>Some</code> if <code>self</code> is a mutable reference of variant …\nReturns <code>Some</code> if <code>self</code> is a mutable reference of variant …\nReturns <code>Some</code> if <code>self</code> is a mutable reference of variant …\nReturns <code>Some</code> if <code>self</code> is a mutable reference of variant …\nReturns <code>Some</code> if <code>self</code> is a mutable reference of variant …\nReturns <code>Some</code> if <code>self</code> is a mutable reference of variant …\nReturns <code>Some</code> if <code>self</code> is a mutable reference of variant …\nReturns <code>Some</code> if <code>self</code> is a mutable reference of variant …\nReturns <code>Some</code> if <code>self</code> is a mutable reference of variant …\nReturns <code>Some</code> if <code>self</code> is a mutable reference of variant …\nReturns <code>Some</code> if <code>self</code> is a mutable reference of variant …\nReturns <code>Some</code> if <code>self</code> is a mutable reference of variant …\nReturns <code>Some</code> if <code>self</code> is a mutable reference of variant …\nReturns <code>Some</code> if <code>self</code> is a mutable reference of variant …\nReturns <code>Some</code> if <code>self</code> is a mutable reference of variant …\nReturns <code>Some</code> if <code>self</code> is a mutable reference of variant …\nReturns <code>Some</code> if <code>self</code> is a mutable reference of variant …\nReturns <code>Some</code> if <code>self</code> is a mutable reference of variant …\nReturns <code>Some</code> if <code>self</code> is a mutable reference of variant …\nReturns <code>Some</code> if <code>self</code> is a mutable reference of variant …\nReturns <code>Some</code> if <code>self</code> is a mutable reference of variant <code>Var</code>…\nReturns <code>Some</code> if <code>self</code> is a mutable reference of variant …\nReturns <code>Some</code> if <code>self</code> is a mutable reference of variant …\nReturns <code>Some</code> if <code>self</code> is a mutable reference of variant …\nReturns <code>Some</code> if <code>self</code> is a mutable reference of variant <code>With</code>…\nReturns <code>Some</code> if <code>self</code> is a mutable reference of variant …\nReturns <code>Some</code> if <code>self</code> is a reference of variant <code>Named</code>, and …\nReturns <code>Some</code> if <code>self</code> is a reference of variant <code>Named</code>, and …\nReturns <code>Some</code> if <code>self</code> is a reference of variant <code>Namespace</code>, …\nReturns <code>Some</code> if <code>self</code> is a reference of variant <code>Namespace</code>, …\nReturns <code>Some</code> if <code>self</code> is a reference of variant <code>New</code>, and …\nReturns <code>Some</code> if <code>self</code> is a reference of variant <code>Num</code>, and …\nReturns <code>Some</code> if <code>self</code> is a reference of variant <code>Number</code>, and …\nReturns <code>Some</code> if <code>self</code> is a reference of variant <code>Object</code>, and …\nReturns <code>Some</code> if <code>self</code> is a reference of variant <code>Object</code>, and …\nReturns <code>Some</code> if <code>self</code> is a reference of variant <code>Object</code>, and …\nReturns <code>Some</code> if <code>self</code> is a reference of variant <code>Object</code>, and …\nReturns <code>Some</code> if <code>self</code> is a reference of variant <code>OptChain</code>, …\nReturns <code>Some</code> if <code>self</code> is a reference of variant <code>OptChain</code>, …\nReturns <code>Some</code> if <code>self</code> is a reference of variant <code>Param</code>, and …\nReturns <code>Some</code> if <code>self</code> is a reference of variant <code>Paren</code>, and …\nReturns <code>Some</code> if <code>self</code> is a reference of variant <code>Paren</code>, and …\nReturns <code>Some</code> if <code>self</code> is a reference of variant <code>Pat</code>, and …\nReturns <code>Some</code> if <code>self</code> is a reference of variant <code>Pat</code>, and …\nReturns <code>Some</code> if <code>self</code> is a reference of variant <code>Private</code>, …\nReturns <code>Some</code> if <code>self</code> is a reference of variant …\nReturns <code>Some</code> if <code>self</code> is a reference of variant <code>PrivateName</code>…\nReturns <code>Some</code> if <code>self</code> is a reference of variant <code>PrivateName</code>…\nReturns <code>Some</code> if <code>self</code> is a reference of variant <code>PrivateProp</code>…\nReturns <code>Some</code> if <code>self</code> is a reference of variant <code>Prop</code>, and …\nReturns <code>Some</code> if <code>self</code> is a reference of variant <code>Public</code>, and …\nReturns <code>Some</code> if <code>self</code> is a reference of variant <code>Rest</code>, and …\nReturns <code>Some</code> if <code>self</code> is a reference of variant <code>Rest</code>, and …\nReturns <code>Some</code> if <code>self</code> is a reference of variant <code>Rest</code>, and …\nReturns <code>Some</code> if <code>self</code> is a reference of variant <code>Return</code>, and …\nReturns <code>Some</code> if <code>self</code> is a reference of variant <code>Script</code>, and …\nReturns <code>Some</code> if <code>self</code> is a reference of variant <code>Seq</code>, and …\nReturns <code>Some</code> if <code>self</code> is a reference of variant <code>Setter</code>, and …\nReturns <code>Some</code> if <code>self</code> is a reference of variant <code>Shorthand</code>, …\nReturns <code>Some</code> if <code>self</code> is a reference of variant <code>Simple</code>, and …\nReturns <code>Some</code> if <code>self</code> is a reference of variant <code>Spread</code>, and …\nReturns <code>Some</code> if <code>self</code> is a reference of variant <code>StaticBlock</code>…\nReturns <code>Some</code> if <code>self</code> is a reference of variant <code>Stmt</code>, and …\nReturns <code>Some</code> if <code>self</code> is a reference of variant <code>Str</code>, and …\nReturns <code>Some</code> if <code>self</code> is a reference of variant <code>Str</code>, and …\nReturns <code>Some</code> if <code>self</code> is a reference of variant <code>Str</code>, and …\nReturns <code>Some</code> if <code>self</code> is a reference of variant <code>Str</code>, and …\nReturns <code>Some</code> if <code>self</code> is a reference of variant <code>Super</code>, and …\nReturns <code>Some</code> if <code>self</code> is a reference of variant <code>SuperProp</code>, …\nReturns <code>Some</code> if <code>self</code> is a reference of variant <code>SuperProp</code>, …\nReturns <code>Some</code> if <code>self</code> is a reference of variant <code>Switch</code>, and …\nReturns <code>Some</code> if <code>self</code> is a reference of variant <code>TaggedTpl</code>, …\nReturns <code>Some</code> if <code>self</code> is a reference of variant <code>This</code>, and …\nReturns <code>Some</code> if <code>self</code> is a reference of variant <code>Throw</code>, and …\nReturns <code>Some</code> if <code>self</code> is a reference of variant <code>Tpl</code>, and …\nReturns <code>Some</code> if <code>self</code> is a reference of variant <code>Tpl</code>, and …\nReturns <code>Some</code> if <code>self</code> is a reference of variant <code>Try</code>, and …\nReturns <code>Some</code> if <code>self</code> is a reference of variant <code>TsArrayType</code>…\nReturns <code>Some</code> if <code>self</code> is a reference of variant <code>TsAs</code>, and …\nReturns <code>Some</code> if <code>self</code> is a reference of variant <code>TsAs</code>, and …\nReturns <code>Some</code> if <code>self</code> is a reference of variant …\nReturns <code>Some</code> if <code>self</code> is a reference of variant …\nReturns <code>Some</code> if <code>self</code> is a reference of variant …\nReturns <code>Some</code> if <code>self</code> is a reference of variant …\nReturns <code>Some</code> if <code>self</code> is a reference of variant …\nReturns <code>Some</code> if <code>self</code> is a reference of variant <code>TsEntityName</code>…\nReturns <code>Some</code> if <code>self</code> is a reference of variant <code>TsEntityName</code>…\nReturns <code>Some</code> if <code>self</code> is a reference of variant <code>TsEnum</code>, and …\nReturns <code>Some</code> if <code>self</code> is a reference of variant …\nReturns <code>Some</code> if <code>self</code> is a reference of variant …\nReturns <code>Some</code> if <code>self</code> is a reference of variant …\nReturns <code>Some</code> if <code>self</code> is a reference of variant <code>TsFnType</code>, …\nReturns <code>Some</code> if <code>self</code> is a reference of variant …\nReturns <code>Some</code> if <code>self</code> is a reference of variant …\nReturns <code>Some</code> if <code>self</code> is a reference of variant <code>TsImportType</code>…\nReturns <code>Some</code> if <code>self</code> is a reference of variant …\nReturns <code>Some</code> if <code>self</code> is a reference of variant …\nReturns <code>Some</code> if <code>self</code> is a reference of variant …\nReturns <code>Some</code> if <code>self</code> is a reference of variant <code>TsInferType</code>…\nReturns <code>Some</code> if <code>self</code> is a reference of variant …\nReturns <code>Some</code> if <code>self</code> is a reference of variant …\nReturns <code>Some</code> if <code>self</code> is a reference of variant <code>TsInterface</code>…\nReturns <code>Some</code> if <code>self</code> is a reference of variant …\nReturns <code>Some</code> if <code>self</code> is a reference of variant …\nReturns <code>Some</code> if <code>self</code> is a reference of variant …\nReturns <code>Some</code> if <code>self</code> is a reference of variant <code>TsLitType</code>, …\nReturns <code>Some</code> if <code>self</code> is a reference of variant <code>TsMappedType</code>…\nReturns <code>Some</code> if <code>self</code> is a reference of variant …\nReturns <code>Some</code> if <code>self</code> is a reference of variant <code>TsModule</code>, …\nReturns <code>Some</code> if <code>self</code> is a reference of variant …\nReturns <code>Some</code> if <code>self</code> is a reference of variant …\nReturns <code>Some</code> if <code>self</code> is a reference of variant …\nReturns <code>Some</code> if <code>self</code> is a reference of variant <code>TsNonNull</code>, …\nReturns <code>Some</code> if <code>self</code> is a reference of variant <code>TsNonNull</code>, …\nReturns <code>Some</code> if <code>self</code> is a reference of variant …\nReturns <code>Some</code> if <code>self</code> is a reference of variant <code>TsParamProp</code>…\nReturns <code>Some</code> if <code>self</code> is a reference of variant …\nReturns <code>Some</code> if <code>self</code> is a reference of variant …\nReturns <code>Some</code> if <code>self</code> is a reference of variant …\nReturns <code>Some</code> if <code>self</code> is a reference of variant <code>TsRestType</code>, …\nReturns <code>Some</code> if <code>self</code> is a reference of variant <code>TsSatisfies</code>…\nReturns <code>Some</code> if <code>self</code> is a reference of variant <code>TsSatisfies</code>…\nReturns <code>Some</code> if <code>self</code> is a reference of variant …\nReturns <code>Some</code> if <code>self</code> is a reference of variant <code>TsThisType</code>, …\nReturns <code>Some</code> if <code>self</code> is a reference of variant <code>TsThisType</code>, …\nReturns <code>Some</code> if <code>self</code> is a reference of variant <code>TsTupleType</code>…\nReturns <code>Some</code> if <code>self</code> is a reference of variant <code>TsTypeAlias</code>…\nReturns <code>Some</code> if <code>self</code> is a reference of variant …\nReturns <code>Some</code> if <code>self</code> is a reference of variant …\nReturns <code>Some</code> if <code>self</code> is a reference of variant <code>TsTypeLit</code>, …\nReturns <code>Some</code> if <code>self</code> is a reference of variant …\nReturns <code>Some</code> if <code>self</code> is a reference of variant …\nReturns <code>Some</code> if <code>self</code> is a reference of variant <code>TsTypeQuery</code>…\nReturns <code>Some</code> if <code>self</code> is a reference of variant <code>TsTypeRef</code>, …\nReturns <code>Some</code> if <code>self</code> is a reference of variant …\nReturns <code>Some</code> if <code>self</code> is a reference of variant <code>TsUnionType</code>…\nReturns <code>Some</code> if <code>self</code> is a reference of variant <code>Unary</code>, and …\nReturns <code>Some</code> if <code>self</code> is a reference of variant <code>Update</code>, and …\nReturns <code>Some</code> if <code>self</code> is a reference of variant <code>Using</code>, and …\nReturns <code>Some</code> if <code>self</code> is a reference of variant <code>UsingDecl</code>, …\nReturns <code>Some</code> if <code>self</code> is a reference of variant <code>Var</code>, and …\nReturns <code>Some</code> if <code>self</code> is a reference of variant <code>VarDecl</code>, …\nReturns <code>Some</code> if <code>self</code> is a reference of variant <code>VarDecl</code>, …\nReturns <code>Some</code> if <code>self</code> is a reference of variant <code>While</code>, and …\nReturns <code>Some</code> if <code>self</code> is a reference of variant <code>With</code>, and …\nReturns <code>Some</code> if <code>self</code> is a reference of variant <code>Yield</code>, and …\nReturns <code>Some</code> if <code>self</code> is of variant <code>Assign</code>, and <code>None</code> …\nReturns <code>Some</code> if <code>self</code> is of variant <code>Assign</code>, and <code>None</code> …\nReturns <code>Some</code> if <code>self</code> is of variant <code>Assign</code>, and <code>None</code> …\nReturns <code>Some</code> if <code>self</code> is of variant <code>Assign</code>, and <code>None</code> …\nReturns <code>Some</code> if <code>self</code> is of variant <code>Assign</code>, and <code>None</code> …\nGet the atom of the export name.\nReturns <code>Some</code> if <code>self</code> is of variant <code>AutoAccessor</code>, and <code>None</code> …\nReturns <code>Some</code> if <code>self</code> is of variant <code>Await</code>, and <code>None</code> …\nThe archived counterpart of <code>OptChainExpr::base</code>\nThis is boxed to reduce the type size of Expr.\nReturns <code>Some</code> if <code>self</code> is of variant <code>BigInt</code>, and <code>None</code> …\nReturns <code>Some</code> if <code>self</code> is of variant <code>BigInt</code>, and <code>None</code> …\nReturns <code>Some</code> if <code>self</code> is of variant <code>Bin</code>, and <code>None</code> otherwise.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nGet the underlying bits value.\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nReturns <code>Some</code> if <code>self</code> is of variant <code>Block</code>, and <code>None</code> …\nReturns <code>Some</code> if <code>self</code> is of variant <code>BlockStmt</code>, and <code>None</code> …\nThe archived counterpart of <code>ArrowExpr::body</code>\nThis is boxed to reduce the type size of Expr.\nReturns <code>Some</code> if <code>self</code> is of variant <code>Bool</code>, and <code>None</code> …\nReturns <code>Some</code> if <code>self</code> is of variant <code>Break</code>, and <code>None</code> …\nReturns <code>Some</code> if <code>self</code> is of variant <code>Call</code>, and <code>None</code> …\nReturns <code>Some</code> if <code>self</code> is of variant <code>Call</code>, and <code>None</code> …\nThe archived counterpart of <code>CallExpr::callee</code>\nThe archived counterpart of <code>NewExpr::callee</code>\nThe archived counterpart of <code>OptCall::callee</code>\nReturns true if the statement does not prevent the …\nReturns <code>Some</code> if <code>self</code> is of variant <code>Class</code>, and <code>None</code> …\nReturns <code>Some</code> if <code>self</code> is of variant <code>Class</code>, and <code>None</code> …\nReturns <code>Some</code> if <code>self</code> is of variant <code>Class</code>, and <code>None</code> …\nThe archived counterpart of <code>ClassExpr::class</code>\nReturns <code>Some</code> if <code>self</code> is of variant <code>ClassProp</code>, and <code>None</code> …\nGets a custom text range to use when emitting comments.\nGets a custom text range to use when emitting comments.\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nReturns <code>Some</code> if <code>self</code> is of variant <code>Computed</code>, and <code>None</code> …\nReturns <code>Some</code> if <code>self</code> is of variant <code>Computed</code>, and <code>None</code> …\nReturns <code>Some</code> if <code>self</code> is of variant <code>Computed</code>, and <code>None</code> …\nReturns <code>Some</code> if <code>self</code> is of variant <code>Cond</code>, and <code>None</code> …\nThe archived counterpart of <code>CondExpr::cons</code>\nReturns <code>Some</code> if <code>self</code> is of variant <code>Constructor</code>, and <code>None</code> …\nWhether all set bits in a source flags value are also set …\nReturns <code>Some</code> if <code>self</code> is of variant <code>Continue</code>, and <code>None</code> …\nThe archived counterpart of <code>TplElement::cooked</code>\nThis value is never used by <code>swc_ecma_codegen</code>, and this …\nReturns <code>Some</code> if <code>self</code> is of variant <code>Debugger</code>, and <code>None</code> …\nReturns <code>Some</code> if <code>self</code> is of variant <code>Decl</code>, and <code>None</code> …\nReturns <code>Some</code> if <code>self</code> is of variant <code>Default</code>, and <code>None</code> …\nReturns <code>Some</code> if <code>self</code> is of variant <code>Default</code>, and <code>None</code> …\nTypescript only\nThe archived counterpart of <code>YieldExpr::delegate</code>\nThe intersection of a source flags value with the …\nReturns true for <code>eval</code> and member expressions.\nReturns <code>Some</code> if <code>self</code> is of variant <code>DoWhile</code>, and <code>None</code> …\nThe archived counterpart of <code>SpreadElement::dot3_token</code>\nThe archived counterpart of <code>ArrayLit::elems</code>\nReturns <code>Some</code> if <code>self</code> is of variant <code>Empty</code>, and <code>None</code> …\nGet a flags value with all bits unset.\nReturns <code>Some</code> if <code>self</code> is of variant <code>Empty</code>, and <code>None</code> …\nUnwraps the value, yielding the content of <code>Array</code>.\nUnwraps the value, yielding the content of <code>Array</code>.\nUnwraps the value, yielding the content of <code>Array</code>.\nUnwraps the value, yielding the content of <code>Array</code>.\nUnwraps the value, yielding the content of <code>Arrow</code>.\nUnwraps the value, yielding the content of <code>Assign</code>.\nUnwraps the value, yielding the content of <code>Assign</code>.\nUnwraps the value, yielding the content of <code>Assign</code>.\nUnwraps the value, yielding the content of <code>Assign</code>.\nUnwraps the value, yielding the content of <code>Assign</code>.\nUnwraps the value, yielding the content of <code>AutoAccessor</code>.\nUnwraps the value, yielding the content of <code>Await</code>.\nUnwraps the value, yielding the content of <code>BigInt</code>.\nUnwraps the value, yielding the content of <code>BigInt</code>.\nUnwraps the value, yielding the content of <code>Bin</code>.\nUnwraps the value, yielding the content of <code>Block</code>.\nUnwraps the value, yielding the content of <code>BlockStmt</code>.\nUnwraps the value, yielding the content of <code>Bool</code>.\nUnwraps the value, yielding the content of <code>Break</code>.\nUnwraps the value, yielding the content of <code>Call</code>.\nUnwraps the value, yielding the content of <code>Call</code>.\nUnwraps the value, yielding the content of <code>Class</code>.\nUnwraps the value, yielding the content of <code>Class</code>.\nUnwraps the value, yielding the content of <code>Class</code>.\nUnwraps the value, yielding the content of <code>ClassProp</code>.\nUnwraps the value, yielding the content of <code>Computed</code>.\nUnwraps the value, yielding the content of <code>Computed</code>.\nUnwraps the value, yielding the content of <code>Computed</code>.\nUnwraps the value, yielding the content of <code>Cond</code>.\nUnwraps the value, yielding the content of <code>Constructor</code>.\nUnwraps the value, yielding the content of <code>Continue</code>.\nUnwraps the value, yielding the content of <code>Debugger</code>.\nUnwraps the value, yielding the content of <code>Decl</code>.\nUnwraps the value, yielding the content of <code>Default</code>.\nUnwraps the value, yielding the content of <code>Default</code>.\nUnwraps the value, yielding the content of <code>DoWhile</code>.\nUnwraps the value, yielding the content of <code>Empty</code>.\nUnwraps the value, yielding the content of <code>Empty</code>.\nUnwraps the value, yielding the content of <code>ExportAll</code>.\nUnwraps the value, yielding the content of <code>ExportDecl</code>.\nUnwraps the value, yielding the content of …\nUnwraps the value, yielding the content of …\nUnwraps the value, yielding the content of <code>ExportNamed</code>.\nUnwraps the value, yielding the content of <code>Expr</code>.\nUnwraps the value, yielding the content of <code>Expr</code>.\nUnwraps the value, yielding the content of <code>Expr</code>.\nUnwraps the value, yielding the content of <code>Expr</code>.\nUnwraps the value, yielding the content of <code>Expr</code>.\nUnwraps the value, yielding the content of <code>Fn</code>.\nUnwraps the value, yielding the content of <code>Fn</code>.\nUnwraps the value, yielding the content of <code>Fn</code>.\nUnwraps the value, yielding the content of <code>ForIn</code>.\nUnwraps the value, yielding the content of <code>ForOf</code>.\nUnwraps the value, yielding the content of <code>For</code>.\nUnwraps the value, yielding the content of <code>Getter</code>.\nUnwraps the value, yielding the content of <code>Ident</code>.\nUnwraps the value, yielding the content of <code>Ident</code>.\nUnwraps the value, yielding the content of <code>Ident</code>.\nUnwraps the value, yielding the content of <code>Ident</code>.\nUnwraps the value, yielding the content of <code>Ident</code>.\nUnwraps the value, yielding the content of <code>Ident</code>.\nUnwraps the value, yielding the content of <code>Ident</code>.\nUnwraps the value, yielding the content of <code>Ident</code>.\nUnwraps the value, yielding the content of <code>Ident</code>.\nUnwraps the value, yielding the content of <code>Ident</code>.\nUnwraps the value, yielding the content of <code>Ident</code>.\nUnwraps the value, yielding the content of <code>Ident</code>.\nUnwraps the value, yielding the content of <code>Ident</code>.\nUnwraps the value, yielding the content of <code>If</code>.\nUnwraps the value, yielding the content of <code>Import</code>.\nUnwraps the value, yielding the content of <code>Import</code>.\nUnwraps the value, yielding the content of <code>Import</code>.\nUnwraps the value, yielding the content of <code>Invalid</code>.\nUnwraps the value, yielding the content of <code>Invalid</code>.\nUnwraps the value, yielding the content of <code>Invalid</code>.\nUnwraps the value, yielding the content of <code>Invalid</code>.\nUnwraps the value, yielding the content of <code>JSXElement</code>.\nUnwraps the value, yielding the content of <code>JSXEmpty</code>.\nUnwraps the value, yielding the content of <code>JSXFragment</code>.\nUnwraps the value, yielding the content of <code>JSXMember</code>.\nUnwraps the value, yielding the content of <code>JSXMemberExpr</code>.\nUnwraps the value, yielding the content of …\nUnwraps the value, yielding the content of <code>KeyValue</code>.\nUnwraps the value, yielding the content of <code>KeyValue</code>.\nUnwraps the value, yielding the content of <code>Labeled</code>.\nUnwraps the value, yielding the content of <code>Lit</code>.\nUnwraps the value, yielding the content of <code>Member</code>.\nUnwraps the value, yielding the content of <code>Member</code>.\nUnwraps the value, yielding the content of <code>Member</code>.\nUnwraps the value, yielding the content of <code>MetaProp</code>.\nUnwraps the value, yielding the content of <code>Method</code>.\nUnwraps the value, yielding the content of <code>Method</code>.\nUnwraps the value, yielding the content of <code>Module</code>.\nUnwraps the value, yielding the content of <code>ModuleDecl</code>.\nUnwraps the value, yielding the content of <code>Named</code>.\nUnwraps the value, yielding the content of <code>Named</code>.\nUnwraps the value, yielding the content of <code>Namespace</code>.\nUnwraps the value, yielding the content of <code>Namespace</code>.\nUnwraps the value, yielding the content of <code>New</code>.\nUnwraps the value, yielding the content of <code>Num</code>.\nUnwraps the value, yielding the content of <code>Number</code>.\nUnwraps the value, yielding the content of <code>Object</code>.\nUnwraps the value, yielding the content of <code>Object</code>.\nUnwraps the value, yielding the content of <code>Object</code>.\nUnwraps the value, yielding the content of <code>Object</code>.\nUnwraps the value, yielding the content of <code>OptChain</code>.\nUnwraps the value, yielding the content of <code>OptChain</code>.\nUnwraps the value, yielding the content of <code>Param</code>.\nUnwraps the value, yielding the content of <code>Paren</code>.\nUnwraps the value, yielding the content of <code>Paren</code>.\nUnwraps the value, yielding the content of <code>Pat</code>.\nUnwraps the value, yielding the content of <code>Pat</code>.\nUnwraps the value, yielding the content of <code>Private</code>.\nUnwraps the value, yielding the content of <code>PrivateMethod</code>.\nUnwraps the value, yielding the content of <code>PrivateName</code>.\nUnwraps the value, yielding the content of <code>PrivateName</code>.\nUnwraps the value, yielding the content of <code>PrivateProp</code>.\nUnwraps the value, yielding the content of <code>Prop</code>.\nUnwraps the value, yielding the content of <code>Public</code>.\nUnwraps the value, yielding the content of <code>Rest</code>.\nUnwraps the value, yielding the content of <code>Rest</code>.\nUnwraps the value, yielding the content of <code>Rest</code>.\nUnwraps the value, yielding the content of <code>Return</code>.\nUnwraps the value, yielding the content of <code>Script</code>.\nUnwraps the value, yielding the content of <code>Seq</code>.\nUnwraps the value, yielding the content of <code>Setter</code>.\nUnwraps the value, yielding the content of <code>Shorthand</code>.\nUnwraps the value, yielding the content of <code>Simple</code>.\nUnwraps the value, yielding the content of <code>Spread</code>.\nUnwraps the value, yielding the content of <code>StaticBlock</code>.\nUnwraps the value, yielding the content of <code>Stmt</code>.\nUnwraps the value, yielding the content of <code>Str</code>.\nUnwraps the value, yielding the content of <code>Str</code>.\nUnwraps the value, yielding the content of <code>Str</code>.\nUnwraps the value, yielding the content of <code>Str</code>.\nUnwraps the value, yielding the content of <code>Super</code>.\nUnwraps the value, yielding the content of <code>SuperProp</code>.\nUnwraps the value, yielding the content of <code>SuperProp</code>.\nUnwraps the value, yielding the content of <code>Switch</code>.\nUnwraps the value, yielding the content of <code>TaggedTpl</code>.\nUnwraps the value, yielding the content of <code>This</code>.\nUnwraps the value, yielding the content of <code>Throw</code>.\nUnwraps the value, yielding the content of <code>Tpl</code>.\nUnwraps the value, yielding the content of <code>Tpl</code>.\nUnwraps the value, yielding the content of <code>Try</code>.\nUnwraps the value, yielding the content of <code>TsArrayType</code>.\nUnwraps the value, yielding the content of <code>TsAs</code>.\nUnwraps the value, yielding the content of <code>TsAs</code>.\nUnwraps the value, yielding the content of …\nUnwraps the value, yielding the content of …\nUnwraps the value, yielding the content of <code>TsConstAssertion</code>…\nUnwraps the value, yielding the content of …\nUnwraps the value, yielding the content of …\nUnwraps the value, yielding the content of <code>TsEntityName</code>.\nUnwraps the value, yielding the content of <code>TsEntityName</code>.\nUnwraps the value, yielding the content of <code>TsEnum</code>.\nUnwraps the value, yielding the content of …\nUnwraps the value, yielding the content of …\nUnwraps the value, yielding the content of …\nUnwraps the value, yielding the content of <code>TsFnType</code>.\nUnwraps the value, yielding the content of …\nUnwraps the value, yielding the content of <code>TsImportEquals</code>.\nUnwraps the value, yielding the content of <code>TsImportType</code>.\nUnwraps the value, yielding the content of <code>TsIndexSignature</code>…\nUnwraps the value, yielding the content of <code>TsIndexSignature</code>…\nUnwraps the value, yielding the content of …\nUnwraps the value, yielding the content of <code>TsInferType</code>.\nUnwraps the value, yielding the content of <code>TsInstantiation</code>.\nUnwraps the value, yielding the content of <code>TsInstantiation</code>.\nUnwraps the value, yielding the content of <code>TsInterface</code>.\nUnwraps the value, yielding the content of <code>TsInterfaceDecl</code>.\nUnwraps the value, yielding the content of …\nUnwraps the value, yielding the content of <code>TsKeywordType</code>.\nUnwraps the value, yielding the content of <code>TsLitType</code>.\nUnwraps the value, yielding the content of <code>TsMappedType</code>.\nUnwraps the value, yielding the content of …\nUnwraps the value, yielding the content of <code>TsModule</code>.\nUnwraps the value, yielding the content of <code>TsModuleBlock</code>.\nUnwraps the value, yielding the content of <code>TsNamespaceDecl</code>.\nUnwraps the value, yielding the content of …\nUnwraps the value, yielding the content of <code>TsNonNull</code>.\nUnwraps the value, yielding the content of <code>TsNonNull</code>.\nUnwraps the value, yielding the content of <code>TsOptionalType</code>.\nUnwraps the value, yielding the content of <code>TsParamProp</code>.\nUnwraps the value, yielding the content of …\nUnwraps the value, yielding the content of …\nUnwraps the value, yielding the content of <code>TsQualifiedName</code>.\nUnwraps the value, yielding the content of <code>TsRestType</code>.\nUnwraps the value, yielding the content of <code>TsSatisfies</code>.\nUnwraps the value, yielding the content of <code>TsSatisfies</code>.\nUnwraps the value, yielding the content of …\nUnwraps the value, yielding the content of <code>TsThisType</code>.\nUnwraps the value, yielding the content of <code>TsThisType</code>.\nUnwraps the value, yielding the content of <code>TsTupleType</code>.\nUnwraps the value, yielding the content of <code>TsTypeAlias</code>.\nUnwraps the value, yielding the content of <code>TsTypeAssertion</code>.\nUnwraps the value, yielding the content of <code>TsTypeAssertion</code>.\nUnwraps the value, yielding the content of <code>TsTypeLit</code>.\nUnwraps the value, yielding the content of <code>TsTypeOperator</code>.\nUnwraps the value, yielding the content of <code>TsTypePredicate</code>.\nUnwraps the value, yielding the content of <code>TsTypeQuery</code>.\nUnwraps the value, yielding the content of <code>TsTypeRef</code>.\nUnwraps the value, yielding the content of …\nUnwraps the value, yielding the content of <code>TsUnionType</code>.\nUnwraps the value, yielding the content of <code>Unary</code>.\nUnwraps the value, yielding the content of <code>Update</code>.\nUnwraps the value, yielding the content of <code>Using</code>.\nUnwraps the value, yielding the content of <code>UsingDecl</code>.\nUnwraps the value, yielding the content of <code>Var</code>.\nUnwraps the value, yielding the content of <code>VarDecl</code>.\nUnwraps the value, yielding the content of <code>VarDecl</code>.\nUnwraps the value, yielding the content of <code>While</code>.\nUnwraps the value, yielding the content of <code>With</code>.\nUnwraps the value, yielding the content of <code>Yield</code>.\nReturns <code>Some</code> if <code>self</code> is of variant <code>ExportAll</code>, and <code>None</code> …\nReturns <code>Some</code> if <code>self</code> is of variant <code>ExportDecl</code>, and <code>None</code> …\nReturns <code>Some</code> if <code>self</code> is of variant <code>ExportDefaultDecl</code>, and …\nReturns <code>Some</code> if <code>self</code> is of variant <code>ExportDefaultExpr</code>, and …\nReturns <code>Some</code> if <code>self</code> is of variant <code>ExportNamed</code>, and <code>None</code> …\n<code>Some(bar)</code> in <code>export { foo as bar }</code>\nReturns <code>Some</code> if <code>self</code> is of variant <code>Expr</code>, and <code>None</code> …\nReturns <code>Some</code> if <code>self</code> is of variant <code>Expr</code>, and <code>None</code> …\nReturns <code>Some</code> if <code>self</code> is of variant <code>Expr</code>, and <code>None</code> …\nReturns <code>Some</code> if <code>self</code> is of variant <code>Expr</code>, and <code>None</code> …\nReturns <code>Some</code> if <code>self</code> is of variant <code>Expr</code>, and <code>None</code> …\nThe archived counterpart of <code>SpreadElement::expr</code>\nThe archived counterpart of <code>ParenExpr::expr</code>\nThe archived counterpart of <code>ExprOrSpread::expr</code>\nThe archived counterpart of <code>SeqExpr::exprs</code>\nThe archived counterpart of <code>Tpl::exprs</code>\nThe bitwise or (<code>|</code>) of the bits in each flags value.\nReturns <code>Some</code> if <code>self</code> is of variant <code>Fn</code>, and <code>None</code> otherwise.\nReturns <code>Some</code> if <code>self</code> is of variant <code>Fn</code>, and <code>None</code> otherwise.\nReturns <code>Some</code> if <code>self</code> is of variant <code>Fn</code>, and <code>None</code> otherwise.\nReturns <code>Some</code> if <code>self</code> is of variant <code>ForIn</code>, and <code>None</code> …\nReturns <code>Some</code> if <code>self</code> is of variant <code>ForOf</code>, and <code>None</code> …\nReturns <code>Some</code> if <code>self</code> is of variant <code>For</code>, and <code>None</code> otherwise.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nConvert from a bits value.\nConvert from a bits value exactly.\nConvert from a bits value, unsetting any unknown bits.\nCreates an expression from <code>exprs</code>. This will return first …\nThe bitwise or (<code>|</code>) of the bits in each flags value.\nGet a flags value with the bits of a flag with the given …\nThe archived counterpart of <code>FnExpr::function</code>\nReturns <code>Some</code> if <code>self</code> is of variant <code>Getter</code>, and <code>None</code> …\nIn TypeScript, this is only available through<code>node.flags</code>.\nIn TypeScript, this is only available through<code>node.flags</code>.\nReturns <code>Some</code> if <code>self</code> is of variant <code>Ident</code>, and <code>None</code> …\nReturns <code>Some</code> if <code>self</code> is of variant <code>Ident</code>, and <code>None</code> …\nReturns <code>Some</code> if <code>self</code> is of variant <code>Ident</code>, and <code>None</code> …\nReturns <code>Some</code> if <code>self</code> is of variant <code>Ident</code>, and <code>None</code> …\nReturns <code>Some</code> if <code>self</code> is of variant <code>Ident</code>, and <code>None</code> …\nReturns <code>Some</code> if <code>self</code> is of variant <code>Ident</code>, and <code>None</code> …\nReturns <code>Some</code> if <code>self</code> is of variant <code>Ident</code>, and <code>None</code> …\nReturns <code>Some</code> if <code>self</code> is of variant <code>Ident</code>, and <code>None</code> …\nReturns <code>Some</code> if <code>self</code> is of variant <code>Ident</code>, and <code>None</code> …\nReturns <code>Some</code> if <code>self</code> is of variant <code>Ident</code>, and <code>None</code> …\nReturns <code>Some</code> if <code>self</code> is of variant <code>Ident</code>, and <code>None</code> …\nReturns <code>Some</code> if <code>self</code> is of variant <code>Ident</code>, and <code>None</code> …\nReturns <code>Some</code> if <code>self</code> is of variant <code>Ident</code>, and <code>None</code> …\nThe archived counterpart of <code>FnExpr::ident</code>\nThe archived counterpart of <code>ClassExpr::ident</code>\nReturns <code>Some</code> if <code>self</code> is of variant <code>If</code>, and <code>None</code> otherwise.\nTypescript extension.\nReturns <code>Some</code> if <code>self</code> is of variant <code>Import</code>, and <code>None</code> …\nReturns <code>Some</code> if <code>self</code> is of variant <code>Import</code>, and <code>None</code> …\nReturns <code>Some</code> if <code>self</code> is of variant <code>Import</code>, and <code>None</code> …\nInitialization expression.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nWhether any set bits in a source flags value are also set …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCreate a private identifier that is unique in the file, …\nReturns <code>Some</code> if <code>self</code> is of variant <code>Invalid</code>, and <code>None</code> …\nReturns <code>Some</code> if <code>self</code> is of variant <code>Invalid</code>, and <code>None</code> …\nReturns <code>Some</code> if <code>self</code> is of variant <code>Invalid</code>, and <code>None</code> …\nReturns <code>Some</code> if <code>self</code> is of variant <code>Invalid</code>, and <code>None</code> …\nTypescript extension.\nTypescript extension.\nTypescript extension.\nWhether all known bits in this flags value are set.\nReturns <code>true</code> if <code>self</code> is of variant <code>Array</code>.\nReturns <code>true</code> if <code>self</code> is of variant <code>Array</code>.\nReturns <code>true</code> if <code>self</code> is of variant <code>Array</code>.\nReturns <code>true</code> if <code>self</code> is of variant <code>Array</code>.\nReturns <code>true</code> if <code>self</code> is of variant <code>Arrow</code>.\nReturns <code>true</code> if <code>self</code> is of variant <code>Assign</code>.\nReturns <code>true</code> if <code>self</code> is of variant <code>Assign</code>.\nReturns <code>true</code> if <code>self</code> is of variant <code>Assign</code>.\nReturns <code>true</code> if <code>self</code> is of variant <code>Assign</code>.\nReturns <code>true</code> if <code>self</code> is of variant <code>Assign</code>.\nThe archived counterpart of <code>ArrowExpr::is_async</code>\nif it’s an async function.\nReturns <code>true</code> if <code>self</code> is of variant <code>AutoAccessor</code>.\nSpan of the await token.\nReturns <code>true</code> if <code>self</code> is of variant <code>Await</code>.\nReturns <code>true</code> if <code>self</code> is of variant <code>BigInt</code>.\nReturns <code>true</code> if <code>self</code> is of variant <code>BigInt</code>.\nReturns <code>true</code> if <code>self</code> is of variant <code>Bin</code>.\nReturns <code>true</code> if <code>self</code> is of variant <code>Block</code>.\nReturns <code>true</code> if <code>self</code> is of variant <code>BlockStmt</code>.\nReturns <code>true</code> if <code>self</code> is of variant <code>Bool</code>.\nReturns <code>true</code> if <code>self</code> is of variant <code>Break</code>.\nReturns <code>true</code> if <code>self</code> is of variant <code>Call</code>.\nReturns <code>true</code> if <code>self</code> is of variant <code>Call</code>.\nReturns <code>true</code> if <code>self</code> is of variant <code>Class</code>.\nReturns <code>true</code> if <code>self</code> is of variant <code>Class</code>.\nReturns <code>true</code> if <code>self</code> is of variant <code>Class</code>.\nReturns <code>true</code> if <code>self</code> is of variant <code>ClassProp</code>.\nReturns <code>true</code> if <code>self</code> is of variant <code>Computed</code>.\nReturns <code>true</code> if <code>self</code> is of variant <code>Computed</code>.\nReturns <code>true</code> if <code>self</code> is of variant <code>Computed</code>.\nReturns <code>true</code> if <code>self</code> is of variant <code>Cond</code>.\nReturns <code>true</code> if <code>self</code> is of variant <code>Constructor</code>.\nReturns <code>true</code> if <code>self</code> is of variant <code>Continue</code>.\nReturns <code>true</code> if <code>self</code> is of variant <code>Debugger</code>.\nReturns <code>true</code> if <code>self</code> is of variant <code>Decl</code>.\nReturns <code>true</code> if <code>self</code> is of variant <code>Default</code>.\nReturns <code>true</code> if <code>self</code> is of variant <code>Default</code>.\nReturns <code>true</code> if <code>self</code> is of variant <code>DoWhile</code>.\nReturns <code>true</code> if <code>self</code> is of variant <code>Empty</code>.\nWhether all bits in this flags value are unset.\nReturns <code>true</code> if <code>self</code> is of variant <code>Empty</code>.\nReturns <code>true</code> if <code>self</code> is of variant <code>ExportAll</code>.\nReturns <code>true</code> if <code>self</code> is of variant <code>ExportDecl</code>.\nReturns <code>true</code> if <code>self</code> is of variant <code>ExportDefaultDecl</code>.\nReturns <code>true</code> if <code>self</code> is of variant <code>ExportDefaultExpr</code>.\nReturns <code>true</code> if <code>self</code> is of variant <code>ExportNamed</code>.\nReturns <code>true</code> if <code>self</code> is of variant <code>Expr</code>.\nReturns <code>true</code> if <code>self</code> is of variant <code>Expr</code>.\nReturns <code>true</code> if <code>self</code> is of variant <code>Expr</code>.\nReturns <code>true</code> if <code>self</code> is of variant <code>Expr</code>.\nReturns <code>true</code> if <code>self</code> is of variant <code>Expr</code>.\nReturns <code>true</code> if <code>self</code> is of variant <code>Fn</code>.\nReturns <code>true</code> if <code>self</code> is of variant <code>Fn</code>.\nReturns <code>true</code> if <code>self</code> is of variant <code>Fn</code>.\nReturns <code>true</code> if <code>self</code> is of variant <code>ForIn</code>.\nReturns <code>true</code> if <code>self</code> is of variant <code>ForOf</code>.\nReturns <code>true</code> if <code>self</code> is of variant <code>For</code>.\nThe archived counterpart of <code>ArrowExpr::is_generator</code>\nif it’s a generator.\nReturns <code>true</code> if <code>self</code> is of variant <code>Getter</code>.\nReturns <code>true</code> if <code>self</code> is of variant <code>Ident</code>.\nReturns <code>true</code> if <code>self</code> is of variant <code>Ident</code>.\nReturns <code>true</code> if <code>self</code> is of variant <code>Ident</code>.\nReturns <code>true</code> if <code>self</code> is of variant <code>Ident</code>.\nReturns <code>true</code> if <code>self</code> is of variant <code>Ident</code>.\nReturns <code>true</code> if <code>self</code> is of variant <code>Ident</code>.\nReturns <code>true</code> if <code>self</code> is of variant <code>Ident</code>.\nReturns <code>true</code> if <code>self</code> is of variant <code>Ident</code>.\nReturns <code>true</code> if <code>self</code> is of variant <code>Ident</code>.\nReturns <code>true</code> if <code>self</code> is of variant <code>Ident</code>.\nReturns <code>true</code> if <code>self</code> is of variant <code>Ident</code>.\nReturns <code>true</code> if <code>self</code> is of variant <code>Ident</code>.\nReturns <code>true</code> if <code>self</code> is of variant <code>Ident</code>.\nReturns <code>true</code> if <code>self</code> is of variant <code>If</code>.\nReturns <code>true</code> if <code>self</code> is of variant <code>Import</code>.\nReturns <code>true</code> if <code>self</code> is of variant <code>Import</code>.\nReturns <code>true</code> if <code>self</code> is of variant <code>Import</code>.\nReturns <code>true</code> if <code>self</code> is of variant <code>Invalid</code>.\nReturns <code>true</code> if <code>self</code> is of variant <code>Invalid</code>.\nReturns <code>true</code> if <code>self</code> is of variant <code>Invalid</code>.\nReturns <code>true</code> if <code>self</code> is of variant <code>Invalid</code>.\nReturns <code>true</code> if <code>self</code> is of variant <code>JSXElement</code>.\nReturns <code>true</code> if <code>self</code> is of variant <code>JSXEmpty</code>.\nReturns <code>true</code> if <code>self</code> is of variant <code>JSXFragment</code>.\nReturns <code>true</code> if <code>self</code> is of variant <code>JSXMember</code>.\nReturns <code>true</code> if <code>self</code> is of variant <code>JSXMemberExpr</code>.\nReturns <code>true</code> if <code>self</code> is of variant <code>JSXNamespacedName</code>.\nReturns <code>true</code> if <code>self</code> is of variant <code>KeyValue</code>.\nReturns <code>true</code> if <code>self</code> is of variant <code>KeyValue</code>.\nReturns <code>true</code> if <code>self</code> is of variant <code>Labeled</code>.\nReturns <code>true</code> if <code>self</code> is of variant <code>Lit</code>.\nReturns <code>true</code> if <code>self</code> is of variant <code>Member</code>.\nReturns <code>true</code> if <code>self</code> is of variant <code>Member</code>.\nReturns <code>true</code> if <code>self</code> is of variant <code>Member</code>.\nReturns <code>true</code> if <code>self</code> is of variant <code>MetaProp</code>.\nReturns <code>true</code> if <code>self</code> is of variant <code>Method</code>.\nReturns <code>true</code> if <code>self</code> is of variant <code>Method</code>.\nReturns <code>true</code> if <code>self</code> is of variant <code>Module</code>.\nReturns <code>true</code> if <code>self</code> is of variant <code>ModuleDecl</code>.\nReturns <code>true</code> if <code>self</code> is of variant <code>Named</code>.\nReturns <code>true</code> if <code>self</code> is of variant <code>Named</code>.\nReturns <code>true</code> if <code>self</code> is of variant <code>Namespace</code>.\nReturns <code>true</code> if <code>self</code> is of variant <code>Namespace</code>.\nReturns <code>true</code> if <code>self</code> is of variant <code>New</code>.\nReturns <code>true</code> if <code>self</code> is of variant <code>Num</code>.\nReturns <code>true</code> if <code>self</code> is of variant <code>Number</code>.\nReturns <code>true</code> if <code>self</code> is of variant <code>Object</code>.\nReturns <code>true</code> if <code>self</code> is of variant <code>Object</code>.\nReturns <code>true</code> if <code>self</code> is of variant <code>Object</code>.\nReturns <code>true</code> if <code>self</code> is of variant <code>Object</code>.\nReturns <code>true</code> if <code>self</code> is of variant <code>OptChain</code>.\nReturns <code>true</code> if <code>self</code> is of variant <code>OptChain</code>.\nReturns <code>true</code> if <code>self</code> is of variant <code>Param</code>.\nReturns <code>true</code> if <code>self</code> is of variant <code>Paren</code>.\nReturns <code>true</code> if <code>self</code> is of variant <code>Paren</code>.\nReturns <code>true</code> if <code>self</code> is of variant <code>Pat</code>.\nReturns <code>true</code> if <code>self</code> is of variant <code>Pat</code>.\nReturns <code>true</code> if <code>self</code> is of variant <code>Private</code>.\nReturns <code>true</code> if <code>self</code> is of variant <code>PrivateMethod</code>.\nReturns <code>true</code> if <code>self</code> is of variant <code>PrivateName</code>.\nReturns <code>true</code> if <code>self</code> is of variant <code>PrivateName</code>.\nReturns <code>true</code> if <code>self</code> is of variant <code>PrivateProp</code>.\nReturns <code>true</code> if <code>self</code> is of variant <code>Prop</code>.\nReturns <code>true</code> if <code>self</code> is of variant <code>Public</code>.\nReturns <code>true</code> if <code>self</code> is of variant <code>Rest</code>.\nReturns <code>true</code> if <code>self</code> is of variant <code>Rest</code>.\nReturns <code>true</code> if <code>self</code> is of variant <code>Rest</code>.\nReturns <code>true</code> if <code>self</code> is of variant <code>Return</code>.\nReturns <code>true</code> if <code>self</code> is of variant <code>Script</code>.\nReturns <code>true</code> if <code>self</code> is of variant <code>Seq</code>.\nReturns <code>true</code> if <code>self</code> is of variant <code>Setter</code>.\nReturns <code>true</code> if <code>self</code> is of variant <code>Shorthand</code>.\nReturns <code>true</code> if <code>self</code> is of variant <code>Simple</code>.\nReturns <code>true</code> if <code>self</code> is of variant <code>Spread</code>.\nReturns <code>true</code> if <code>self</code> is of variant <code>StaticBlock</code>.\nReturns <code>true</code> if <code>self</code> is of variant <code>Stmt</code>.\nReturns <code>true</code> if <code>self</code> is of variant <code>Str</code>.\nReturns <code>true</code> if <code>self</code> is of variant <code>Str</code>.\nReturns <code>true</code> if <code>self</code> is of variant <code>Str</code>.\nReturns <code>true</code> if <code>self</code> is of variant <code>Str</code>.\nReturns <code>true</code> if <code>self</code> is of variant <code>Super</code>.\nReturns <code>true</code> if <code>self</code> is of variant <code>SuperProp</code>.\nReturns <code>true</code> if <code>self</code> is of variant <code>SuperProp</code>.\nReturns <code>true</code> if <code>self</code> is of variant <code>Switch</code>.\nReturns <code>true</code> if <code>self</code> is of variant <code>TaggedTpl</code>.\nReturns <code>true</code> if <code>self</code> is of variant <code>This</code>.\nReturns <code>true</code> if <code>self</code> is of variant <code>Throw</code>.\nReturns <code>true</code> if <code>self</code> is of variant <code>Tpl</code>.\nReturns <code>true</code> if <code>self</code> is of variant <code>Tpl</code>.\nReturns <code>true</code> if <code>self</code> is of variant <code>Try</code>.\nReturns <code>true</code> if <code>self</code> is of variant <code>TsArrayType</code>.\nReturns <code>true</code> if <code>self</code> is of variant <code>TsAs</code>.\nReturns <code>true</code> if <code>self</code> is of variant <code>TsAs</code>.\nReturns <code>true</code> if <code>self</code> is of variant <code>TsCallSignatureDecl</code>.\nReturns <code>true</code> if <code>self</code> is of variant <code>TsConditionalType</code>.\nReturns <code>true</code> if <code>self</code> is of variant <code>TsConstAssertion</code>.\nReturns <code>true</code> if <code>self</code> is of variant <code>TsConstructSignatureDecl</code>…\nReturns <code>true</code> if <code>self</code> is of variant <code>TsConstructorType</code>.\nReturns <code>true</code> if <code>self</code> is of variant <code>TsEntityName</code>.\nReturns <code>true</code> if <code>self</code> is of variant <code>TsEntityName</code>.\nReturns <code>true</code> if <code>self</code> is of variant <code>TsEnum</code>.\nReturns <code>true</code> if <code>self</code> is of variant <code>TsExportAssignment</code>.\nReturns <code>true</code> if <code>self</code> is of variant <code>TsExternalModuleRef</code>.\nReturns <code>true</code> if <code>self</code> is of variant <code>TsFnOrConstructorType</code>.\nReturns <code>true</code> if <code>self</code> is of variant <code>TsFnType</code>.\nReturns <code>true</code> if <code>self</code> is of variant <code>TsGetterSignature</code>.\nReturns <code>true</code> if <code>self</code> is of variant <code>TsImportEquals</code>.\nReturns <code>true</code> if <code>self</code> is of variant <code>TsImportType</code>.\nReturns <code>true</code> if <code>self</code> is of variant <code>TsIndexSignature</code>.\nReturns <code>true</code> if <code>self</code> is of variant <code>TsIndexSignature</code>.\nReturns <code>true</code> if <code>self</code> is of variant <code>TsIndexedAccessType</code>.\nReturns <code>true</code> if <code>self</code> is of variant <code>TsInferType</code>.\nReturns <code>true</code> if <code>self</code> is of variant <code>TsInstantiation</code>.\nReturns <code>true</code> if <code>self</code> is of variant <code>TsInstantiation</code>.\nReturns <code>true</code> if <code>self</code> is of variant <code>TsInterface</code>.\nReturns <code>true</code> if <code>self</code> is of variant <code>TsInterfaceDecl</code>.\nReturns <code>true</code> if <code>self</code> is of variant <code>TsIntersectionType</code>.\nReturns <code>true</code> if <code>self</code> is of variant <code>TsKeywordType</code>.\nReturns <code>true</code> if <code>self</code> is of variant <code>TsLitType</code>.\nReturns <code>true</code> if <code>self</code> is of variant <code>TsMappedType</code>.\nReturns <code>true</code> if <code>self</code> is of variant <code>TsMethodSignature</code>.\nReturns <code>true</code> if <code>self</code> is of variant <code>TsModule</code>.\nReturns <code>true</code> if <code>self</code> is of variant <code>TsModuleBlock</code>.\nReturns <code>true</code> if <code>self</code> is of variant <code>TsNamespaceDecl</code>.\nReturns <code>true</code> if <code>self</code> is of variant <code>TsNamespaceExport</code>.\nReturns <code>true</code> if <code>self</code> is of variant <code>TsNonNull</code>.\nReturns <code>true</code> if <code>self</code> is of variant <code>TsNonNull</code>.\nReturns <code>true</code> if <code>self</code> is of variant <code>TsOptionalType</code>.\nReturns <code>true</code> if <code>self</code> is of variant <code>TsParamProp</code>.\nReturns <code>true</code> if <code>self</code> is of variant <code>TsParenthesizedType</code>.\nReturns <code>true</code> if <code>self</code> is of variant <code>TsPropertySignature</code>.\nReturns <code>true</code> if <code>self</code> is of variant <code>TsQualifiedName</code>.\nReturns <code>true</code> if <code>self</code> is of variant <code>TsRestType</code>.\nReturns <code>true</code> if <code>self</code> is of variant <code>TsSatisfies</code>.\nReturns <code>true</code> if <code>self</code> is of variant <code>TsSatisfies</code>.\nReturns <code>true</code> if <code>self</code> is of variant <code>TsSetterSignature</code>.\nReturns <code>true</code> if <code>self</code> is of variant <code>TsThisType</code>.\nReturns <code>true</code> if <code>self</code> is of variant <code>TsThisType</code>.\nReturns <code>true</code> if <code>self</code> is of variant <code>TsTupleType</code>.\nReturns <code>true</code> if <code>self</code> is of variant <code>TsTypeAlias</code>.\nReturns <code>true</code> if <code>self</code> is of variant <code>TsTypeAssertion</code>.\nReturns <code>true</code> if <code>self</code> is of variant <code>TsTypeAssertion</code>.\nReturns <code>true</code> if <code>self</code> is of variant <code>TsTypeLit</code>.\nReturns <code>true</code> if <code>self</code> is of variant <code>TsTypeOperator</code>.\nReturns <code>true</code> if <code>self</code> is of variant <code>TsTypePredicate</code>.\nReturns <code>true</code> if <code>self</code> is of variant <code>TsTypeQuery</code>.\nReturns <code>true</code> if <code>self</code> is of variant <code>TsTypeRef</code>.\nReturns <code>true</code> if <code>self</code> is of variant …\nReturns <code>true</code> if <code>self</code> is of variant <code>TsUnionType</code>.\n<code>type</code> in <code>export { type foo as bar }</code>\nReturns <code>true</code> if <code>self</code> is of variant <code>Unary</code>.\nReturns <code>true</code> if <code>self</code> is of variant <code>Update</code>.\nReturns <code>true</code> if <code>self</code> is of variant <code>Using</code>.\nReturns <code>true</code> if <code>self</code> is of variant <code>UsingDecl</code>.\nReturns true if <code>c</code> is a valid character for an identifier …\nReturns true if <code>c</code> is a valid character for an identifier …\nReturns <code>true</code> if <code>self</code> is of variant <code>Var</code>.\nReturns <code>true</code> if <code>self</code> is of variant <code>VarDecl</code>.\nReturns <code>true</code> if <code>self</code> is of variant <code>VarDecl</code>.\nReturns <code>true</code> if <code>self</code> is of variant <code>While</code>.\nReturns <code>true</code> if <code>self</code> is of variant <code>With</code>.\nReturns <code>true</code> if <code>self</code> is of variant <code>Yield</code>.\nYield a set of contained flags values.\nYield a set of contained named flags values.\nReturns <code>Some</code> if <code>self</code> is of variant <code>JSXElement</code>, and <code>None</code> …\nReturns <code>Some</code> if <code>self</code> is of variant <code>JSXEmpty</code>, and <code>None</code> …\nReturns <code>Some</code> if <code>self</code> is of variant <code>JSXFragment</code>, and <code>None</code> …\nReturns <code>Some</code> if <code>self</code> is of variant <code>JSXMember</code>, and <code>None</code> …\nReturns <code>Some</code> if <code>self</code> is of variant <code>JSXMemberExpr</code>, and <code>None</code> …\nReturns <code>Some</code> if <code>self</code> is of variant <code>JSXNamespacedName</code>, and …\nNote: This type is to help implementing visitor and the …\nReturns <code>Some</code> if <code>self</code> is of variant <code>KeyValue</code>, and <code>None</code> …\nReturns <code>Some</code> if <code>self</code> is of variant <code>KeyValue</code>, and <code>None</code> …\nThe archived counterpart of <code>MetaPropExpr::kind</code>\n<code>Ident</code> or <code>RestPat { arg: Ident }</code>\nReturns <code>Some</code> if <code>self</code> is of variant <code>Labeled</code>, and <code>None</code> …\nThe archived counterpart of <code>BinExpr::left</code>\nThe archived counterpart of <code>AssignExpr::left</code>\nReturns <code>Some</code> if <code>self</code> is of variant <code>Lit</code>, and <code>None</code> otherwise.\nReturns <code>Some</code> if <code>self</code> is of variant <code>Member</code>, and <code>None</code> …\nReturns <code>Some</code> if <code>self</code> is of variant <code>Member</code>, and <code>None</code> …\nReturns <code>Some</code> if <code>self</code> is of variant <code>Member</code>, and <code>None</code> …\nReturns <code>Some</code> if <code>self</code> is of variant <code>MetaProp</code>, and <code>None</code> …\nReturns <code>Some</code> if <code>self</code> is of variant <code>Method</code>, and <code>None</code> …\nReturns <code>Some</code> if <code>self</code> is of variant <code>Method</code>, and <code>None</code> …\nReturns <code>Some</code> if <code>self</code> is of variant <code>Module</code>, and <code>None</code> …\nReturns <code>Some</code> if <code>self</code> is of variant <code>ModuleDecl</code>, and <code>None</code> …\nReturns <code>Some</code> if <code>self</code> is of variant <code>Named</code>, and <code>None</code> …\nReturns <code>Some</code> if <code>self</code> is of variant <code>Named</code>, and <code>None</code> …\nReturns <code>Some</code> if <code>self</code> is of variant <code>Namespace</code>, and <code>None</code> …\nReturns <code>Some</code> if <code>self</code> is of variant <code>Namespace</code>, and <code>None</code> …\nReturns <code>Some</code> if <code>self</code> is of variant <code>New</code>, and <code>None</code> otherwise.\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nReturns <code>Some</code> if <code>self</code> is of variant <code>Num</code>, and <code>None</code> otherwise.\nReturns <code>Some</code> if <code>self</code> is of variant <code>Number</code>, and <code>None</code> …\nThe archived counterpart of <code>MemberExpr::obj</code>\nThe archived counterpart of <code>SuperPropExpr::obj</code>\nReturns <code>Some</code> if <code>self</code> is of variant <code>Object</code>, and <code>None</code> …\nReturns <code>Some</code> if <code>self</code> is of variant <code>Object</code>, and <code>None</code> …\nReturns <code>Some</code> if <code>self</code> is of variant <code>Object</code>, and <code>None</code> …\nReturns <code>Some</code> if <code>self</code> is of variant <code>Object</code>, and <code>None</code> …\nThe archived counterpart of <code>UnaryExpr::op</code>\nThe archived counterpart of <code>UpdateExpr::op</code>\nThe archived counterpart of <code>BinExpr::op</code>\nThe archived counterpart of <code>AssignExpr::op</code>\nCreates a corresponding operator. This macro is used to …\nReturns <code>Some</code> if <code>self</code> is of variant <code>OptChain</code>, and <code>None</code> …\nReturns <code>Some</code> if <code>self</code> is of variant <code>OptChain</code>, and <code>None</code> …\nThe archived counterpart of <code>OptChainExpr::optional</code>\nTypeScript only. Used in case of an optional parameter.\nOnly in an ambient context\nOnly in an ambient context\n<code>foo</code> in <code>export { foo as bar }</code>\nReturns <code>Some</code> if <code>self</code> is of variant <code>Param</code>, and <code>None</code> …\nes2019\nThe archived counterpart of <code>ArrowExpr::params</code>\nReturns <code>Some</code> if <code>self</code> is of variant <code>Paren</code>, and <code>None</code> …\nReturns <code>Some</code> if <code>self</code> is of variant <code>Paren</code>, and <code>None</code> …\nReturns <code>Some</code> if <code>self</code> is of variant <code>Pat</code>, and <code>None</code> otherwise.\nReturns <code>Some</code> if <code>self</code> is of variant <code>Pat</code>, and <code>None</code> otherwise.\nThe archived counterpart of <code>Import::phase</code>\nThe archived counterpart of <code>UpdateExpr::prefix</code>\nReturns <code>Some</code> if <code>self</code> is of variant <code>Private</code>, and <code>None</code> …\nReturns <code>Some</code> if <code>self</code> is of variant <code>PrivateMethod</code>, and <code>None</code> …\nReturns <code>Some</code> if <code>self</code> is of variant <code>PrivateName</code>, and <code>None</code> …\nReturns <code>Some</code> if <code>self</code> is of variant <code>PrivateName</code>, and <code>None</code> …\nReturns <code>Some</code> if <code>self</code> is of variant <code>PrivateProp</code>, and <code>None</code> …\nReturns <code>Some</code> if <code>self</code> is of variant <code>Prop</code>, and <code>None</code> …\nThe archived counterpart of <code>MemberExpr::prop</code>\nThe archived counterpart of <code>SuperPropExpr::prop</code>\nThe archived counterpart of <code>ObjectLit::props</code>\nReturns <code>Some</code> if <code>self</code> is of variant <code>Public</code>, and <code>None</code> …\nThe archived counterpart of <code>Tpl::quasis</code>\nThe archived counterpart of <code>TplElement::raw</code>\nYou may need to perform. …\nUse <code>None</code> value only for transformations to avoid …\nUse <code>None</code> value only for transformations to avoid …\nUse <code>None</code> value only for transformations to avoid …\nThe intersection of a source flags value with the …\nReturns <code>Some</code> if <code>self</code> is of variant <code>Rest</code>, and <code>None</code> …\nReturns <code>Some</code> if <code>self</code> is of variant <code>Rest</code>, and <code>None</code> …\nReturns <code>Some</code> if <code>self</code> is of variant <code>Rest</code>, and <code>None</code> …\nReturns <code>Some</code> if <code>self</code> is of variant <code>Return</code>, and <code>None</code> …\nThe archived counterpart of <code>ArrowExpr::return_type</code>\nThe archived counterpart of <code>BinExpr::right</code>\nThe archived counterpart of <code>AssignExpr::right</code>\nReturns <code>Some</code> if <code>self</code> is of variant <code>Script</code>, and <code>None</code> …\nReturns <code>Some</code> if <code>self</code> is of variant <code>Seq</code>, and <code>None</code> otherwise.\nCall <code>insert</code> when <code>value</code> is <code>true</code> or <code>remove</code> when <code>value</code> is …\nNote\nReturns <code>Some</code> if <code>self</code> is of variant <code>Setter</code>, and <code>None</code> …\nReturns <code>Some</code> if <code>self</code> is of variant <code>Shorthand</code>, and <code>None</code> …\nReturns <code>Some</code> if <code>self</code> is of variant <code>Simple</code>, and <code>None</code> …\nThe archived counterpart of <code>ThisExpr::span</code>\nThe archived counterpart of <code>ArrayLit::span</code>\nThe archived counterpart of <code>ObjectLit::span</code>\nThe archived counterpart of <code>UnaryExpr::span</code>\nThe archived counterpart of <code>UpdateExpr::span</code>\nThe archived counterpart of <code>BinExpr::span</code>\nThe archived counterpart of <code>AssignExpr::span</code>\nThe archived counterpart of <code>MemberExpr::span</code>\nThe archived counterpart of <code>SuperPropExpr::span</code>\nThe archived counterpart of <code>CondExpr::span</code>\nThe archived counterpart of <code>CallExpr::span</code>\nThe archived counterpart of <code>NewExpr::span</code>\nThe archived counterpart of <code>SeqExpr::span</code>\nThe archived counterpart of <code>ArrowExpr::span</code>\nThe archived counterpart of <code>YieldExpr::span</code>\nThe archived counterpart of <code>MetaPropExpr::span</code>\nThe archived counterpart of <code>AwaitExpr::span</code>\nThe archived counterpart of <code>Tpl::span</code>\nThe archived counterpart of <code>TaggedTpl::span</code>\nThe archived counterpart of <code>TplElement::span</code>\nThe archived counterpart of <code>ParenExpr::span</code>\nThe archived counterpart of <code>Super::span</code>\nThe archived counterpart of <code>Import::span</code>\nThe archived counterpart of <code>OptChainExpr::span</code>\nThe archived counterpart of <code>OptCall::span</code>\nSpan including <code>[</code> and <code>]</code>.\nSpan including the braces.\nSpan of semicolon.\nThe archived counterpart of <code>Invalid::span</code>\nReturns <code>Some</code> if <code>self</code> is of variant <code>Spread</code>, and <code>None</code> …\nThe archived counterpart of <code>ExprOrSpread::spread</code>\nReturns <code>Some</code> if <code>self</code> is of variant <code>StaticBlock</code>, and <code>None</code> …\nReturns <code>Some</code> if <code>self</code> is of variant <code>Stmt</code>, and <code>None</code> …\nReturns <code>Some</code> if <code>self</code> is of variant <code>Str</code>, and <code>None</code> otherwise.\nReturns <code>Some</code> if <code>self</code> is of variant <code>Str</code>, and <code>None</code> otherwise.\nReturns <code>Some</code> if <code>self</code> is of variant <code>Str</code>, and <code>None</code> otherwise.\nReturns <code>Some</code> if <code>self</code> is of variant <code>Str</code>, and <code>None</code> otherwise.\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nReturns <code>Some</code> if <code>self</code> is of variant <code>Super</code>, and <code>None</code> …\nReturns <code>Some</code> if <code>self</code> is of variant <code>SuperProp</code>, and <code>None</code> …\nReturns <code>Some</code> if <code>self</code> is of variant <code>SuperProp</code>, and <code>None</code> …\nReturns <code>Some</code> if <code>self</code> is of variant <code>Switch</code>, and <code>None</code> …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe archived counterpart of <code>TaggedTpl::tag</code>\nReturns <code>Some</code> if <code>self</code> is of variant <code>TaggedTpl</code>, and <code>None</code> …\nThe archived counterpart of <code>TplElement::tail</code>")