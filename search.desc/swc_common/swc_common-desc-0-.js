searchState.loadedDescShard("swc_common", 0, "Utilities for the swc project\nCommand line\nA trait for ast nodes.\nA byte offset. Keep this small (currently 32-bits), as AST …\nA character offset. Because of multibyte utf8 characters, …\nCustom sources for explicit parser calls from plugins and …\nDummy span, both position and length are zero, syntax …\nDerives <code>serde::Deserialize</code> which is aware of <code>tag</code> based …\nDerive with <code>#[derive(EqIgnoreSpan)]</code>.\nDerives <code>swc_common::EqIgnoreSpan</code>.\nDerives [<code>From</code>] for all variants. This only supports an …\nStorage for span hygiene data.\nUsed to create a <code>.map</code> file.\nA source code location used for error reporting Note: This …\nA source code location used as the result of …\nHack in src/libsyntax/parse.rs\nA macro. This includes the full name of the macro, so that …\nA mark is a unique id associated with a macro expansion.\nA collection of spans. Spans have two orthogonal …\ncall to <code>quote!</code>\nA single source in the SourceMap.\nSpans represent a region of code, used for error …\nDerive\nDerives [<code>swc_common::Spanned</code>]. See [<code>swc_common::Spanned</code>] …\nA SyntaxContext represents a chain of macro expansions …\nDerive with <code>#[derive(TypeEq)]</code>.\nDerives <code>swc_common::TypeEq</code>.\nAlias for <code>#[derive(Spanned, Fold, Clone, Debug, PartialEq)]</code>…\nDerives <code>serde::Serialize</code> and <code>serde::Deserialize</code>.\nChains multiple visitor.\nThe (0-based) column offset\nUTF-16 column in line, starting from 0.\nThe (0-based) column offset when displayed\nIndicates which crate this <code>SourceFile</code> was imported from.\nInformation about where the macro came from, if this piece …\nThe end position of this source in the <code>SourceMap</code>\nInformation about the original source\nMachinery for hygienic macros, inspired by the <code>MTWT[1]</code> …\nThe (1-based) line number\nIndex of line, starting from 0.\nLocations of lines beginnings in the source code\nLocations of multi-byte characters in the source code\nThe name of the file that the source came from. Source …\nA hash of the filename, used for speeding up the incr. …\nTrue if the <code>name</code> field above has been modified by …\nWidth of characters that are not narrow in the source code\nThis module reexports items from <code>swc_visit</code> with some …\nThe SourceMap tracks all the source code used within a …\nGet span of <code>self</code>.\nThe complete source code\nThe source code’s hash\nThe start position of this source in the <code>SourceMap</code>\nThis module defines types which are thread safe if …\n<strong>Note</strong>: This method should return <code>true</code> for non-type values.\nThe unmapped path of the file that the source came from. …\nAn archived <code>Comment</code>\nAn archived <code>CommentKind</code>\nThe resolver for <code>CommentKind::Block</code>\nThe archived counterpart of <code>CommentKind::Block</code>\nThe resolver for an archived <code>CommentKind</code>\nThe resolver for an archived <code>Comment</code>\nStores comment.\nThe resolver for <code>CommentKind::Line</code>\nThe archived counterpart of <code>CommentKind::Line</code>\nImplementation of Comments which does not store any …\nSingle-threaded storage for comments.\nBorrows all the comments as (leading, trailing).\nBorrows all the comments as (leading, trailing).\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCreates a new <code>SingleThreadedComments</code> from the provided …\nThis method is used to check if a comment with the given …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nThe archived counterpart of <code>Comment::kind</code>\nThe archived counterpart of <code>Comment::span</code>\nTakes all the comments as (leading, trailing).\nThe archived counterpart of <code>Comment::text</code>\n[<code>Atom::new_bad</code>][] is perfectly fine for this value.\nThe resolver for an archived <code>Applicability</code>\nAn archived <code>Applicability</code>\nAn archived <code>CodeSuggestion</code>\nAn archived <code>Level</code>\nAn archived <code>Substitution</code>\nAn archived <code>SubstitutionPart</code>\nThe resolver for <code>Level::Bug</code>\nThe archived counterpart of <code>Level::Bug</code>\nThe resolver for <code>Level::Cancelled</code>\nThe archived counterpart of <code>Level::Cancelled</code>\nThe resolver for an archived <code>CodeSuggestion</code>\nUsed for emitting structured error messages and other …\nThe resolver for <code>Level::Error</code>\nThe archived counterpart of <code>Level::Error</code>\nSignifies that the compiler died with an explicit call to …\nThe resolver for <code>Level::FailureNote</code>\nThe archived counterpart of <code>Level::FailureNote</code>\nThe resolver for <code>Level::Fatal</code>\nThe archived counterpart of <code>Level::Fatal</code>\nUsed as a return value to signify a fatal error occurred. …\nUsed for error reporting in transform.\nA handler deals with errors; certain errors (fatal, bug, …\nThe resolver for <code>Applicability::HasPlaceholders</code>\nThe archived counterpart of <code>Applicability::HasPlaceholders</code>\nThe resolver for <code>Level::Help</code>\nThe archived counterpart of <code>Level::Help</code>\nThe resolver for an archived <code>Level</code>\nThe resolver for <code>Applicability::MachineApplicable</code>\nThe archived counterpart of …\nThe resolver for <code>Applicability::MaybeIncorrect</code>\nThe archived counterpart of <code>Applicability::MaybeIncorrect</code>\nThe resolver for <code>Level::Note</code>\nThe archived counterpart of <code>Level::Note</code>\nThe resolver for <code>Level::PhaseFatal</code>\nThe archived counterpart of <code>Level::PhaseFatal</code>\nFor example a note attached to an error.\nSee the docs on <code>CodeSuggestion::substitutions</code>\nThe resolver for an archived <code>SubstitutionPart</code>\nThe resolver for an archived <code>Substitution</code>\nThe resolver for <code>Applicability::Unspecified</code>\nThe archived counterpart of <code>Applicability::Unspecified</code>\nThe resolver for <code>Level::Warning</code>\nThe archived counterpart of <code>Level::Warning</code>\nThe archived counterpart of <code>CodeSuggestion::applicability</code>\nWhether or not the suggestion is approximate\nBuffers the diagnostic for later emission, unless handler …\nIf false, warning-level lints are suppressed. (rustc: see …\nCancel the diagnostic (a structured diagnostic must either …\nUsed by a lint. Copies over all details <em>but</em> the “main …\nDelay emission of this diagnostic as a bug.\nIf true, immediately emit diagnostics that would otherwise …\nEmit the diagnostic.\nshow macro backtraces even for non-local macros. (rustc: …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nThe archived counterpart of <code>CodeSuggestion::msg</code>\n<code>true</code> if we haven’t taught a diagnostic with this code …\nConvenience function for internal use, clients should use …\nCreates a new <code>DiagnosticBuilder</code> with an already constructed\nConvenience function for internal use, clients should use …\nThe archived counterpart of <code>Substitution::parts</code>\nIf true, immediately print bugs registered with …\nResets the diagnostic error count as well as the cached …\nThe archived counterpart of …\nThe archived counterpart of <code>SubstitutionPart::snippet</code>\nThe archived counterpart of <code>SubstitutionPart::span</code>\nAdd a span/label to be included in the resulting snippet. …\nAdd a span/label to be included in the resulting snippet. …\nPrints out a message with a suggested edit of the code.\nPrints out a message with a suggested edit of the code. If …\nThis is a suggestion that may contain mistakes or fillers …\nPrints out a message with multiple suggested edits of the …\nReturns the assembled code suggestions and whether they …\nConvenience function for internal use, clients should use …\nConvenience function for internal use, clients should use …\nThe archived counterpart of <code>CodeSuggestion::substitutions</code>\nEach substitute can have multiple variants due to multiple …\nIf true, error-level diagnostics are upgraded to bug-level.\nExample implementation of Emitter is EmitterWriter\nCalls Self::with_emitter with EmitterWriter.\nEmitter trait for emitting errors.\nImplementation of Emitter which pretty-prints the errors.\nmaximum number of lines we will print for each error; …\nmaximum number of suggestions to be shown\nEmit a structured diagnostic.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCheck if should show explanations about “rustc –explain…\nAn archived <code>MutableMarkContext</code>\nAn archived <code>SyntaxContext</code>\nA mark is a unique id associated with a macro expansion.\nThe resolver for an archived <code>MutableMarkContext</code>\nA SyntaxContext represents a chain of macro expansions …\nThe resolver for an archived <code>SyntaxContext</code>\nAdjust this context for resolution in a scope created by …\nExtend a syntax context with a given mark and default …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nAdjust this context for resolution in a scope created by …\nReturns <code>true</code> if <code>self</code> is marked with <code>mark</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nComputes a mark such that both input marks are descendants …\nShortcut for <code>Mark::fresh(Mark::root())</code>\nPulls a single mark off of the syntax context. This …\nUndo <code>glob_adjust</code> if possible:\nThe mark of the theoretical expansion that generates …\nImplementation of Input.\nSafety\nReturns None if it’s end of input <strong>or</strong> current character …\nTODO(kdy1): Remove this?\nImplementors can override the method to make it faster.\nThis method modifies [last_pos()] and [cur_pos()].\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nImplementors can override the method to make it faster.\nImplementors can override the method to make it faster.\n<code>start</code> and <code>end</code> can be arbitrary value, but start should be …\nSafety\nSafety\nTakes items from stream, testing each one with predicate. …\nCopied from …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nVisit all children nodes. This converts <code>VisitAll</code> to <code>Visit</code>. …\nA visitor which applies <code>A</code> and then <code>B</code>.\nA named compiler pass.\nThe enum <code>Either</code> with variants <code>Left</code> and <code>Right</code> is a general …\nA value of type <code>L</code>.\nA visitor which visits node only if <code>enabled</code> is true.\nA visitor which applies <code>V</code> again and again if <code>V</code> modifies …\nTrait for a pass which is designed to invoked multiple …\nA value of type <code>R</code>.\nConvert <code>&amp;mut Either&lt;L, R&gt;</code> to <code>Either&lt;&amp;mut L, &amp;mut R&gt;</code>.\nConvert <code>Pin&lt;&amp;mut Either&lt;L, R&gt;&gt;</code> to …\nConvert <code>Pin&lt;&amp;Either&lt;L, R&gt;&gt;</code> to <code>Either&lt;Pin&lt;&amp;L&gt;, Pin&lt;&amp;R&gt;&gt;</code>, …\nConvert <code>&amp;Either&lt;L, R&gt;</code> to <code>Either&lt;&amp;L, &amp;R&gt;</code>.\nChains multiple visitor.\nShould run again?\nThis creates <code>Visit</code>. This is extensible visitor generator, …\nApply one of two functions depending on contents, unifying …\nConvert the contained value into <code>T</code>\nLike <code>either</code>, but provide some context to whichever of the …\nReturns the left value\nReturns the right value\nFactors out a homogenous type from an <code>Either</code> of <code>Result</code>.\nFactor out a homogeneous type from an either of pairs.\nConverts an <code>Either</code> of <code>Iterator</code>s to be an <code>Iterator</code> of <code>Either</code>…\nBorrows an <code>Either</code> of <code>Iterator</code>s to be an <code>Iterator</code> of <code>Either</code>s\nMutably borrows an <code>Either</code> of <code>Iterator</code>s to be an <code>Iterator</code> …\nFactors out <code>None</code> from an <code>Either</code> of <code>Option</code>.\nFactors out a homogenous type from an <code>Either</code> of <code>Result</code>.\nFactor out a homogeneous type from an either of pairs.\nConvert <code>Either&lt;L, R&gt;</code> to <code>Either&lt;R, L&gt;</code>.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nExtract the value of an either over two equivalent types.\nConvert the inner value to an iterator.\nReturn true if the value is the <code>Left</code> variant.\nReturn true if the value is the <code>Right</code> variant.\nBorrow the inner value as an iterator.\nMutably borrow the inner value as an iterator.\nConvert the left side of <code>Either&lt;L, R&gt;</code> to an <code>Option&lt;L&gt;</code>.\nApply the function <code>f</code> on the value in the <code>Left</code> variant if …\nReturn left value or given value\nReturn left or a default\nReturns left value or computes it from a closure\nMap <code>f</code> over the contained value and return the result in the\nApply the functions <code>f</code> and <code>g</code> to the <code>Left</code> and <code>Right</code> variants …\nSimilar to <code>map_either</code>, with an added context <code>ctx</code> …\nApply the function <code>f</code> on the value in the <code>Left</code> variant if …\nApply the function <code>f</code> on the value in the <code>Right</code> variant if …\nname should follow hyphen-case.an implementation should …\nReset.\nConvert the right side of <code>Either&lt;L, R&gt;</code> to an <code>Option&lt;R&gt;</code>.\nApply the function <code>f</code> on the value in the <code>Right</code> variant if …\nReturn right value or given value\nReturn right or a default\nReturns right value or computes it from a closure\nReturns the left value\nReturns the right value\nSome utilities for generated visitors.\nCopied from <code>syntax::ptr::P</code> of rustc.\nTransform the inner value, consuming <code>self</code> and producing a …\nModifiers vector in-place.\nThis will be very slow if you try to extend vector using …\nMap in place.\nCompile-time version constant for the AST struct schema’…\nAn archived <code>PluginCorePkgDiagnostics</code>\nA serializable, wrapped struct for the diagnostics …\nThe resolver for an archived <code>PluginCorePkgDiagnostics</code>\nThe archived counterpart of …\nThe archived counterpart of …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nThe archived counterpart of …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nThe archived counterpart of …\nHost side metadata context plugin may need to access. This …\nIndexable key to the metadata context for a transform …\nThe current working directory.\nThe current environment resolved as process.env.SWC_ENV || …\nThe path of the file being processed. This includes all of …\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nAn archived <code>PluginError</code>\nAn archived <code>VersionedSerializable</code>\nThe resolver for <code>PluginError::Deserialize</code>\nThe archived counterpart of <code>PluginError::Deserialize</code>\nOccurs when failed to reconstruct a struct from <code>Serialized</code>.\nEnum for possible errors while running transform via …\nThe resolver for an archived <code>PluginError</code>\nWraps internal representation of serialized data for …\nThe resolver for <code>PluginError::Serialize</code>\nThe archived counterpart of <code>PluginError::Serialize</code>\nOccurs when failed to serialize a struct into <code>Serialized</code>. …\nThe resolver for <code>PluginError::SizeInteropFailure</code>\nThe archived counterpart of <code>PluginError::SizeInteropFailure</code>\nOccurs when failed to convert size passed from host / …\nA wrapper type for the structures to be passed into plugins\nThe resolver for an archived <code>VersionedSerializable</code>\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nConstructs an instance from already serialized byteslices.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nConstructs an instance from versioned struct by …\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nThe resolver for <code>FileName::Anon</code>\nThe archived counterpart of <code>FileName::Anon</code>\nCommand line\nAn archived <code>BytePos</code>\nAn archived <code>CharPos</code>\nAn archived <code>DistinctSources</code>\nAn archived <code>FileName</code>\nAn archived <code>FilePos</code>\nAn archived <code>LineInfo</code>\nAn archived <code>MalformedSourceMapPositions</code>\nAn archived <code>MultiByteChar</code>\nAn archived <code>MultiSpan</code>\nAn archived <code>NonNarrowChar</code>\nAn archived <code>PartialFileLines</code>\nAn archived <code>PartialLoc</code>\nAn archived <code>PrimarySpanLabel</code>\nAn archived <code>SourceFile</code>\nAn archived <code>SourceFileAndBytePos</code>\nAn archived <code>SourceMapLookupError</code>\nAn archived <code>Span</code>\nAn archived <code>SpanLinesError</code>\nAn archived <code>SpanSnippetError</code>\nA byte offset. Keep this small (currently 32-bits), as AST …\nThe resolver for an archived <code>BytePos</code>\nStores the state of the last conversion between BytePos …\nA character offset. Because of multibyte utf8 characters, …\nThe resolver for an archived <code>CharPos</code>\nThe resolver for <code>FileName::Custom</code>\nThe archived counterpart of <code>FileName::Custom</code>\nCustom sources for explicit parser calls from plugins and …\nDummy position. This is reserved for synthesized spans.\nDummy span, both position and length are zero, syntax …\nThe resolver for <code>SpanLinesError::DistinctSources</code>\nThe archived counterpart of <code>SpanLinesError::DistinctSources</code>\nThe resolver for <code>SpanSnippetError::DistinctSources</code>\nThe archived counterpart of …\nThe resolver for an archived <code>DistinctSources</code>\nThe resolver for <code>SpanSnippetError::DummyBytePos</code>\nThe archived counterpart of <code>SpanSnippetError::DummyBytePos</code>\nA wrapper that attempts to convert a type to and from …\nA wrapper that attempts to convert a Url to and from …\nContains the error value\nContains the error value\nNote: This struct intentionally does not implement rkyv’…\nAn abstraction over the fs operations used by the Parser.\nThe resolver for an archived <code>FileName</code>\nThe resolver for an archived <code>FilePos</code>\nStorage for span hygiene data.\nThe resolver for <code>SpanLinesError::IllFormedSpan</code>\nThe archived counterpart of <code>SpanLinesError::IllFormedSpan</code>\nThe resolver for <code>SpanSnippetError::IllFormedSpan</code>\nThe archived counterpart of <code>SpanSnippetError::IllFormedSpan</code>\nThe resolver for <code>FileName::Internal</code>\nThe archived counterpart of <code>FileName::Internal</code>\nUsed to create a <code>.map</code> file.\nThe resolver for an archived <code>LineInfo</code>\nA source code location used for error reporting Note: This …\nA source code location used as the result of …\nThe resolver for <code>SpanSnippetError::LookupFailed</code>\nThe archived counterpart of <code>SpanSnippetError::LookupFailed</code>\nThe resolver for <code>FileName::MacroExpansion</code>\nThe archived counterpart of <code>FileName::MacroExpansion</code>\nHack in src/libsyntax/parse.rs\nThe resolver for <code>FileName::Macros</code>\nThe archived counterpart of <code>FileName::Macros</code>\nA macro. This includes the full name of the macro, so that …\nThe resolver for <code>SpanSnippetError::MalformedForSourcemap</code>\nThe archived counterpart of …\nThe resolver for an archived <code>MalformedSourceMapPositions</code>\nA mark is a unique id associated with a macro expansion.\nIdentifies an offset of a multi-byte character in a …\nThe resolver for an archived <code>MultiByteChar</code>\nA collection of spans. Spans have two orthogonal …\nThe resolver for an archived <code>MultiSpan</code>\nThe resolver for <code>SourceMapLookupError::NoFileFor</code>\nThe archived counterpart of <code>SourceMapLookupError::NoFileFor</code>\nIdentifies an offset of a non-narrow character in a …\nThe resolver for an archived <code>NonNarrowChar</code>\nContains the success value\nContains the success value\nA struct to exchange <code>FileLines</code> with omitting SourceFile as …\nThe resolver for an archived <code>PartialFileLines</code>\nA struct to exchange <code>Loc</code> with omitting SourceFile as …\nThe resolver for an archived <code>PartialLoc</code>\nThe resolver for an archived <code>PrimarySpanLabel</code>\nThe resolver for <code>FileName::ProcMacroSourceCode</code>\nThe archived counterpart of <code>FileName::ProcMacroSourceCode</code>\nThe resolver for <code>FileName::QuoteExpansion</code>\nThe archived counterpart of <code>FileName::QuoteExpansion</code>\ncall to <code>quote!</code>\nThe resolver for <code>FileName::Real</code>\nThe archived counterpart of <code>FileName::Real</code>\nA FileLoader that uses std::fs to load real files.\nSynthesized, but should be stored in a source map.\nA single source in the SourceMap.\nThe resolver for an archived <code>SourceFileAndBytePos</code>\nThe resolver for an archived <code>SourceFile</code>\nThe interner for spans.\nAn error type for looking up source maps.\nThe resolver for an archived <code>SourceMapLookupError</code>\nThe resolver for <code>SpanSnippetError::SourceNotAvailable</code>\nThe archived counterpart of …\nSpans represent a region of code, used for error …\nThe resolver for an archived <code>SpanLinesError</code>\nThe resolver for an archived <code>Span</code>\nThe resolver for an archived <code>SpanSnippetError</code>\nA SyntaxContext represents a chain of macro expansions …\nThe resolver for <code>NonNarrowChar::Tab</code>\nThe archived counterpart of <code>NonNarrowChar::Tab</code>\nRepresents a tab character, represented visually with a …\nThe resolver for <code>FileName::Url</code>\nThe archived counterpart of <code>FileName::Url</code>\nThe resolver for <code>NonNarrowChar::Wide</code>\nThe archived counterpart of <code>NonNarrowChar::Wide</code>\nRepresents a wide (fullwidth) character\nThe resolver for <code>NonNarrowChar::ZeroWidth</code>\nThe archived counterpart of <code>NonNarrowChar::ZeroWidth</code>\nRepresents a zero-width character\nReturn an absolute path to a file, if possible.\nThe archived counterpart of <code>DistinctSources::begin</code>\nThe archived counterpart of …\nReturn a <code>Span</code> between the end of <code>self</code> to the beginning of …\nCreates a <code>.map</code> file.\nComputes the extra number of UTF-8 bytes necessary to …\nThe archived counterpart of <code>MultiByteChar::bytes</code>\nThe number of bytes, &gt;=2\nReturns `true`` if this is explicitly synthesized or has …\nThe (0-based) column offset\nThe archived counterpart of <code>PartialLoc::col</code>\nUTF-16 column in line, starting from 0.\nThe (0-based) column offset when displayed\nThe archived counterpart of <code>PartialLoc::col_display</code>\nReturn true if <code>self</code> fully encloses <code>other</code>.\nThe archived counterpart of <code>SourceFile::crate_of_origin</code>\nIndicates which crate this <code>SourceFile</code> was imported from.\nThe archived counterpart of <code>Span::ctxt</code>\nInformation about where the macro came from, if this piece …\nDummy span, both position are extremely large numbers so …\nYou can define whether to emit sourcemap with columns or …\nThe archived counterpart of <code>DistinctSources::end</code>\nThe archived counterpart of <code>LineInfo::end_col</code>\nColumn in line where span ends, starting from 0, exclusive.\nReturns a new span representing just the end-point of this …\nThe archived counterpart of <code>SourceFile::end_pos</code>\nThe end position of this source in the <code>SourceMap</code>\nThe archived counterpart of …\nAlways returns true\nInformation about the original source\nThe archived counterpart of <code>PartialFileLines::file</code>\nQuery the existence of a file.\nReturns\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nTake the span of a type parameter in a function signature …\nGet a line from the list of pre-computed line-beginnings. …\nReturns <code>true</code> if <code>self</code> is marked with <code>mark</code>.\nThe archived counterpart of <code>Span::hi</code>\nMachinery for hygienic macros, inspired by the <code>MTWT[1]</code> …\nYou can override this to control <code>sourceContents</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns <code>true</code> if this is a dummy span with any hygienic …\nReturns <code>true</code> if this contains only a dummy primary span …\nReturns `true`` if this is synthesized and has no relevant …\nReturns <code>true</code> if this is a dummy span with any hygienic …\nIs this a primary span? This is the “locus” of the …\nWhat label should we attach to this span (if any)?\nThe (1-based) line number\nThe archived counterpart of <code>PartialLoc::line</code>\nIndex of line, starting from 0.\nReturn the BytePos of the beginning of the current line.\nThe archived counterpart of <code>LineInfo::line_index</code>\nIndex of line, starting from 0.\nThe archived counterpart of <code>SourceFile::lines</code>\nLocations of lines beginnings in the source code\nThe archived counterpart of <code>PartialFileLines::lines</code>\nThe archived counterpart of <code>Span::lo</code>\nFor a global BytePos compute the local offset within the …\nLookup source information about a BytePos\nIf the relevant source_file is empty, we don’t return a …\nFind the line containing the given position. The return …\nApplies any path prefix substitution as defined by the …\nReturns <code>Some(span)</code>, a union of the lhs and rhs span.  The …\nThe archived counterpart of <code>SourceFile::multibyte_chars</code>\nLocations of multi-byte characters in the source code\nThe archived counterpart of <code>SourceFile::name</code>\nThe name of the file that the source came from. Source …\nThe archived counterpart of …\nReturns identifier starting at <code>bpos</code>.\nThe archived counterpart of <code>SourceFile::name_hash</code>\nA hash of the filename, used for speeding up the incr. …\nThe archived counterpart of <code>SourceFile::name_was_remapped</code>\nTrue if the <code>name</code> field above has been modified by …\n<code>src</code> should not have UTF8 BOM\nCreates a new source_file. This does not ensure that only …\nCreates a new source_file. This does not ensure that only …\nReturns a new span representing the next character after …\nThe archived counterpart of <code>SourceFile::non_narrow_chars</code>\nWidth of characters that are not narrow in the source code\nReturns the absolute offset of the character in the …\nThe archived counterpart of <code>MultiByteChar::pos</code>\nThe absolute offset of the character in the SourceMap\nThe archived counterpart of <code>SourceFileAndBytePos::pos</code>\nSelects the first primary span (if any)\nReturns all primary spans.\nRead the contents of an UTF-8 file into memory.\nReplaces all occurrences of one Span with another. Used to …\nThe archived counterpart of <code>SourceFileAndBytePos::sf</code>\nReturns a new span representing an empty span at the end …\nReturns a new span representing an empty span at the …\nBy default, we skip internal files.\nReturn true if the spans are equal with regards to the …\nThe archived counterpart of <code>PartialLoc::source_file</code>\nThe archived counterpart of …\nCreates a new single-byte span.\nThe span we are going to include in the final snippet.\nExtend the given <code>Span</code> to just after the next occurrence of …\nExtend the given <code>Span</code> to just after the next occurrence of …\nExtend the given <code>Span</code> to just after the previous …\nExtend the given <code>Span</code> to just after the previous …\nReturns the strings to highlight. We always ensure that …\nGiven a <code>Span</code>, get a shorter one until <code>predicate</code> yields …\nGiven a <code>Span</code>, try to get a shorter span ending just after …\nConverts a span of absolute BytePos to a CharPos relative …\nReturn the source snippet as <code>String</code> after the given <code>Span</code>\nReturn the source snippet as <code>String</code> before the given <code>Span</code>\nReturn the source snippet as <code>String</code> corresponding to the …\nGiven a <code>Span</code>, try to get a shorter span ending before the …\nGiven a <code>Span</code>, get a new <code>Span</code> covering the first token and …\nGiven a <code>Span</code>, get a new <code>Span</code> covering the first token …\nThe archived counterpart of <code>SourceFile::src</code>\nThe complete source code\nThe archived counterpart of <code>SourceFile::src_hash</code>\nThe source code’s hash\nThe archived counterpart of <code>LineInfo::start_col</code>\nColumn in line where span begins, starting from 0.\nReturns a new span representing just the start-point of …\nThe archived counterpart of <code>SourceFile::start_pos</code>\nThe start position of this source in the <code>SourceMap</code>\nReturns <code>self</code> if <code>self</code> is not the dummy span, and <code>other</code> …\nReturn a <code>Span</code> that would enclose both <code>self</code> and <code>end</code>.\nReturns <code>Some(span)</code>, where the start is trimmed by the end …\nFor a global BytePos compute the local offset within the …\nLookup source information about a BytePos\nAlways returns true\nThe archived counterpart of <code>SourceFile::unmapped_path</code>\nThe unmapped path of the file that the source came from. …\nReturn a <code>Span</code> between the beginning of <code>self</code> to the …\nReturns the width of the character, 0 (zero-width) or 2 …\nCalls <code>op</code> with the source code located at <code>sp</code>.\nCalls the given closure with the source snippet after the …\nCalls the given closure with the source snippet before the …\nThe archived counterpart of …\nThe resolver for …\nAn archived <code>MutableMarkContext</code>\nAn archived <code>SyntaxContext</code>\nA mark is a unique id associated with a macro expansion.\nThe resolver for an archived <code>MutableMarkContext</code>\nA SyntaxContext represents a chain of macro expansions …\nThe resolver for an archived <code>SyntaxContext</code>\nA value which is initialized on the first access.\nAn RAII implementation of a “scoped lock” of a mutex. …\nA thread-safe reference-counting pointer. ‘Arc’ stands …\nAn RAII mutex guard returned by <code>MutexGuard::map</code>, which can …\nAn RAII read lock guard returned by <code>RwLockReadGuard::map</code>, …\nAn RAII write lock guard returned by <code>RwLockWriteGuard::map</code>…\nA thread-safe cell which can be written to only once.\nRAII structure used to release the shared read access of a …\nTypes that can be transferred across thread boundaries.\nTypes for which it is safe to share references between …\nRAII structure used to release the exclusive write access …\nReturns a reference to the underlying allocator.\nProvides a raw pointer to the data.\nConverts to <code>Arc&lt;[T]&gt;</code>.\nConverts to <code>Arc&lt;T&gt;</code>.\nMakes a clone of the <code>Arc</code> pointer.\nComparison for two <code>Arc</code>s.\nDecrements the strong reference count on the <code>Arc&lt;T&gt;</code> …\nDecrements the strong reference count on the <code>Arc&lt;T&gt;</code> …\nCreates a new lazy value using <code>Default</code> as the initializing …\nCreates a <code>LockCell&lt;T&gt;</code>, with the <code>Default</code> value for T.\nCreates a new <code>Arc&lt;T&gt;</code>, with the <code>Default</code> value for <code>T</code>.\nAttempt to downcast the <code>Arc&lt;dyn Any + Send + Sync&gt;</code> to a …\nDowncasts the <code>Arc&lt;dyn Any + Send + Sync&gt;</code> to a concrete …\nCreates a new <code>Weak</code> pointer to this allocation.\nDrops the <code>Arc</code>.\nEquality for two <code>Arc</code>s.\nForces the evaluation of this lazy value and returns a …\nForces the evaluation of this lazy value and returns a …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nConverts an <code>OsString</code> into an Arc&lt;OsStr&gt; by moving the …\nAllocate a reference-counted slice and move <code>v</code>’s items …\nAllocate a reference-counted <code>str</code> and copy <code>v</code> into it.\nConverts a <code>[T; N]</code> into an <code>Arc&lt;[T]&gt;</code>.\nConverts a <code>Path</code> into an <code>Arc</code> by copying the <code>Path</code> data into …\nConverts a <code>CString</code> into an Arc&lt;CStr&gt; by moving the <code>CString</code> …\nReturns the argument unchanged.\nConverts an atomically reference-counted string slice into …\nCreate an atomically reference-counted pointer from a …\nConverts a <code>&amp;CStr</code> into a <code>Arc&lt;CStr&gt;</code>, by copying the contents …\nMove a boxed object to a new, reference-counted allocation.\nAllocate a reference-counted <code>str</code> and copy <code>v</code> into it.\nConverts a <code>PathBuf</code> into an Arc&lt;Path&gt; by moving the <code>PathBuf</code> …\nCopies the string into a newly allocated Arc&lt;OsStr&gt;.\nConverts a <code>T</code> into an <code>Arc&lt;T&gt;</code>\nAllocate a reference-counted slice and fill it by cloning <code>v</code>…\nTakes each element in the <code>Iterator</code> and collects it into an …\nConstructs an <code>Arc&lt;T&gt;</code> from a raw pointer.\nConstructs an <code>Arc&lt;T, A&gt;</code> from a raw pointer.\n‘Greater than or equal to’ comparison for two <code>Arc</code>s.\nGets the reference to the underlying value.\nGets the reference to the result of this lazy value if it …\nGets the mutable reference to the underlying value.\nGets the reference to the result of this lazy value if it …\nReturns a mutable reference into the given <code>Arc</code>, if there …\nReturns a mutable reference into the given <code>Arc</code>, without …\nGets the contents of the cell, initializing it with <code>f</code> if …\nGets the contents of the cell, initializing it with <code>f</code> if …\nGet the reference to the underlying value, without …\nGreater-than comparison for two <code>Arc</code>s.\nIncrements the strong reference count on the <code>Arc&lt;T&gt;</code> …\nIncrements the strong reference count on the <code>Arc&lt;T&gt;</code> …\nSame as HashMap::insert, but it may panic if there’s …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nConsumes the <code>OnceCell</code>, returning the wrapped value. Returns\nReturns the inner value, if the <code>Arc</code> has exactly one strong …\nConsumes the <code>Arc</code>, returning the wrapped pointer.\nConsumes this <code>Lazy</code> returning the stored value.\n‘Less than or equal to’ comparison for two <code>Arc</code>s.\nLess-than comparison for two <code>Arc</code>s.\nMakes a mutable reference into the given <code>Arc</code>.\nInequality for two <code>Arc</code>s.\nCreates a new empty cell.\nCreates a new lazy value with the given initializing …\nConstructs a new <code>Arc&lt;T&gt;</code>.\nConstructs a new <code>Arc&lt;T&gt;</code> while giving you a <code>Weak&lt;T&gt;</code> to the …\nConstructs a new <code>Arc&lt;T&gt;</code> in the provided allocator.\nConstructs a new <code>Arc</code> with uninitialized contents.\nConstructs a new <code>Arc</code> with uninitialized contents in the …\nConstructs a new atomically reference-counted slice with …\nConstructs a new atomically reference-counted slice with …\nConstructs a new <code>Arc</code> with uninitialized contents, with the …\nConstructs a new <code>Arc</code> with uninitialized contents, with the …\nConstructs a new atomically reference-counted slice with …\nConstructs a new atomically reference-counted slice with …\nPartial comparison for two <code>Arc</code>s.\nConstructs a new <code>Pin&lt;Arc&lt;T&gt;&gt;</code>. If <code>T</code> does not implement <code>Unpin</code>…\nConstructs a new <code>Pin&lt;Arc&lt;T, A&gt;&gt;</code> in the provided allocator. …\nReturns <code>true</code> if the two <code>Arc</code>s point to the same allocation …\nSets the contents of this cell to <code>value</code>.\nGets the number of strong (<code>Arc</code>) pointers to this …\nTakes the value out of this <code>OnceCell</code>, moving it back to an …\nLike <code>set</code>, but also returns a reference to the final cell …\nConstructs a new <code>Arc&lt;T&gt;</code>, returning an error if allocation …\nConstructs a new <code>Arc&lt;T, A&gt;</code> in the provided allocator, …\nConstructs a new <code>Arc</code> with uninitialized contents, …\nConstructs a new <code>Arc</code> with uninitialized contents, in the …\nConstructs a new <code>Arc</code> with uninitialized contents, with the …\nConstructs a new <code>Arc</code> with uninitialized contents, with the …\nConstructs a new <code>Pin&lt;Arc&lt;T&gt;&gt;</code>, return an error if …\nConstructs a new <code>Pin&lt;Arc&lt;T, A&gt;&gt;</code> in the provided allocator, …\nReturns the inner value, if the <code>Arc</code> has exactly one strong …\nIf we have the only reference to <code>T</code> then unwrap it. …\nGets the reference to the underlying value, blocking the …\nGets the number of <code>Weak</code> pointers to this allocation.\nCreates a new initialized cell.\nCopied from https://stackoverflow.com/a/49456265/6193633\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nMoved Copied from <code>syntax::ptr::P</code> of rustc.\nTransform the inner value, consuming <code>self</code> and producing a …\nModifiers vector in-place.\nThis will be very slow if you try to extend vector using …\nMap in place.\nHelper for people who are working on <code>VisitMut</code>.\nCreate a dummy value of this type.\nMutate <code>self</code> using <code>op</code>, which accepts owned data.")