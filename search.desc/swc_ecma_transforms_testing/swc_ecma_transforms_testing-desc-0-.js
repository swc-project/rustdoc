searchState.loadedDescShard("swc_ecma_transforms_testing", 0, "Config for test_fixture. See test_fixture for …\nConverts <code>foo#1</code> to <code>foo__1</code> so it can be verified by the test.\nIf true, diagnostics written to HANDLER will be printed as …\nThis will be changed to SingleThreadedComments once …\nExecute <code>node</code> for <code>input</code> and ensure that it prints same …\nTest transformation by invoking it using <code>node</code>. The code …\nExecute <code>jest</code> after transpiling <code>input</code> using <code>tr</code>.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nJust like babel, walk up the directory tree and find a …\nIf true, source map will be printed to the <code>.map</code> file.\nTest transformation.\nYou can do <code>UPDATE=1 cargo test</code> to update fixtures.\nThese tests use <code>options.json</code>.\nThis takes a closure which returns a PassFactory. This is …\nSingleThreadedComments is cheap to clone.\nExecute using node.js\nExecute using node.js and mocha\nRun a fixture test\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.")