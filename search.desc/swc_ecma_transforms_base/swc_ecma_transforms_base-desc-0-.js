searchState.loadedDescShard("swc_ecma_transforms_base", 0, "See Ident for know how does swc manages identifiers.\nAlternative for https://babeljs.io/docs/en/assumptions\nhttps://babeljs.io/docs/en/assumptions#arraylikeisiterable\nhttps://babeljs.io/docs/en/assumptions#constantreexports\nhttps://babeljs.io/docs/en/assumptions#constantsuper\nhttps://babeljs.io/docs/en/assumptions#enumerablemodulemeta\nReturns the argument unchanged.\nhttps://babeljs.io/docs/en/assumptions#ignorefunctionlength\n…\nCalls <code>U::from(self)</code>.\nhttps://babeljs.io/docs/en/assumptions#iterableisarray\n…\nhttps://babeljs.io/docs/en/assumptions#noclasscalls\nhttps://babeljs.io/docs/en/assumptions#nodocumentall\n…\nhttps://babeljs.io/docs/en/assumptions#nonewarrows\nhttps://babeljs.io/docs/en/assumptions#objectrestnosymbols\n…\nhttps://babeljs.io/docs/en/assumptions#puregetters\nhttps://babeljs.io/docs/en/assumptions#setclassmethods\n…\nhttps://babeljs.io/docs/en/assumptions#setpublicclassfields\nhttps://babeljs.io/docs/en/assumptions#setspreadproperties\n…\n…\n<code>transform-arrow-functions</code>\n<code>proposal-async-generator-functions</code>\n<code>transform-async-to-generator</code>\n<code>transform-block-scoped-functions</code>\n<code>transform-block-scoping</code>\n<code>bugfix/transform-async-arrows-in-class</code>\n<code>bugfix/transform-edge-default-parameters</code>\n…\n<code>bugfix/transform-tagged-template-caching</code>\n<code>bugfix/transform-edge-function-name</code>\n<code>bugfix/transform-safari-block-shadowing</code>\n<code>bugfix/transform-safari-for-shadowing</code>\n<code>bugfix/transform-v8-spread-parameters-in-optional-chaining</code>\n<code>proposal-class-properties</code>\n<code>proposal-class-static-block</code>\n<code>transform-classes</code>\n<code>transform-computed-properties</code>\n<code>transform-destructuring</code>\n<code>transform-dotall-regex</code>\n<code>transform-duplicate-keys</code>\n<code>transform-exponentiation-operator</code>\n<code>proposal-export-namespace-from</code>\n<code>transform-for-of</code>\n<code>transform-function-name</code>\n<code>proposal-json-strings</code>\n<code>transform-literals</code>\n<code>proposal-logical-assignment-operators</code>\n<code>transform-member-expression-literals</code>\n<code>transform-named-capturing-groups-regex</code>\n<code>transform-new-target</code>\n<code>proposal-nullish-coalescing-operator</code>\n<code>proposal-numeric-separator</code>\n<code>proposal-object-rest-spread</code>\n<code>transform-object-super</code>\n<code>proposal-optional-catch-binding</code>\n<code>proposal-optional-chaining</code>\n<code>transform-parameters</code>\n<code>proposal-private-methods</code>\n<code>proposal-private-property-in-object</code>\n<code>transform-property-literals</code>\n<code>transform-regenerator</code>\n<code>transform-reserved-words</code>\n<code>transform-shorthand-properties</code>\n<code>transform-spread</code>\n<code>transform-sticky-regex</code>\n<code>transform-template-literals</code>\n<code>transform-typeof-symbol</code>\n<code>transform-unicode-escapes</code>\n<code>proposal-unicode-property-regex</code>\n<code>transform-unicode-regex</code>\nGet a flags value with all known bits set.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nGet the underlying bits value.\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nWhether all set bits in a source flags value are also set …\nThe intersection of a source flags value with the …\nGet a flags value with all bits unset.\nThe bitwise or (<code>|</code>) of the bits in each flags value.\nReturns the argument unchanged.\nConvert from a bits value.\nConvert from a bits value exactly.\nConvert from a bits value, unsetting any unknown bits.\nThe bitwise or (<code>|</code>) of the bits in each flags value.\nGet a flags value with the bits of a flag with the given …\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nWhether any set bits in a source flags value are also set …\nCalls <code>U::from(self)</code>.\nWhether all known bits in this flags value are set.\nWhether all bits in this flags value are unset.\nYield a set of contained flags values.\nYield a set of contained named flags values.\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nThe intersection of a source flags value with the …\nCall <code>insert</code> when <code>value</code> is <code>true</code> or <code>remove</code> when <code>value</code> is …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nFixes ast nodes before printing so semantics are preserved.\nThis variable is used to manage helper scripts like …\nTracks used helper methods. (e.g. __extends)\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nReturns the argument unchanged.\nSee hygiene_with_config for doc. Creates a <code>hygiene</code> pass …\nThe pass actually modifies the identifiers in the way that …\nMangle even if vars are visible to <code>eval</code> or <code>with</code>.\nCalls <code>U::from(self)</code>.\nIf true, the <code>hygiene</code> pass will preserve class names.\nIf true, the bug of safari 10 is avoided.\nThe marks derived from this marks will treated as …\nA visitor which visits node only if <code>enabled</code> is true.\nTrait for a pass which is designed to invoked multiple …\nShould run again?\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nReset.\nThis is considered as a private type and it’s NOT A …\nInvoked after visiting all ModuleItems, possibly in …\nInvoked after visiting each statements.\nInvoked after visiting each statements.\nInvoked after visiting all Stmts, possibly in parallel.\nUsed to create visitor.\nInvoke <code>op</code> in parallel, if <code>swc_ecma_utils</code> is compiled with …\nInvoke <code>op</code> in parallel, if <code>swc_ecma_utils</code> is compiled with …\nThis can be called in anytime.\nIt should be true if you expect lots of collisions\nShould reset <code>n</code> to 0 for each identifier?\nShould increment <code>n</code>.\ndon’t actually get stored\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.")