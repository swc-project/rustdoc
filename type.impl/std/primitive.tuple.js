(function() {var type_impls = {
"swc_core":[["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-EqIgnoreSpan-for-(B,+A)\" class=\"impl\"><a href=\"#impl-EqIgnoreSpan-for-(B,+A)\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;B, A&gt; <a class=\"trait\" href=\"swc_core/common/trait.EqIgnoreSpan.html\" title=\"trait swc_core::common::EqIgnoreSpan\">EqIgnoreSpan</a> for <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.tuple.html\">(B, A)</a><div class=\"where\">where\n    B: <a class=\"trait\" href=\"swc_core/common/trait.EqIgnoreSpan.html\" title=\"trait swc_core::common::EqIgnoreSpan\">EqIgnoreSpan</a>,\n    A: <a class=\"trait\" href=\"swc_core/common/trait.EqIgnoreSpan.html\" title=\"trait swc_core::common::EqIgnoreSpan\">EqIgnoreSpan</a>,</div></h3></section></summary><div class=\"impl-items\"><section id=\"method.eq_ignore_span\" class=\"method trait-impl\"><a href=\"#method.eq_ignore_span\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"swc_core/common/trait.EqIgnoreSpan.html#tymethod.eq_ignore_span\" class=\"fn\">eq_ignore_span</a>(&amp;self, rhs: &amp;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.tuple.html\">(B, A)</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.bool.html\">bool</a></h4></section></div></details>","EqIgnoreSpan","swc_core::ecma::utils::swc_ecma_ast::Id"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-From%3C%5BT;+2%5D%3E-for-(T,+T)\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.71.0\">1.71.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/tuple.rs.html#201\">source</a></span><a href=\"#impl-From%3C%5BT;+2%5D%3E-for-(T,+T)\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/convert/trait.From.html\" title=\"trait core::convert::From\">From</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.array.html\">[T; 2]</a>&gt; for <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.tuple.html\">(T, T)</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.from\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/core/tuple.rs.html#201\">source</a><a href=\"#method.from\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/convert/trait.From.html#tymethod.from\" class=\"fn\">from</a>(array: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.array.html\">[T; 2]</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.tuple.html\">(T, T)</a></h4></section></summary><div class='docblock'>Converts to this type from the input type.</div></details></div></details>","From<[T; 2]>","swc_core::ecma::utils::swc_ecma_ast::Id"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-From%3CIdent%3E-for-(Atom,+SyntaxContext)\" class=\"impl\"><a href=\"#impl-From%3CIdent%3E-for-(Atom,+SyntaxContext)\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/convert/trait.From.html\" title=\"trait core::convert::From\">From</a>&lt;<a class=\"struct\" href=\"swc_core/ecma/utils/swc_ecma_ast/struct.Ident.html\" title=\"struct swc_core::ecma::utils::swc_ecma_ast::Ident\">Ident</a>&gt; for (<a class=\"struct\" href=\"swc_core/base/atoms/struct.JsWord.html\" title=\"struct swc_core::base::atoms::JsWord\">Atom</a>, <a class=\"struct\" href=\"swc_core/common/struct.SyntaxContext.html\" title=\"struct swc_core::common::SyntaxContext\">SyntaxContext</a>)</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.from\" class=\"method trait-impl\"><a href=\"#method.from\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/convert/trait.From.html#tymethod.from\" class=\"fn\">from</a>(i: <a class=\"struct\" href=\"swc_core/ecma/utils/swc_ecma_ast/struct.Ident.html\" title=\"struct swc_core::ecma::utils::swc_ecma_ast::Ident\">Ident</a>) -&gt; (<a class=\"struct\" href=\"swc_core/base/atoms/struct.JsWord.html\" title=\"struct swc_core::base::atoms::JsWord\">Atom</a>, <a class=\"struct\" href=\"swc_core/common/struct.SyntaxContext.html\" title=\"struct swc_core::common::SyntaxContext\">SyntaxContext</a>)</h4></section></summary><div class='docblock'>Converts to this type from the input type.</div></details></div></details>","From<Ident>","swc_core::ecma::utils::swc_ecma_ast::Id"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-IdentLike-for-(Atom,+SyntaxContext)\" class=\"impl\"><a href=\"#impl-IdentLike-for-(Atom,+SyntaxContext)\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"swc_core/ecma/utils/ident/trait.IdentLike.html\" title=\"trait swc_core::ecma::utils::ident::IdentLike\">IdentLike</a> for (<a class=\"struct\" href=\"swc_core/base/atoms/struct.JsWord.html\" title=\"struct swc_core::base::atoms::JsWord\">Atom</a>, <a class=\"struct\" href=\"swc_core/common/struct.SyntaxContext.html\" title=\"struct swc_core::common::SyntaxContext\">SyntaxContext</a>)</h3></section></summary><div class=\"impl-items\"><section id=\"method.from_ident\" class=\"method trait-impl\"><a href=\"#method.from_ident\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"swc_core/ecma/utils/ident/trait.IdentLike.html#tymethod.from_ident\" class=\"fn\">from_ident</a>(i: &amp;<a class=\"struct\" href=\"swc_core/ecma/utils/swc_ecma_ast/struct.Ident.html\" title=\"struct swc_core::ecma::utils::swc_ecma_ast::Ident\">Ident</a>) -&gt; (<a class=\"struct\" href=\"swc_core/base/atoms/struct.JsWord.html\" title=\"struct swc_core::base::atoms::JsWord\">Atom</a>, <a class=\"struct\" href=\"swc_core/common/struct.SyntaxContext.html\" title=\"struct swc_core::common::SyntaxContext\">SyntaxContext</a>)</h4></section><section id=\"method.to_id\" class=\"method trait-impl\"><a href=\"#method.to_id\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"swc_core/ecma/utils/ident/trait.IdentLike.html#tymethod.to_id\" class=\"fn\">to_id</a>(&amp;self) -&gt; (<a class=\"struct\" href=\"swc_core/base/atoms/struct.JsWord.html\" title=\"struct swc_core::base::atoms::JsWord\">Atom</a>, <a class=\"struct\" href=\"swc_core/common/struct.SyntaxContext.html\" title=\"struct swc_core::common::SyntaxContext\">SyntaxContext</a>)</h4></section><section id=\"method.into_id\" class=\"method trait-impl\"><a href=\"#method.into_id\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"swc_core/ecma/utils/ident/trait.IdentLike.html#tymethod.into_id\" class=\"fn\">into_id</a>(self) -&gt; (<a class=\"struct\" href=\"swc_core/base/atoms/struct.JsWord.html\" title=\"struct swc_core::base::atoms::JsWord\">Atom</a>, <a class=\"struct\" href=\"swc_core/common/struct.SyntaxContext.html\" title=\"struct swc_core::common::SyntaxContext\">SyntaxContext</a>)</h4></section></div></details>","IdentLike","swc_core::ecma::utils::swc_ecma_ast::Id"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-TypeEq-for-(B,+A)\" class=\"impl\"><a href=\"#impl-TypeEq-for-(B,+A)\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;B, A&gt; <a class=\"trait\" href=\"swc_core/common/trait.TypeEq.html\" title=\"trait swc_core::common::TypeEq\">TypeEq</a> for <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.tuple.html\">(B, A)</a><div class=\"where\">where\n    B: <a class=\"trait\" href=\"swc_core/common/trait.TypeEq.html\" title=\"trait swc_core::common::TypeEq\">TypeEq</a>,\n    A: <a class=\"trait\" href=\"swc_core/common/trait.TypeEq.html\" title=\"trait swc_core::common::TypeEq\">TypeEq</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.type_eq\" class=\"method trait-impl\"><a href=\"#method.type_eq\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"swc_core/common/trait.TypeEq.html#tymethod.type_eq\" class=\"fn\">type_eq</a>(&amp;self, rhs: &amp;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.tuple.html\">(B, A)</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'><strong>Note</strong>: This method should return <code>true</code> for non-type values.</div></details></div></details>","TypeEq","swc_core::ecma::utils::swc_ecma_ast::Id"]],
"swc_ecma_ast":[],
"swc_ecma_usage_analyzer":[]
};if (window.register_type_impls) {window.register_type_impls(type_impls);} else {window.pending_type_impls = type_impls;}})()